
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.adolfosc.analizadores.compilador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.adolfosc.analizadores.ErrorSintaxis;
import com.adolfosc.modelo.music.Pista;
import com.adolfosc.modelo.music.Expresion;
import com.adolfosc.modelo.music.Instruccion;
import com.adolfosc.modelo.music.Parametro;
import com.adolfosc.modelo.music.Condicion;
import com.adolfosc.modelo.music.Lista;
import com.adolfosc.modelo.instrucciones.Asignacion;
import com.adolfosc.modelo.instrucciones.Dimension;
import com.adolfosc.modelo.instrucciones.Declaracion;
import com.adolfosc.modelo.instrucciones.Funcion;
import com.adolfosc.modelo.instrucciones.DeclDim;
import com.adolfosc.modelo.instrucciones.CondSi;
import com.adolfosc.modelo.instrucciones.Para;
import com.adolfosc.modelo.instrucciones.Mientras;
import com.adolfosc.modelo.instrucciones.CasoC;
import com.adolfosc.modelo.instrucciones.SwitchC;
import com.adolfosc.modelo.instrucciones.IncrDecr;
import java.util.Stack;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CompiladorParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CompiladorParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CompiladorParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompiladorParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\002\002\004\000\002\072\002\000\002\002" +
    "\005\000\002\073\002\000\002\002\006\000\002\074\002" +
    "\000\002\002\006\000\002\075\002\000\002\002\006\000" +
    "\002\076\002\000\002\002\010\000\002\077\002\000\002" +
    "\002\010\000\002\100\002\000\002\002\010\000\002\101" +
    "\002\000\002\002\011\000\002\102\002\000\002\002\006" +
    "\000\002\103\002\000\002\002\006\000\002\104\002\000" +
    "\002\002\006\000\002\105\002\000\002\002\005\000\002" +
    "\106\002\000\002\002\005\000\002\107\002\000\002\002" +
    "\006\000\002\002\003\000\002\002\004\000\002\002\002" +
    "\000\002\110\002\000\002\003\007\000\002\111\002\000" +
    "\002\004\006\000\002\004\002\000\002\112\002\000\002" +
    "\005\006\000\002\005\002\000\002\113\002\000\002\006" +
    "\005\000\002\114\002\000\002\006\004\000\002\115\002" +
    "\000\002\007\010\000\002\116\002\000\002\117\002\000" +
    "\002\120\002\000\002\007\017\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\121\002\000\002\010\006\000\002\010\002" +
    "\000\002\122\002\000\002\123\002\000\002\023\007\000" +
    "\002\023\002\000\002\124\002\000\002\015\005\000\002" +
    "\015\002\000\002\125\002\000\002\012\005\000\002\126" +
    "\002\000\002\127\002\000\002\130\002\000\002\012\013" +
    "\000\002\131\002\000\002\012\005\000\002\132\002\000" +
    "\002\012\005\000\002\133\002\000\002\012\005\000\002" +
    "\134\002\000\002\012\005\000\002\135\002\000\002\012" +
    "\005\000\002\136\002\000\002\137\002\000\002\012\010" +
    "\000\002\140\002\000\002\012\005\000\002\141\002\000" +
    "\002\142\002\000\002\024\007\000\002\024\002\000\002" +
    "\143\002\000\002\014\005\000\002\014\002\000\002\144" +
    "\002\000\002\047\005\000\002\145\002\000\002\146\002" +
    "\000\002\147\002\000\002\047\013\000\002\150\002\000" +
    "\002\047\005\000\002\151\002\000\002\047\005\000\002" +
    "\152\002\000\002\047\005\000\002\153\002\000\002\047" +
    "\005\000\002\154\002\000\002\047\005\000\002\155\002" +
    "\000\002\156\002\000\002\047\010\000\002\157\002\000" +
    "\002\047\005\000\002\047\003\000\002\160\002\000\002" +
    "\161\002\000\002\050\007\000\002\050\002\000\002\162" +
    "\002\000\002\051\005\000\002\163\002\000\002\051\005" +
    "\000\002\164\002\000\002\051\005\000\002\051\002\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\165" +
    "\002\000\002\011\005\000\002\011\002\000\002\166\002" +
    "\000\002\017\006\000\002\017\002\000\002\020\004\000" +
    "\002\167\002\000\002\020\005\000\002\021\004\000\002" +
    "\021\002\000\002\170\002\000\002\022\006\000\002\022" +
    "\002\000\002\171\002\000\002\025\006\000\002\172\002" +
    "\000\002\025\006\000\002\173\002\000\002\174\002\000" +
    "\002\175\002\000\002\025\014\000\002\176\002\000\002" +
    "\177\002\000\002\026\007\000\002\026\002\000\002\200" +
    "\002\000\002\027\011\000\002\201\002\000\002\027\006" +
    "\000\002\202\002\000\002\027\007\000\002\203\002\000" +
    "\002\027\010\000\002\204\002\000\002\030\006\000\002" +
    "\205\002\000\002\030\005\000\002\030\002\000\002\031" +
    "\004\000\002\031\002\000\002\206\002\000\002\032\007" +
    "\000\002\207\002\000\002\032\007\000\002\210\002\000" +
    "\002\032\007\000\002\032\003\000\002\211\002\000\002" +
    "\212\002\000\002\213\002\000\002\033\013\000\002\033" +
    "\004\000\002\214\002\000\002\215\002\000\002\216\002" +
    "\000\002\033\013\000\002\037\003\000\002\037\002\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\217" +
    "\002\000\002\035\005\000\002\035\002\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\220\002\000\002\221\002\000\002" +
    "\222\002\000\002\040\017\000\002\223\002\000\002\224" +
    "\002\000\002\040\010\000\002\041\003\000\002\041\003" +
    "\000\002\225\002\000\002\042\006\000\002\226\002\000" +
    "\002\042\006\000\002\227\002\000\002\230\002\000\002" +
    "\231\002\000\002\042\014\000\002\061\003\000\002\061" +
    "\002\000\002\043\003\000\002\232\002\000\002\233\002" +
    "\000\002\062\010\000\002\234\002\000\002\044\007\000" +
    "\002\235\002\000\002\044\007\000\002\236\002\000\002" +
    "\044\007\000\002\237\002\000\002\240\002\000\002\045" +
    "\012\000\002\241\002\000\002\045\007\000\002\242\002" +
    "\000\002\045\005\000\002\243\002\000\002\046\006\000" +
    "\002\244\002\000\002\046\005\000\002\245\002\000\002" +
    "\046\005\000\002\052\004\000\002\052\004\000\002\246" +
    "\002\000\002\053\006\000\002\247\002\000\002\053\007" +
    "\000\002\250\002\000\002\053\007\000\002\251\002\000" +
    "\002\252\002\000\002\053\012\000\002\253\002\000\002" +
    "\053\007\000\002\254\002\000\002\053\007\000\002\255" +
    "\002\000\002\063\010\000\002\064\005\000\002\064\003" +
    "\000\002\256\002\000\002\054\006\000\002\257\002\000" +
    "\002\054\005\000\002\054\002\000\002\056\004\000\002" +
    "\056\002\000\002\260\002\000\002\055\005\000\002\261" +
    "\002\000\002\262\002\000\002\263\002\000\002\055\013" +
    "\000\002\264\002\000\002\055\005\000\002\265\002\000" +
    "\002\055\005\000\002\266\002\000\002\055\005\000\002" +
    "\267\002\000\002\055\005\000\002\270\002\000\002\055" +
    "\005\000\002\271\002\000\002\272\002\000\002\055\010" +
    "\000\002\273\002\000\002\055\005\000\002\274\002\000" +
    "\002\275\002\000\002\060\007\000\002\060\002\000\002" +
    "\276\002\000\002\057\005\000\002\277\002\000\002\057" +
    "\005\000\002\300\002\000\002\057\005\000\002\057\002" +
    "\000\002\301\002\000\002\065\012\000\002\302\002\000" +
    "\002\066\007\000\002\303\002\000\002\066\007\000\002" +
    "\304\002\000\002\066\007\000\002\066\010\000\002\067" +
    "\004\000\002\067\002\000\002\070\003\000\002\070\003" +
    "\000\002\305\002\000\002\071\006\000\002\071\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u022d\000\100\002\uffe2\003\034\004\023\006\027\007" +
    "\uffd7\011\011\012\021\013\055\014\040\015\004\016\016" +
    "\017\050\020\054\021\022\022\051\023\025\024\035\025" +
    "\033\026\053\027\047\030\045\031\007\032\020\040\032" +
    "\041\026\042\015\043\041\044\014\045\052\100\013\106" +
    "\031\001\002\000\022\073\uff10\074\uff10\106\uff10\107\uff10" +
    "\110\uff10\111\uff10\112\uff10\113\uff10\001\002\000\004\103" +
    "\uffec\001\002\000\004\103\uffee\001\002\000\004\074\uff19" +
    "\001\002\000\004\103\uffe6\001\002\000\004\074\u021c\001" +
    "\002\000\004\103\ufffa\001\002\000\004\033\u01f5\001\002" +
    "\000\006\010\uffcc\106\uffcc\001\002\000\006\010\uffce\106" +
    "\uffce\001\002\000\102\002\000\003\000\004\000\006\000" +
    "\007\000\011\000\012\000\013\000\014\000\015\000\016" +
    "\000\017\000\020\000\021\000\022\000\023\000\024\000" +
    "\025\000\026\000\027\000\030\000\031\000\032\000\040" +
    "\000\041\000\042\000\043\000\044\000\045\000\100\000" +
    "\101\000\106\000\001\002\000\004\002\u01f2\001\002\000" +
    "\004\074\uff61\001\002\000\004\100\uff4e\001\002\000\004" +
    "\074\uff30\001\002\000\004\106\u01de\001\002\000\004\007" +
    "\u01aa\001\002\000\004\103\ufff0\001\002\000\006\010\uffcf" +
    "\106\uffcf\001\002\000\020\007\uffd9\032\u01a0\041\026\042" +
    "\015\043\041\044\014\045\052\001\002\000\004\106\u019a" +
    "\001\002\000\016\046\u0180\047\u0185\050\uff6f\074\ufefb\076" +
    "\uff6b\105\uff6d\001\002\000\004\103\uff0c\001\002\000\004" +
    "\074\uff17\001\002\000\102\002\uffe2\003\034\004\023\006" +
    "\027\007\uffd7\011\011\012\021\013\055\014\040\015\004" +
    "\016\016\017\050\020\054\021\022\022\051\023\025\024" +
    "\035\025\033\026\053\027\047\030\045\031\007\032\020" +
    "\040\032\041\026\042\015\043\041\044\014\045\052\100" +
    "\013\101\uffe2\106\031\001\002\000\034\006\uff12\025\uff12" +
    "\027\uff12\030\uff12\032\uff12\073\uff12\074\uff12\106\uff12\107" +
    "\uff12\110\uff12\111\uff12\112\uff12\113\uff12\001\002\000\004" +
    "\100\ufff8\001\002\000\004\100\ufff6\001\002\000\004\074" +
    "\uff54\001\002\000\006\010\uffcd\106\uffcd\001\002\000\102" +
    "\002\uffe8\003\uffe8\004\uffe8\006\uffe8\007\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\100\uffe8\101\uffe8\106\uffe8\001" +
    "\002\000\102\002\uffea\003\uffea\004\uffea\006\uffea\007\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\100\uffea\101\uffea" +
    "\106\uffea\001\002\000\004\100\ufff2\001\002\000\004\074" +
    "\uff1b\001\002\000\004\100\ufff4\001\002\000\004\074\uff1d" +
    "\001\002\000\004\102\uff0e\001\002\000\004\100\uff21\001" +
    "\002\000\006\010\uffcb\106\uffcb\001\002\000\004\074\uff14" +
    "\001\002\000\004\074\uff34\001\002\000\004\074\067\001" +
    "\002\000\006\002\uffe4\101\uffe4\001\002\000\004\103\ufffc" +
    "\001\002\000\100\003\ufffe\004\ufffe\006\ufffe\007\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\100\ufffe\101\ufffe\106" +
    "\ufffe\001\002\000\100\003\034\004\023\006\027\007\uffd7" +
    "\011\011\012\021\013\055\014\040\015\004\016\016\017" +
    "\050\020\054\021\022\022\051\023\025\024\035\025\033" +
    "\026\053\027\047\030\045\031\007\032\020\040\032\041" +
    "\026\042\015\043\041\044\014\045\052\100\013\101\uffe2" +
    "\106\031\001\002\000\004\101\063\001\002\000\006\002" +
    "\ufffd\101\ufffd\001\002\000\004\103\065\001\002\000\102" +
    "\002\uffe2\003\034\004\023\006\027\007\uffd7\011\011\012" +
    "\021\013\055\014\040\015\004\016\016\017\050\020\054" +
    "\021\022\022\051\023\025\024\035\025\033\026\053\027" +
    "\047\030\045\031\007\032\020\040\032\041\026\042\015" +
    "\043\041\044\014\045\052\100\013\101\uffe2\106\031\001" +
    "\002\000\006\002\ufffb\101\ufffb\001\002\000\024\063\uff50" +
    "\073\uff50\074\uff50\106\uff50\107\uff50\110\uff50\111\uff50\112" +
    "\uff50\113\uff50\001\002\000\024\063\071\073\uff43\074\uff43" +
    "\106\uff43\107\uff43\110\uff43\111\uff43\112\uff43\113\uff43\001" +
    "\002\000\022\073\uff44\074\uff44\106\uff44\107\uff44\110\uff44" +
    "\111\uff44\112\uff44\113\uff44\001\002\000\022\073\076\074" +
    "\102\106\103\107\075\110\105\111\101\112\104\113\077" +
    "\001\002\000\004\075\074\001\002\000\004\100\uff4f\001" +
    "\002\000\060\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\075\uffb8" +
    "\077\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\001\002\000" +
    "\022\073\uffad\074\uffad\106\uffad\107\uffad\110\uffad\111\uffad" +
    "\112\uffad\113\uffad\001\002\000\060\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\075\uffb2\077\uffb2\101\uffb2\102\uffb2\103\uffb2" +
    "\104\uffb2\001\002\000\034\057\157\060\156\061\153\062" +
    "\161\064\154\065\155\066\160\067\162\070\152\071\151" +
    "\072\164\075\uff49\103\uff49\001\002\000\060\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070" +
    "\uffba\071\uffba\072\uffba\075\uffba\077\uffba\101\uffba\102\uffba" +
    "\103\uffba\104\uffba\001\002\000\022\073\uffb0\074\uffb0\106" +
    "\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\001\002" +
    "\000\062\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\075\uffc0\076" +
    "\124\077\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\001\002" +
    "\000\060\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\075\uffb4\077" +
    "\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\001\002\000\060" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\067\uffb6\070\uffb6\071\uffb6\072\uffb6\075\uffb6\077\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\104\uffb6\001\002\000\060\051\114" +
    "\052\107\053\111\054\115\055\112\056\110\057\uffa5\060" +
    "\uffa5\061\uffa5\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\075\uffa5\077\uffa5\101\uffa5\102" +
    "\uffa5\103\uffa5\104\uffa5\001\002\000\034\006\uff82\025\uff82" +
    "\027\uff82\030\uff82\032\uff82\073\uff82\074\uff82\106\uff82\107" +
    "\uff82\110\uff82\111\uff82\112\uff82\113\uff82\001\002\000\034" +
    "\006\uff7f\025\uff7f\027\uff7f\030\uff7f\032\uff7f\073\uff7f\074" +
    "\uff7f\106\uff7f\107\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f" +
    "\001\002\000\034\006\uff81\025\uff81\027\uff81\030\uff81\032" +
    "\uff81\073\uff81\074\uff81\106\uff81\107\uff81\110\uff81\111\uff81" +
    "\112\uff81\113\uff81\001\002\000\034\006\uff7e\025\uff7e\027" +
    "\uff7e\030\uff7e\032\uff7e\073\uff7e\074\uff7e\106\uff7e\107\uff7e" +
    "\110\uff7e\111\uff7e\112\uff7e\113\uff7e\001\002\000\044\057" +
    "\uffb5\060\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\070\uffb5\071\uffb5\072\uffb5\075\uffb5\077\uffb5\101" +
    "\uffb5\102\uffb5\103\uffb5\104\uffb5\001\002\000\034\006\uff83" +
    "\025\uff83\027\uff83\030\uff83\032\uff83\073\uff83\074\uff83\106" +
    "\uff83\107\uff83\110\uff83\111\uff83\112\uff83\113\uff83\001\002" +
    "\000\034\006\uff80\025\uff80\027\uff80\030\uff80\032\uff80\073" +
    "\uff80\074\uff80\106\uff80\107\uff80\110\uff80\111\uff80\112\uff80" +
    "\113\uff80\001\002\000\022\073\uffa7\074\uffa7\106\uffa7\107" +
    "\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\001\002\000\022" +
    "\073\076\074\102\106\103\107\075\110\105\111\101\112" +
    "\104\113\077\001\002\000\044\057\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\075\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6" +
    "\104\uffa6\001\002\000\060\051\114\052\107\053\111\054" +
    "\115\055\112\056\110\057\uffa5\060\uffa5\061\uffa5\062\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\075\uffa5\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5" +
    "\001\002\000\044\057\uffb3\060\uffb3\061\uffb3\062\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\075\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\001" +
    "\002\000\060\051\114\052\107\053\111\054\115\055\112" +
    "\056\110\057\uffa5\060\uffa5\061\uffa5\062\uffa5\064\uffa5\065" +
    "\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\075\uffa5" +
    "\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\001\002\000" +
    "\022\073\uffbe\074\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe" +
    "\112\uffbe\113\uffbe\001\002\000\022\073\076\074\102\106" +
    "\103\107\075\110\105\111\101\112\104\113\077\001\002" +
    "\000\004\077\uffbd\001\002\000\004\077\130\001\002\000" +
    "\062\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\075\uffa8\076\132" +
    "\077\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\001\002\000" +
    "\060\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\075\uffbc\077\uffbc" +
    "\101\uffbc\102\uffbc\103\uffbc\104\uffbc\001\002\000\022\073" +
    "\uffab\074\uffab\106\uffab\107\uffab\110\uffab\111\uffab\112\uffab" +
    "\113\uffab\001\002\000\022\073\076\074\102\106\103\107" +
    "\075\110\105\111\101\112\104\113\077\001\002\000\004" +
    "\077\uffaa\001\002\000\004\077\136\001\002\000\060\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\072\uffa9\075\uffa9\077\uffa9\101\uffa9" +
    "\102\uffa9\103\uffa9\104\uffa9\001\002\000\060\051\114\052" +
    "\107\053\111\054\115\055\112\056\110\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070" +
    "\uffa5\071\uffa5\072\uffa5\075\uffa5\077\uffa5\101\uffa5\102\uffa5" +
    "\103\uffa5\104\uffa5\001\002\000\044\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\075\uffbb\077\uffbb\101\uffbb\102\uffbb\103" +
    "\uffbb\104\uffbb\001\002\000\044\057\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\072\uffbf\075\uffbf\077\uffbf\101\uffbf\102\uffbf\103\uffbf" +
    "\104\uffbf\001\002\000\022\073\076\074\102\106\103\107" +
    "\075\110\105\111\101\112\104\113\077\001\002\000\004" +
    "\075\144\001\002\000\060\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\075\uffaf\077\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf" +
    "\001\002\000\060\051\114\052\107\053\111\054\115\055" +
    "\112\056\110\057\uffa5\060\uffa5\061\uffa5\062\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\075" +
    "\uffa5\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\001\002" +
    "\000\044\057\uffae\060\uffae\061\uffae\062\uffae\064\uffae\065" +
    "\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\075\uffae" +
    "\077\uffae\101\uffae\102\uffae\103\uffae\104\uffae\001\002\000" +
    "\060\051\114\052\107\053\111\054\115\055\112\056\110" +
    "\057\uffa5\060\uffa5\061\uffa5\062\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\075\uffa5\077\uffa5" +
    "\101\uffa5\102\uffa5\103\uffa5\104\uffa5\001\002\000\044\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\072\uffb9\075\uffb9\077\uffb9\101" +
    "\uffb9\102\uffb9\103\uffb9\104\uffb9\001\002\000\036\006\uff39" +
    "\025\uff39\027\uff39\030\uff39\032\uff39\063\uff39\073\uff39\074" +
    "\uff39\106\uff39\107\uff39\110\uff39\111\uff39\112\uff39\113\uff39" +
    "\001\002\000\036\006\uff36\025\uff36\027\uff36\030\uff36\032" +
    "\uff36\063\uff36\073\uff36\074\uff36\106\uff36\107\uff36\110\uff36" +
    "\111\uff36\112\uff36\113\uff36\001\002\000\036\006\uff3e\025" +
    "\uff3e\027\uff3e\030\uff3e\032\uff3e\063\uff3e\073\uff3e\074\uff3e" +
    "\106\uff3e\107\uff3e\110\uff3e\111\uff3e\112\uff3e\113\uff3e\001" +
    "\002\000\036\006\uff40\025\uff40\027\uff40\030\uff40\032\uff40" +
    "\063\uff40\073\uff40\074\uff40\106\uff40\107\uff40\110\uff40\111" +
    "\uff40\112\uff40\113\uff40\001\002\000\036\006\uff3f\025\uff3f" +
    "\027\uff3f\030\uff3f\032\uff3f\063\uff3f\073\uff3f\074\uff3f\106" +
    "\uff3f\107\uff3f\110\uff3f\111\uff3f\112\uff3f\113\uff3f\001\002" +
    "\000\036\006\uff41\025\uff41\027\uff41\030\uff41\032\uff41\063" +
    "\uff41\073\uff41\074\uff41\106\uff41\107\uff41\110\uff41\111\uff41" +
    "\112\uff41\113\uff41\001\002\000\036\006\uff42\025\uff42\027" +
    "\uff42\030\uff42\032\uff42\063\uff42\073\uff42\074\uff42\106\uff42" +
    "\107\uff42\110\uff42\111\uff42\112\uff42\113\uff42\001\002\000" +
    "\036\006\uff38\025\uff38\027\uff38\030\uff38\032\uff38\063\uff38" +
    "\073\uff38\074\uff38\106\uff38\107\uff38\110\uff38\111\uff38\112" +
    "\uff38\113\uff38\001\002\000\036\006\uff3d\025\uff3d\027\uff3d" +
    "\030\uff3d\032\uff3d\063\uff3d\073\uff3d\074\uff3d\106\uff3d\107" +
    "\uff3d\110\uff3d\111\uff3d\112\uff3d\113\uff3d\001\002\000\036" +
    "\006\uff35\025\uff35\027\uff35\030\uff35\032\uff35\063\uff35\073" +
    "\uff35\074\uff35\106\uff35\107\uff35\110\uff35\111\uff35\112\uff35" +
    "\113\uff35\001\002\000\024\063\uff48\073\uff48\074\uff48\106" +
    "\uff48\107\uff48\110\uff48\111\uff48\112\uff48\113\uff48\001\002" +
    "\000\036\006\uff37\025\uff37\027\uff37\030\uff37\032\uff37\063" +
    "\uff37\073\uff37\074\uff37\106\uff37\107\uff37\110\uff37\111\uff37" +
    "\112\uff37\113\uff37\001\002\000\024\063\uff4d\073\uff4d\074" +
    "\uff4d\106\uff4d\107\uff4d\110\uff4d\111\uff4d\112\uff4d\113\uff4d" +
    "\001\002\000\024\063\071\073\uff43\074\uff43\106\uff43\107" +
    "\uff43\110\uff43\111\uff43\112\uff43\113\uff43\001\002\000\022" +
    "\073\uff4c\074\uff4c\106\uff4c\107\uff4c\110\uff4c\111\uff4c\112" +
    "\uff4c\113\uff4c\001\002\000\022\073\076\074\102\106\103" +
    "\107\075\110\105\111\101\112\104\113\077\001\002\000" +
    "\020\066\uff4b\067\uff4b\070\uff4b\071\uff4b\072\uff4b\075\uff4b" +
    "\103\uff4b\001\002\000\020\066\160\067\162\070\152\071" +
    "\151\072\164\075\uff3a\103\uff3a\001\002\000\006\075\uff4a" +
    "\103\uff4a\001\002\000\024\063\uff3c\073\uff3c\074\uff3c\106" +
    "\uff3c\107\uff3c\110\uff3c\111\uff3c\112\uff3c\113\uff3c\001\002" +
    "\000\024\063\071\073\uff43\074\uff43\106\uff43\107\uff43\110" +
    "\uff43\111\uff43\112\uff43\113\uff43\001\002\000\006\075\uff3b" +
    "\103\uff3b\001\002\000\024\063\071\073\uff43\074\uff43\106" +
    "\uff43\107\uff43\110\uff43\111\uff43\112\uff43\113\uff43\001\002" +
    "\000\022\073\uff47\074\uff47\106\uff47\107\uff47\110\uff47\111" +
    "\uff47\112\uff47\113\uff47\001\002\000\022\073\076\074\102" +
    "\106\103\107\075\110\105\111\101\112\104\113\077\001" +
    "\002\000\020\066\uff46\067\uff46\070\uff46\071\uff46\072\uff46" +
    "\075\uff46\103\uff46\001\002\000\020\066\160\067\162\070" +
    "\152\071\151\072\164\075\uff3a\103\uff3a\001\002\000\006" +
    "\075\uff45\103\uff45\001\002\000\060\051\114\052\107\053" +
    "\111\054\115\055\112\056\110\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\075\uffa5\077\uffa5\101\uffa5\102\uffa5\103\uffa5" +
    "\104\uffa5\001\002\000\044\057\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\075\uffb1\077\uffb1\101\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\001\002\000\022\073\076\074\102\106\103\107\075" +
    "\110\105\111\101\112\104\113\077\001\002\000\044\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\075\uffac\077\uffac\101" +
    "\uffac\102\uffac\103\uffac\104\uffac\001\002\000\060\051\114" +
    "\052\107\053\111\054\115\055\112\056\110\057\uffa5\060" +
    "\uffa5\061\uffa5\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\075\uffa5\077\uffa5\101\uffa5\102" +
    "\uffa5\103\uffa5\104\uffa5\001\002\000\044\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\072\uffb7\075\uffb7\077\uffb7\101\uffb7\102\uffb7" +
    "\103\uffb7\104\uffb7\001\002\000\004\074\214\001\002\000" +
    "\016\041\026\042\015\043\041\044\014\045\052\106\uff22" +
    "\001\002\000\004\106\217\001\002\000\004\106\uff23\001" +
    "\002\000\010\050\uff2b\076\uff27\105\uff29\001\002\000\004" +
    "\103\221\001\002\000\024\063\uff33\073\uff33\074\uff33\106" +
    "\uff33\107\uff33\110\uff33\111\uff33\112\uff33\113\uff33\001\002" +
    "\000\024\063\071\073\uff43\074\uff43\106\uff43\107\uff43\110" +
    "\uff43\111\uff43\112\uff43\113\uff43\001\002\000\004\103\224" +
    "\001\002\000\004\106\225\001\002\000\006\046\226\047" +
    "\230\001\002\000\004\075\uff2d\001\002\000\004\075\uff32" +
    "\001\002\000\004\075\uff2c\001\002\000\004\075\232\001" +
    "\002\000\004\100\uff31\001\002\000\004\076\242\001\002" +
    "\000\004\105\240\001\002\000\004\050\236\001\002\000" +
    "\022\073\076\074\102\106\103\107\075\110\105\111\101" +
    "\112\104\113\077\001\002\000\004\103\uff2a\001\002\000" +
    "\022\073\076\074\102\106\103\107\075\110\105\111\101" +
    "\112\104\113\077\001\002\000\004\103\uff28\001\002\000" +
    "\022\073\uff26\074\uff26\106\uff26\107\uff26\110\uff26\111\uff26" +
    "\112\uff26\113\uff26\001\002\000\022\073\076\074\102\106" +
    "\103\107\075\110\105\111\101\112\104\113\077\001\002" +
    "\000\004\077\uff25\001\002\000\004\077\246\001\002\000" +
    "\006\076\250\105\uff64\001\002\000\004\105\255\001\002" +
    "\000\022\073\uff67\074\uff67\106\uff67\107\uff67\110\uff67\111" +
    "\uff67\112\uff67\113\uff67\001\002\000\022\073\076\074\102" +
    "\106\103\107\075\110\105\111\101\112\104\113\077\001" +
    "\002\000\004\077\uff66\001\002\000\004\077\254\001\002" +
    "\000\004\105\uff65\001\002\000\022\073\076\074\102\106" +
    "\103\107\075\110\105\111\101\112\104\113\077\001\002" +
    "\000\004\103\uff24\001\002\000\004\074\260\001\002\000" +
    "\050\006\uff59\025\uff59\027\uff59\030\uff59\032\uff59\041\026" +
    "\042\015\043\041\044\014\045\052\073\uff59\074\uff59\075" +
    "\uff57\106\uff59\107\uff59\110\uff59\111\uff59\112\uff59\113\uff59" +
    "\001\002\000\004\075\u0146\001\002\000\034\006\305\025" +
    "\275\027\274\030\301\032\307\073\272\074\277\106\302" +
    "\107\271\110\304\111\300\112\303\113\273\001\002\000" +
    "\004\106\264\001\002\000\006\075\uff5b\104\uff5b\001\002" +
    "\000\006\075\uff55\104\266\001\002\000\050\006\uff59\025" +
    "\uff59\027\uff59\030\uff59\032\uff59\041\026\042\015\043\041" +
    "\044\014\045\052\073\uff59\074\uff59\075\uff57\106\uff59\107" +
    "\uff59\110\uff59\111\uff59\112\uff59\113\uff59\001\002\000\004" +
    "\075\uff5a\001\002\000\004\075\uff56\001\002\000\054\051" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c" +
    "\060\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067" +
    "\uff9c\070\uff9c\071\uff9c\072\uff9c\075\uff9c\077\uff9c\103\uff9c" +
    "\104\uff9c\001\002\000\034\006\uff91\025\uff91\027\uff91\030" +
    "\uff91\032\uff91\073\uff91\074\uff91\106\uff91\107\uff91\110\uff91" +
    "\111\uff91\112\uff91\113\uff91\001\002\000\054\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070" +
    "\uff96\071\uff96\072\uff96\075\uff96\077\uff96\103\uff96\104\uff96" +
    "\001\002\000\004\074\ufeff\001\002\000\004\074\uff02\001" +
    "\002\000\006\075\uff55\104\266\001\002\000\034\006\uff94" +
    "\025\uff94\027\uff94\030\uff94\032\uff94\073\uff94\074\uff94\106" +
    "\uff94\107\uff94\110\uff94\111\uff94\112\uff94\113\uff94\001\002" +
    "\000\054\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e\065\uff9e" +
    "\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\075\uff9e\077" +
    "\uff9e\103\uff9e\104\uff9e\001\002\000\004\074\ufefd\001\002" +
    "\000\060\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\074\uff04\075" +
    "\uffa4\076\335\077\uffa4\103\uffa4\104\uffa4\001\002\000\054" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057" +
    "\uff98\060\uff98\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98" +
    "\067\uff98\070\uff98\071\uff98\072\uff98\075\uff98\077\uff98\103" +
    "\uff98\104\uff98\001\002\000\054\051\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a" +
    "\072\uff9a\075\uff9a\077\uff9a\103\uff9a\104\uff9a\001\002\000" +
    "\004\032\313\001\002\000\012\075\uff8f\077\uff8f\103\uff8f" +
    "\104\uff8f\001\002\000\004\074\uff08\001\002\000\004\074" +
    "\311\001\002\000\004\075\312\001\002\000\012\075\uff07" +
    "\077\uff07\103\uff07\104\uff07\001\002\000\004\074\uff06\001" +
    "\002\000\004\074\315\001\002\000\004\075\316\001\002" +
    "\000\012\075\uff05\077\uff05\103\uff05\104\uff05\001\002\000" +
    "\054\051\114\052\107\053\111\054\115\055\112\056\110" +
    "\057\157\060\156\061\153\062\161\064\154\065\155\066" +
    "\160\067\162\070\152\071\151\072\164\075\uff84\077\uff84" +
    "\103\uff84\104\uff84\001\002\000\034\006\uff8a\025\uff8a\027" +
    "\uff8a\030\uff8a\032\uff8a\073\uff8a\074\uff8a\106\uff8a\107\uff8a" +
    "\110\uff8a\111\uff8a\112\uff8a\113\uff8a\001\002\000\034\006" +
    "\uff86\025\uff86\027\uff86\030\uff86\032\uff86\073\uff86\074\uff86" +
    "\106\uff86\107\uff86\110\uff86\111\uff86\112\uff86\113\uff86\001" +
    "\002\000\034\006\uff88\025\uff88\027\uff88\030\uff88\032\uff88" +
    "\073\uff88\074\uff88\106\uff88\107\uff88\110\uff88\111\uff88\112" +
    "\uff88\113\uff88\001\002\000\012\075\uff99\077\uff99\103\uff99" +
    "\104\uff99\001\002\000\034\006\305\025\275\027\274\030" +
    "\301\032\307\073\272\074\277\106\302\107\271\110\304" +
    "\111\300\112\303\113\273\001\002\000\012\075\uff87\077" +
    "\uff87\103\uff87\104\uff87\001\002\000\034\006\305\025\275" +
    "\027\274\030\301\032\307\073\272\074\277\106\302\107" +
    "\271\110\304\111\300\112\303\113\273\001\002\000\012" +
    "\075\uff85\077\uff85\103\uff85\104\uff85\001\002\000\034\006" +
    "\305\025\275\027\274\030\301\032\307\073\272\074\277" +
    "\106\302\107\271\110\304\111\300\112\303\113\273\001" +
    "\002\000\012\075\uff89\077\uff89\103\uff89\104\uff89\001\002" +
    "\000\054\051\114\052\107\053\111\054\115\055\112\056" +
    "\110\057\157\060\156\061\153\062\161\064\154\065\155" +
    "\066\160\067\162\070\152\071\151\072\164\075\uff84\077" +
    "\uff84\103\uff84\104\uff84\001\002\000\012\075\uff97\077\uff97" +
    "\103\uff97\104\uff97\001\002\000\054\051\114\052\107\053" +
    "\111\054\115\055\112\056\110\057\157\060\156\061\153" +
    "\062\161\064\154\065\155\066\160\067\162\070\152\071" +
    "\151\072\164\075\uff84\077\uff84\103\uff84\104\uff84\001\002" +
    "\000\034\006\uffa2\025\uffa2\027\uffa2\030\uffa2\032\uffa2\073" +
    "\uffa2\074\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2" +
    "\113\uffa2\001\002\000\004\074\337\001\002\000\036\041" +
    "\026\042\015\043\041\044\014\045\052\073\ufef5\074\ufef5" +
    "\075\ufef3\106\ufef5\107\ufef5\110\ufef5\111\ufef5\112\ufef5\113" +
    "\ufef5\001\002\000\022\073\352\074\355\106\357\107\351" +
    "\110\361\111\356\112\360\113\353\001\002\000\004\075" +
    "\350\001\002\000\004\106\343\001\002\000\006\075\ufef7" +
    "\104\ufef7\001\002\000\006\075\ufef1\104\345\001\002\000" +
    "\036\041\026\042\015\043\041\044\014\045\052\073\ufef5" +
    "\074\ufef5\075\ufef3\106\ufef5\107\ufef5\110\ufef5\111\ufef5\112" +
    "\ufef5\113\ufef5\001\002\000\004\075\ufef6\001\002\000\004" +
    "\075\ufef2\001\002\000\012\075\uff03\077\uff03\103\uff03\104" +
    "\uff03\001\002\000\052\051\ufee8\052\ufee8\053\ufee8\054\ufee8" +
    "\055\ufee8\056\ufee8\057\ufee8\060\ufee8\061\ufee8\062\ufee8\064" +
    "\ufee8\065\ufee8\066\ufee8\067\ufee8\070\ufee8\071\ufee8\072\ufee8" +
    "\075\ufee8\077\ufee8\104\ufee8\001\002\000\022\073\ufedd\074" +
    "\ufedd\106\ufedd\107\ufedd\110\ufedd\111\ufedd\112\ufedd\113\ufedd" +
    "\001\002\000\052\051\ufee2\052\ufee2\053\ufee2\054\ufee2\055" +
    "\ufee2\056\ufee2\057\ufee2\060\ufee2\061\ufee2\062\ufee2\064\ufee2" +
    "\065\ufee2\066\ufee2\067\ufee2\070\ufee2\071\ufee2\072\ufee2\075" +
    "\ufee2\077\ufee2\104\ufee2\001\002\000\006\075\ufef1\104\345" +
    "\001\002\000\022\073\ufee0\074\ufee0\106\ufee0\107\ufee0\110" +
    "\ufee0\111\ufee0\112\ufee0\113\ufee0\001\002\000\052\051\ufeea" +
    "\052\ufeea\053\ufeea\054\ufeea\055\ufeea\056\ufeea\057\ufeea\060" +
    "\ufeea\061\ufeea\062\ufeea\064\ufeea\065\ufeea\066\ufeea\067\ufeea" +
    "\070\ufeea\071\ufeea\072\ufeea\075\ufeea\077\ufeea\104\ufeea\001" +
    "\002\000\054\051\ufef0\052\ufef0\053\ufef0\054\ufef0\055\ufef0" +
    "\056\ufef0\057\ufef0\060\ufef0\061\ufef0\062\ufef0\064\ufef0\065" +
    "\ufef0\066\ufef0\067\ufef0\070\ufef0\071\ufef0\072\ufef0\075\ufef0" +
    "\076\u0100\077\ufef0\104\ufef0\001\002\000\052\051\ufee4\052" +
    "\ufee4\053\ufee4\054\ufee4\055\ufee4\056\ufee4\057\ufee4\060\ufee4" +
    "\061\ufee4\062\ufee4\064\ufee4\065\ufee4\066\ufee4\067\ufee4\070" +
    "\ufee4\071\ufee4\072\ufee4\075\ufee4\077\ufee4\104\ufee4\001\002" +
    "\000\052\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6\056" +
    "\ufee6\057\ufee6\060\ufee6\061\ufee6\062\ufee6\064\ufee6\065\ufee6" +
    "\066\ufee6\067\ufee6\070\ufee6\071\ufee6\072\ufee6\075\ufee6\077" +
    "\ufee6\104\ufee6\001\002\000\052\051\114\052\107\053\111" +
    "\054\115\055\112\056\110\057\157\060\156\061\153\062" +
    "\161\064\154\065\155\066\160\067\162\070\152\071\151" +
    "\072\164\075\ufed1\077\ufed1\104\ufed1\001\002\000\022\073" +
    "\ufed7\074\ufed7\106\ufed7\107\ufed7\110\ufed7\111\ufed7\112\ufed7" +
    "\113\ufed7\001\002\000\022\073\ufed3\074\ufed3\106\ufed3\107" +
    "\ufed3\110\ufed3\111\ufed3\112\ufed3\113\ufed3\001\002\000\022" +
    "\073\ufed5\074\ufed5\106\ufed5\107\ufed5\110\ufed5\111\ufed5\112" +
    "\ufed5\113\ufed5\001\002\000\010\075\ufee5\077\ufee5\104\ufee5" +
    "\001\002\000\022\073\352\074\355\106\357\107\351\110" +
    "\361\111\356\112\360\113\353\001\002\000\010\075\ufed4" +
    "\077\ufed4\104\ufed4\001\002\000\022\073\352\074\355\106" +
    "\357\107\351\110\361\111\356\112\360\113\353\001\002" +
    "\000\010\075\ufed2\077\ufed2\104\ufed2\001\002\000\022\073" +
    "\352\074\355\106\357\107\351\110\361\111\356\112\360" +
    "\113\353\001\002\000\010\075\ufed6\077\ufed6\104\ufed6\001" +
    "\002\000\052\051\114\052\107\053\111\054\115\055\112" +
    "\056\110\057\157\060\156\061\153\062\161\064\154\065" +
    "\155\066\160\067\162\070\152\071\151\072\164\075\ufed1" +
    "\077\ufed1\104\ufed1\001\002\000\010\075\ufee3\077\ufee3\104" +
    "\ufee3\001\002\000\052\051\114\052\107\053\111\054\115" +
    "\055\112\056\110\057\157\060\156\061\153\062\161\064" +
    "\154\065\155\066\160\067\162\070\152\071\151\072\164" +
    "\075\ufed1\077\ufed1\104\ufed1\001\002\000\022\073\ufeee\074" +
    "\ufeee\106\ufeee\107\ufeee\110\ufeee\111\ufeee\112\ufeee\113\ufeee" +
    "\001\002\000\022\073\352\074\355\106\357\107\351\110" +
    "\361\111\356\112\360\113\353\001\002\000\004\077\ufeed" +
    "\001\002\000\004\077\u0104\001\002\000\054\051\ufed8\052" +
    "\ufed8\053\ufed8\054\ufed8\055\ufed8\056\ufed8\057\ufed8\060\ufed8" +
    "\061\ufed8\062\ufed8\064\ufed8\065\ufed8\066\ufed8\067\ufed8\070" +
    "\ufed8\071\ufed8\072\ufed8\075\ufed8\076\u0106\077\ufed8\104\ufed8" +
    "\001\002\000\052\051\ufeec\052\ufeec\053\ufeec\054\ufeec\055" +
    "\ufeec\056\ufeec\057\ufeec\060\ufeec\061\ufeec\062\ufeec\064\ufeec" +
    "\065\ufeec\066\ufeec\067\ufeec\070\ufeec\071\ufeec\072\ufeec\075" +
    "\ufeec\077\ufeec\104\ufeec\001\002\000\022\073\ufedb\074\ufedb" +
    "\106\ufedb\107\ufedb\110\ufedb\111\ufedb\112\ufedb\113\ufedb\001" +
    "\002\000\022\073\352\074\355\106\357\107\351\110\361" +
    "\111\356\112\360\113\353\001\002\000\004\077\ufeda\001" +
    "\002\000\004\077\u010a\001\002\000\052\051\ufed9\052\ufed9" +
    "\053\ufed9\054\ufed9\055\ufed9\056\ufed9\057\ufed9\060\ufed9\061" +
    "\ufed9\062\ufed9\064\ufed9\065\ufed9\066\ufed9\067\ufed9\070\ufed9" +
    "\071\ufed9\072\ufed9\075\ufed9\077\ufed9\104\ufed9\001\002\000" +
    "\052\051\114\052\107\053\111\054\115\055\112\056\110" +
    "\057\157\060\156\061\153\062\161\064\154\065\155\066" +
    "\160\067\162\070\152\071\151\072\164\075\ufed1\077\ufed1" +
    "\104\ufed1\001\002\000\010\075\ufeeb\077\ufeeb\104\ufeeb\001" +
    "\002\000\010\075\ufeef\077\ufeef\104\ufeef\001\002\000\052" +
    "\051\114\052\107\053\111\054\115\055\112\056\110\057" +
    "\157\060\156\061\153\062\161\064\154\065\155\066\160" +
    "\067\162\070\152\071\151\072\164\075\ufed1\077\ufed1\104" +
    "\ufed1\001\002\000\010\075\ufee9\077\ufee9\104\ufee9\001\002" +
    "\000\022\073\352\074\355\106\357\107\351\110\361\111" +
    "\356\112\360\113\353\001\002\000\004\075\u0112\001\002" +
    "\000\052\051\ufedf\052\ufedf\053\ufedf\054\ufedf\055\ufedf\056" +
    "\ufedf\057\ufedf\060\ufedf\061\ufedf\062\ufedf\064\ufedf\065\ufedf" +
    "\066\ufedf\067\ufedf\070\ufedf\071\ufedf\072\ufedf\075\ufedf\077" +
    "\ufedf\104\ufedf\001\002\000\052\051\114\052\107\053\111" +
    "\054\115\055\112\056\110\057\157\060\156\061\153\062" +
    "\161\064\154\065\155\066\160\067\162\070\152\071\151" +
    "\072\164\075\ufed1\077\ufed1\104\ufed1\001\002\000\010\075" +
    "\ufede\077\ufede\104\ufede\001\002\000\004\075\ufef4\001\002" +
    "\000\052\051\114\052\107\053\111\054\115\055\112\056" +
    "\110\057\157\060\156\061\153\062\161\064\154\065\155" +
    "\066\160\067\162\070\152\071\151\072\164\075\ufed1\077" +
    "\ufed1\104\ufed1\001\002\000\010\075\ufee1\077\ufee1\104\ufee1" +
    "\001\002\000\022\073\352\074\355\106\357\107\351\110" +
    "\361\111\356\112\360\113\353\001\002\000\010\075\ufedc" +
    "\077\ufedc\104\ufedc\001\002\000\052\051\114\052\107\053" +
    "\111\054\115\055\112\056\110\057\157\060\156\061\153" +
    "\062\161\064\154\065\155\066\160\067\162\070\152\071" +
    "\151\072\164\075\ufed1\077\ufed1\104\ufed1\001\002\000\010" +
    "\075\ufee7\077\ufee7\104\ufee7\001\002\000\034\006\305\025" +
    "\275\027\274\030\301\032\307\073\272\074\277\106\302" +
    "\107\271\110\304\111\300\112\303\113\273\001\002\000" +
    "\004\077\uffa1\001\002\000\004\077\u011f\001\002\000\056" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057" +
    "\uff8b\060\uff8b\061\uff8b\062\uff8b\064\uff8b\065\uff8b\066\uff8b" +
    "\067\uff8b\070\uff8b\071\uff8b\072\uff8b\075\uff8b\076\u0121\077" +
    "\uff8b\103\uff8b\104\uff8b\001\002\000\054\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\071\uffa0\072\uffa0\075\uffa0\077\uffa0\103\uffa0\104\uffa0\001" +
    "\002\000\034\006\uff8e\025\uff8e\027\uff8e\030\uff8e\032\uff8e" +
    "\073\uff8e\074\uff8e\106\uff8e\107\uff8e\110\uff8e\111\uff8e\112" +
    "\uff8e\113\uff8e\001\002\000\034\006\305\025\275\027\274" +
    "\030\301\032\307\073\272\074\277\106\302\107\271\110" +
    "\304\111\300\112\303\113\273\001\002\000\004\077\uff8d" +
    "\001\002\000\004\077\u0125\001\002\000\054\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070" +
    "\uff8c\071\uff8c\072\uff8c\075\uff8c\077\uff8c\103\uff8c\104\uff8c" +
    "\001\002\000\054\051\114\052\107\053\111\054\115\055" +
    "\112\056\110\057\157\060\156\061\153\062\161\064\154" +
    "\065\155\066\160\067\162\070\152\071\151\072\164\075" +
    "\uff84\077\uff84\103\uff84\104\uff84\001\002\000\012\075\uff9f" +
    "\077\uff9f\103\uff9f\104\uff9f\001\002\000\012\075\uffa3\077" +
    "\uffa3\103\uffa3\104\uffa3\001\002\000\004\074\u012a\001\002" +
    "\000\036\041\026\042\015\043\041\044\014\045\052\073" +
    "\ufef5\074\ufef5\075\ufef3\106\ufef5\107\ufef5\110\ufef5\111\ufef5" +
    "\112\ufef5\113\ufef5\001\002\000\004\075\u012c\001\002\000" +
    "\012\075\ufefc\077\ufefc\103\ufefc\104\ufefc\001\002\000\054" +
    "\051\114\052\107\053\111\054\115\055\112\056\110\057" +
    "\157\060\156\061\153\062\161\064\154\065\155\066\160" +
    "\067\162\070\152\071\151\072\164\075\uff84\077\uff84\103" +
    "\uff84\104\uff84\001\002\000\012\075\uff9d\077\uff9d\103\uff9d" +
    "\104\uff9d\001\002\000\034\006\305\025\275\027\274\030" +
    "\301\032\307\073\272\074\277\106\302\107\271\110\304" +
    "\111\300\112\303\113\273\001\002\000\004\075\u0131\001" +
    "\002\000\054\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93" +
    "\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\075\uff93" +
    "\077\uff93\103\uff93\104\uff93\001\002\000\054\051\114\052" +
    "\107\053\111\054\115\055\112\056\110\057\157\060\156" +
    "\061\153\062\161\064\154\065\155\066\160\067\162\070" +
    "\152\071\151\072\164\075\uff84\077\uff84\103\uff84\104\uff84" +
    "\001\002\000\012\075\uff92\077\uff92\103\uff92\104\uff92\001" +
    "\002\000\004\075\uff58\001\002\000\004\074\u0136\001\002" +
    "\000\004\114\u0137\001\002\000\004\104\uff01\001\002\000" +
    "\004\104\u0139\001\002\000\036\041\026\042\015\043\041" +
    "\044\014\045\052\073\ufef5\074\ufef5\075\ufef3\106\ufef5\107" +
    "\ufef5\110\ufef5\111\ufef5\112\ufef5\113\ufef5\001\002\000\004" +
    "\075\u013b\001\002\000\012\075\uff00\077\uff00\103\uff00\104" +
    "\uff00\001\002\000\004\074\u013d\001\002\000\036\041\026" +
    "\042\015\043\041\044\014\045\052\073\ufef5\074\ufef5\075" +
    "\ufef3\106\ufef5\107\ufef5\110\ufef5\111\ufef5\112\ufef5\113\ufef5" +
    "\001\002\000\004\075\u013f\001\002\000\012\075\ufefe\077" +
    "\ufefe\103\ufefe\104\ufefe\001\002\000\054\051\114\052\107" +
    "\053\111\054\115\055\112\056\110\057\157\060\156\061" +
    "\153\062\161\064\154\065\155\066\160\067\162\070\152" +
    "\071\151\072\164\075\uff84\077\uff84\103\uff84\104\uff84\001" +
    "\002\000\012\075\uff95\077\uff95\103\uff95\104\uff95\001\002" +
    "\000\034\006\305\025\275\027\274\030\301\032\307\073" +
    "\272\074\277\106\302\107\271\110\304\111\300\112\303" +
    "\113\273\001\002\000\012\075\uff90\077\uff90\103\uff90\104" +
    "\uff90\001\002\000\054\051\114\052\107\053\111\054\115" +
    "\055\112\056\110\057\157\060\156\061\153\062\161\064" +
    "\154\065\155\066\160\067\162\070\152\071\151\072\164" +
    "\075\uff84\077\uff84\103\uff84\104\uff84\001\002\000\012\075" +
    "\uff9b\077\uff9b\103\uff9b\104\uff9b\001\002\000\004\103\uff13" +
    "\001\002\000\004\102\u0148\001\002\000\102\002\uff0d\003" +
    "\uff0d\004\uff0d\006\uff0d\007\uff0d\011\uff0d\012\uff0d\013\uff0d" +
    "\014\uff0d\015\uff0d\016\uff0d\017\uff0d\020\uff0d\021\uff0d\022" +
    "\uff0d\023\uff0d\024\uff0d\025\uff0d\026\uff0d\027\uff0d\030\uff0d" +
    "\031\uff0d\032\uff0d\040\uff0d\041\uff0d\042\uff0d\043\uff0d\044" +
    "\uff0d\045\uff0d\100\uff0d\101\uff0d\106\uff0d\001\002\000\004" +
    "\074\u014a\001\002\000\050\006\uff59\025\uff59\027\uff59\030" +
    "\uff59\032\uff59\041\026\042\015\043\041\044\014\045\052" +
    "\073\uff59\074\uff59\075\uff57\106\uff59\107\uff59\110\uff59\111" +
    "\uff59\112\uff59\113\uff59\001\002\000\004\075\u014c\001\002" +
    "\000\004\103\uff1c\001\002\000\004\100\u014e\001\002\000" +
    "\100\003\034\004\023\006\027\007\uffd7\011\011\012\021" +
    "\013\055\014\040\015\004\016\016\017\050\020\054\021" +
    "\022\022\051\023\025\024\035\025\033\026\053\027\047" +
    "\030\045\031\007\032\020\040\032\041\026\042\015\043" +
    "\041\044\014\045\052\100\013\101\uffe2\106\031\001\002" +
    "\000\004\101\u0150\001\002\000\102\002\uffe2\003\034\004" +
    "\023\006\027\007\uffd7\011\011\012\021\013\055\014\040" +
    "\015\004\016\016\017\050\020\054\021\022\022\051\023" +
    "\025\024\035\025\033\026\053\027\047\030\045\031\007" +
    "\032\020\040\032\041\026\042\015\043\041\044\014\045" +
    "\052\100\013\101\uffe2\106\031\001\002\000\006\002\ufff3" +
    "\101\ufff3\001\002\000\004\074\u0153\001\002\000\050\006" +
    "\uff59\025\uff59\027\uff59\030\uff59\032\uff59\041\026\042\015" +
    "\043\041\044\014\045\052\073\uff59\074\uff59\075\uff57\106" +
    "\uff59\107\uff59\110\uff59\111\uff59\112\uff59\113\uff59\001\002" +
    "\000\004\075\u0155\001\002\000\004\103\uff1a\001\002\000" +
    "\004\100\u0157\001\002\000\100\003\034\004\023\006\027" +
    "\007\uffd7\011\011\012\021\013\055\014\040\015\004\016" +
    "\016\017\050\020\054\021\022\022\051\023\025\024\035" +
    "\025\033\026\053\027\047\030\045\031\007\032\020\040" +
    "\032\041\026\042\015\043\041\044\014\045\052\100\013" +
    "\101\uffe2\106\031\001\002\000\004\101\u0159\001\002\000" +
    "\004\021\u015b\001\002\000\102\002\uffe2\003\034\004\023" +
    "\006\027\007\uffd7\011\011\012\021\013\055\014\040\015" +
    "\004\016\016\017\050\020\054\021\022\022\051\023\025" +
    "\024\035\025\033\026\053\027\047\030\045\031\007\032" +
    "\020\040\032\041\026\042\015\043\041\044\014\045\052" +
    "\100\013\101\uffe2\106\031\001\002\000\004\074\uff20\001" +
    "\002\000\004\074\u015d\001\002\000\024\063\uff1f\073\uff1f" +
    "\074\uff1f\106\uff1f\107\uff1f\110\uff1f\111\uff1f\112\uff1f\113" +
    "\uff1f\001\002\000\024\063\071\073\uff43\074\uff43\106\uff43" +
    "\107\uff43\110\uff43\111\uff43\112\uff43\113\uff43\001\002\000" +
    "\004\075\u0160\001\002\000\102\002\uff1e\003\uff1e\004\uff1e" +
    "\006\uff1e\007\uff1e\011\uff1e\012\uff1e\013\uff1e\014\uff1e\015" +
    "\uff1e\016\uff1e\017\uff1e\020\uff1e\021\uff1e\022\uff1e\023\uff1e" +
    "\024\uff1e\025\uff1e\026\uff1e\027\uff1e\030\uff1e\031\uff1e\032" +
    "\uff1e\040\uff1e\041\uff1e\042\uff1e\043\uff1e\044\uff1e\045\uff1e" +
    "\100\uff1e\101\uff1e\106\uff1e\001\002\000\006\002\ufff1\101" +
    "\ufff1\001\002\000\102\002\uffe2\003\034\004\023\006\027" +
    "\007\uffd7\011\011\012\021\013\055\014\040\015\004\016" +
    "\016\017\050\020\054\021\022\022\051\023\025\024\035" +
    "\025\033\026\053\027\047\030\045\031\007\032\020\040" +
    "\032\041\026\042\015\043\041\044\014\045\052\100\013" +
    "\101\uffe2\106\031\001\002\000\006\002\uffe9\101\uffe9\001" +
    "\002\000\102\002\uffe2\003\034\004\023\006\027\007\uffd7" +
    "\011\011\012\021\013\055\014\040\015\004\016\016\017" +
    "\050\020\054\021\022\022\051\023\025\024\035\025\033" +
    "\026\053\027\047\030\045\031\007\032\020\040\032\041" +
    "\026\042\015\043\041\044\014\045\052\100\013\101\uffe2" +
    "\106\031\001\002\000\006\002\uffe7\101\uffe7\001\002\000" +
    "\004\074\u0167\001\002\000\022\073\076\074\102\106\103" +
    "\107\075\110\105\111\101\112\104\113\077\001\002\000" +
    "\004\075\u0169\001\002\000\004\100\uff53\001\002\000\004" +
    "\100\u016b\001\002\000\100\003\034\004\023\006\027\007" +
    "\uffd7\011\011\012\021\013\055\014\040\015\004\016\016" +
    "\017\050\020\054\021\022\022\051\023\025\024\035\025" +
    "\033\026\053\027\047\030\045\031\007\032\020\040\032" +
    "\041\026\042\015\043\041\044\014\045\052\100\013\101" +
    "\uffe2\106\031\001\002\000\004\101\u016d\001\002\000\102" +
    "\002\uffe2\003\034\004\023\006\027\007\uffd7\011\011\012" +
    "\021\013\055\014\040\015\004\016\016\017\050\020\054" +
    "\021\022\022\051\023\025\024\035\025\033\026\053\027" +
    "\047\030\045\031\007\032\020\040\032\041\026\042\015" +
    "\043\041\044\014\045\052\100\013\101\uffe2\106\031\001" +
    "\002\000\006\002\ufff5\101\ufff5\001\002\000\004\100\u0170" +
    "\001\002\000\100\003\034\004\023\006\027\007\uffd7\011" +
    "\011\012\021\013\055\014\040\015\004\016\016\017\050" +
    "\020\054\021\022\022\051\023\025\024\035\025\033\026" +
    "\053\027\047\030\045\031\007\032\020\040\032\041\026" +
    "\042\015\043\041\044\014\045\052\100\013\101\uffe2\106" +
    "\031\001\002\000\004\101\u0172\001\002\000\102\002\uffe2" +
    "\003\034\004\023\006\027\007\uffd7\011\011\012\021\013" +
    "\055\014\040\015\004\016\016\017\050\020\054\021\022" +
    "\022\051\023\025\024\035\025\033\026\053\027\047\030" +
    "\045\031\007\032\020\040\032\041\026\042\015\043\041" +
    "\044\014\045\052\100\013\101\uffe2\106\031\001\002\000" +
    "\006\002\ufff7\101\ufff7\001\002\000\034\006\305\025\275" +
    "\027\274\030\301\032\307\073\272\074\277\106\302\107" +
    "\271\110\304\111\300\112\303\113\273\001\002\000\004" +
    "\103\uff11\001\002\000\006\002\uffe3\101\uffe3\001\002\000" +
    "\004\074\u0178\001\002\000\004\114\u0179\001\002\000\004" +
    "\104\uff16\001\002\000\004\104\u017b\001\002\000\050\006" +
    "\uff59\025\uff59\027\uff59\030\uff59\032\uff59\041\026\042\015" +
    "\043\041\044\014\045\052\073\uff59\074\uff59\075\uff57\106" +
    "\uff59\107\uff59\110\uff59\111\uff59\112\uff59\113\uff59\001\002" +
    "\000\004\075\u017d\001\002\000\004\103\uff15\001\002\000" +
    "\004\103\u017f\001\002\000\102\002\uff0b\003\uff0b\004\uff0b" +
    "\006\uff0b\007\uff0b\011\uff0b\012\uff0b\013\uff0b\014\uff0b\015" +
    "\uff0b\016\uff0b\017\uff0b\020\uff0b\021\uff0b\022\uff0b\023\uff0b" +
    "\024\uff0b\025\uff0b\026\uff0b\027\uff0b\030\uff0b\031\uff0b\032" +
    "\uff0b\040\uff0b\041\uff0b\042\uff0b\043\uff0b\044\uff0b\045\uff0b" +
    "\100\uff0b\101\uff0b\106\uff0b\001\002\000\004\103\uff0a\001" +
    "\002\000\004\074\u0192\001\002\000\004\076\u018a\001\002" +
    "\000\004\105\u0188\001\002\000\004\050\u0186\001\002\000" +
    "\004\103\uff09\001\002\000\034\006\305\025\275\027\274" +
    "\030\301\032\307\073\272\074\277\106\302\107\271\110" +
    "\304\111\300\112\303\113\273\001\002\000\004\103\uff6e" +
    "\001\002\000\034\006\305\025\275\027\274\030\301\032" +
    "\307\073\272\074\277\106\302\107\271\110\304\111\300" +
    "\112\303\113\273\001\002\000\004\103\uff6c\001\002\000" +
    "\022\073\uff6a\074\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a" +
    "\112\uff6a\113\uff6a\001\002\000\022\073\076\074\102\106" +
    "\103\107\075\110\105\111\101\112\104\113\077\001\002" +
    "\000\004\077\uff69\001\002\000\004\077\u018e\001\002\000" +
    "\006\076\250\105\uff64\001\002\000\004\105\u0190\001\002" +
    "\000\034\006\305\025\275\027\274\030\301\032\307\073" +
    "\272\074\277\106\302\107\271\110\304\111\300\112\303" +
    "\113\273\001\002\000\004\103\uff68\001\002\000\050\006" +
    "\uff59\025\uff59\027\uff59\030\uff59\032\uff59\041\026\042\015" +
    "\043\041\044\014\045\052\073\uff59\074\uff59\075\uff57\106" +
    "\uff59\107\uff59\110\uff59\111\uff59\112\uff59\113\uff59\001\002" +
    "\000\004\075\u0194\001\002\000\006\100\u0197\103\u0195\001" +
    "\002\000\102\002\ufef8\003\ufef8\004\ufef8\006\ufef8\007\ufef8" +
    "\011\ufef8\012\ufef8\013\ufef8\014\ufef8\015\ufef8\016\ufef8\017" +
    "\ufef8\020\ufef8\021\ufef8\022\ufef8\023\ufef8\024\ufef8\025\ufef8" +
    "\026\ufef8\027\ufef8\030\ufef8\031\ufef8\032\ufef8\040\ufef8\041" +
    "\ufef8\042\ufef8\043\ufef8\044\ufef8\045\ufef8\100\ufef8\101\ufef8" +
    "\106\ufef8\001\002\000\102\002\ufefa\003\ufefa\004\ufefa\006" +
    "\ufefa\007\ufefa\011\ufefa\012\ufefa\013\ufefa\014\ufefa\015\ufefa" +
    "\016\ufefa\017\ufefa\020\ufefa\021\ufefa\022\ufefa\023\ufefa\024" +
    "\ufefa\025\ufefa\026\ufefa\027\ufefa\030\ufefa\031\ufefa\032\ufefa" +
    "\040\ufefa\041\ufefa\042\ufefa\043\ufefa\044\ufefa\045\ufefa\100" +
    "\ufefa\101\ufefa\106\ufefa\001\002\000\100\003\034\004\023" +
    "\006\027\007\uffd7\011\011\012\021\013\055\014\040\015" +
    "\004\016\016\017\050\020\054\021\022\022\051\023\025" +
    "\024\035\025\033\026\053\027\047\030\045\031\007\032" +
    "\020\040\032\041\026\042\015\043\041\044\014\045\052" +
    "\100\013\101\uffe2\106\031\001\002\000\004\101\u0199\001" +
    "\002\000\102\002\ufef9\003\ufef9\004\ufef9\006\ufef9\007\ufef9" +
    "\011\ufef9\012\ufef9\013\ufef9\014\ufef9\015\ufef9\016\ufef9\017" +
    "\ufef9\020\ufef9\021\ufef9\022\ufef9\023\ufef9\024\ufef9\025\ufef9" +
    "\026\ufef9\027\ufef9\030\ufef9\031\ufef9\032\ufef9\040\ufef9\041" +
    "\ufef9\042\ufef9\043\ufef9\044\ufef9\045\ufef9\100\ufef9\101\ufef9" +
    "\106\ufef9\001\002\000\004\074\uff5d\001\002\000\004\074" +
    "\u019c\001\002\000\050\006\uff59\025\uff59\027\uff59\030\uff59" +
    "\032\uff59\041\026\042\015\043\041\044\014\045\052\073" +
    "\uff59\074\uff59\075\uff57\106\uff59\107\uff59\110\uff59\111\uff59" +
    "\112\uff59\113\uff59\001\002\000\004\075\u019e\001\002\000" +
    "\004\100\uff5c\001\002\000\004\007\u01aa\001\002\000\004" +
    "\074\uff5f\001\002\000\004\106\u01a2\001\002\000\004\074" +
    "\uff63\001\002\000\004\074\u01a4\001\002\000\050\006\uff59" +
    "\025\uff59\027\uff59\030\uff59\032\uff59\041\026\042\015\043" +
    "\041\044\014\045\052\073\uff59\074\uff59\075\uff57\106\uff59" +
    "\107\uff59\110\uff59\111\uff59\112\uff59\113\uff59\001\002\000" +
    "\004\075\u01a6\001\002\000\004\100\uff62\001\002\000\004" +
    "\074\u01a8\001\002\000\004\075\u01a9\001\002\000\004\100" +
    "\uff5e\001\002\000\014\041\026\042\015\043\041\044\014" +
    "\045\052\001\002\000\004\103\uffd8\001\002\000\006\010" +
    "\u01ae\106\u01ad\001\002\000\010\103\uffd5\104\uffd5\105\uffd5" +
    "\001\002\000\004\106\u01af\001\002\000\006\076\uffd3\104" +
    "\uffd3\001\002\000\006\076\uffc8\104\u01b1\001\002\000\004" +
    "\106\u01d1\001\002\000\004\076\u01b3\001\002\000\022\073" +
    "\uffd2\074\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2" +
    "\113\uffd2\001\002\000\022\073\076\074\102\106\103\107" +
    "\075\110\105\111\101\112\104\113\077\001\002\000\004" +
    "\077\uffd1\001\002\000\004\077\u01b7\001\002\000\010\076" +
    "\u01b9\103\uffc4\105\uffc4\001\002\000\006\103\uff7b\105\u01bf" +
    "\001\002\000\022\073\uffc7\074\uffc7\106\uffc7\107\uffc7\110" +
    "\uffc7\111\uffc7\112\uffc7\113\uffc7\001\002\000\022\073\076" +
    "\074\102\106\103\107\075\110\105\111\101\112\104\113" +
    "\077\001\002\000\004\077\uffc6\001\002\000\004\077\u01bd" +
    "\001\002\000\006\103\uffc5\105\uffc5\001\002\000\004\103" +
    "\uffd0\001\002\000\006\100\uff7d\103\uff7d\001\002\000\006" +
    "\100\u01c2\103\uff78\001\002\000\004\103\uff7c\001\002\000" +
    "\030\073\uff7a\074\uff7a\100\uff7a\101\uff7a\104\uff7a\106\uff7a" +
    "\107\uff7a\110\uff7a\111\uff7a\112\uff7a\113\uff7a\001\002\000" +
    "\030\073\uff76\074\uff76\100\u01c2\101\uff78\104\uff78\106\uff76" +
    "\107\uff76\110\uff76\111\uff76\112\uff76\113\uff76\001\002\000" +
    "\006\101\uff73\104\u01ce\001\002\000\004\101\u01cd\001\002" +
    "\000\022\073\076\074\102\106\103\107\075\110\105\111" +
    "\101\112\104\113\077\001\002\000\006\101\uff70\104\u01c8" +
    "\001\002\000\022\073\uff72\074\uff72\106\uff72\107\uff72\110" +
    "\uff72\111\uff72\112\uff72\113\uff72\001\002\000\004\101\uff75" +
    "\001\002\000\022\073\076\074\102\106\103\107\075\110" +
    "\105\111\101\112\104\113\077\001\002\000\006\101\uff70" +
    "\104\u01c8\001\002\000\004\101\uff71\001\002\000\010\101" +
    "\uff79\103\uff79\104\uff79\001\002\000\006\100\u01c2\101\uff78" +
    "\001\002\000\004\101\uff77\001\002\000\004\101\uff74\001" +
    "\002\000\012\076\uffca\103\uffca\104\uffca\105\uffca\001\002" +
    "\000\012\076\uffc8\103\uffc8\104\u01b1\105\uffc8\001\002\000" +
    "\010\076\uffc9\103\uffc9\105\uffc9\001\002\000\010\103\uffc8" +
    "\104\u01b1\105\uffc8\001\002\000\006\103\uffc1\105\u01d7\001" +
    "\002\000\004\103\uffd4\001\002\000\034\006\uffc3\025\uffc3" +
    "\027\uffc3\030\uffc3\032\uffc3\073\uffc3\074\uffc3\106\uffc3\107" +
    "\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\001\002\000\034" +
    "\006\305\025\275\027\274\030\301\032\307\073\272\074" +
    "\277\106\302\107\271\110\304\111\300\112\303\113\273" +
    "\001\002\000\004\103\uffc2\001\002\000\004\103\u01db\001" +
    "\002\000\102\002\uffe2\003\034\004\023\006\027\007\uffd7" +
    "\011\011\012\021\013\055\014\040\015\004\016\016\017" +
    "\050\020\054\021\022\022\051\023\025\024\035\025\033" +
    "\026\053\027\047\030\045\031\007\032\020\040\032\041" +
    "\026\042\015\043\041\044\014\045\052\100\013\101\uffe2" +
    "\106\031\001\002\000\006\002\uffef\101\uffef\001\002\000" +
    "\004\103\uffd6\001\002\000\006\005\uffe1\100\uffe1\001\002" +
    "\000\006\005\u01e0\100\uffdd\001\002\000\004\106\u01e3\001" +
    "\002\000\004\100\u01e2\001\002\000\100\003\uffe0\004\uffe0" +
    "\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\100\uffe0\101\uffe0\106\uffe0\001\002\000\006\100\uffdf\104" +
    "\uffdf\001\002\000\006\100\uffda\104\u01e5\001\002\000\004" +
    "\106\u01e7\001\002\000\004\100\uffde\001\002\000\006\100" +
    "\uffdc\104\uffdc\001\002\000\006\100\uffda\104\u01e5\001\002" +
    "\000\004\100\uffdb\001\002\000\004\074\u01eb\001\002\000" +
    "\024\063\uff2f\073\uff2f\074\uff2f\106\uff2f\107\uff2f\110\uff2f" +
    "\111\uff2f\112\uff2f\113\uff2f\001\002\000\024\063\071\073" +
    "\uff43\074\uff43\106\uff43\107\uff43\110\uff43\111\uff43\112\uff43" +
    "\113\uff43\001\002\000\004\075\u01ee\001\002\000\004\100" +
    "\uff2e\001\002\000\004\074\u01f0\001\002\000\004\075\u01f1" +
    "\001\002\000\004\100\uff60\001\002\000\004\002\001\001" +
    "\002\000\102\002\uffe2\003\034\004\023\006\027\007\uffd7" +
    "\011\011\012\021\013\055\014\040\015\004\016\016\017" +
    "\050\020\054\021\022\022\051\023\025\024\035\025\033" +
    "\026\053\027\047\030\045\031\007\032\020\040\032\041" +
    "\026\042\015\043\041\044\014\045\052\100\013\101\uffe2" +
    "\106\031\001\002\000\006\002\uffff\101\uffff\001\002\000" +
    "\004\102\u01f6\001\002\000\004\100\u01f7\001\002\000\012" +
    "\034\ufed0\035\ufed0\036\ufed0\037\ufed0\001\002\000\012\034" +
    "\u01fb\035\u01fa\036\u01f9\037\u01fc\001\002\000\004\102\u0215" +
    "\001\002\000\004\102\u020f\001\002\000\004\102\u020b\001" +
    "\002\000\004\102\u0200\001\002\000\004\101\u01fe\001\002" +
    "\000\004\101\u01ff\001\002\000\006\002\ufecf\101\ufecf\001" +
    "\002\000\004\076\u0201\001\002\000\004\106\u0202\001\002" +
    "\000\006\077\ufec1\104\ufec3\001\002\000\004\077\u0204\001" +
    "\002\000\006\101\ufec6\104\u0205\001\002\000\012\034\u01fb" +
    "\035\u01fa\036\u01f9\037\u01fc\001\002\000\004\101\ufec8\001" +
    "\002\000\004\101\ufec7\001\002\000\004\104\u0209\001\002" +
    "\000\004\106\u0202\001\002\000\004\077\ufec2\001\002\000" +
    "\004\107\u020c\001\002\000\006\101\ufece\104\ufece\001\002" +
    "\000\006\101\ufec6\104\u0205\001\002\000\004\101\ufecd\001" +
    "\002\000\006\112\u0212\113\u0210\001\002\000\006\101\ufec4" +
    "\104\ufec4\001\002\000\006\101\ufecc\104\ufecc\001\002\000" +
    "\006\101\ufec5\104\ufec5\001\002\000\006\101\ufec6\104\u0205" +
    "\001\002\000\004\101\ufecb\001\002\000\006\112\u0212\113" +
    "\u0210\001\002\000\006\101\ufeca\104\ufeca\001\002\000\006" +
    "\101\ufec6\104\u0205\001\002\000\004\101\ufec9\001\002\000" +
    "\004\103\u021a\001\002\000\102\002\uffe2\003\034\004\023" +
    "\006\027\007\uffd7\011\011\012\021\013\055\014\040\015" +
    "\004\016\016\017\050\020\054\021\022\022\051\023\025" +
    "\024\035\025\033\026\053\027\047\030\045\031\007\032" +
    "\020\040\032\041\026\042\015\043\041\044\014\045\052" +
    "\100\013\101\uffe2\106\031\001\002\000\006\002\ufff9\101" +
    "\ufff9\001\002\000\024\063\uff52\073\uff52\074\uff52\106\uff52" +
    "\107\uff52\110\uff52\111\uff52\112\uff52\113\uff52\001\002\000" +
    "\024\063\071\073\uff43\074\uff43\106\uff43\107\uff43\110\uff43" +
    "\111\uff43\112\uff43\113\uff43\001\002\000\004\075\u021f\001" +
    "\002\000\004\100\uff51\001\002\000\004\103\u0221\001\002" +
    "\000\102\002\uffe2\003\034\004\023\006\027\007\uffd7\011" +
    "\011\012\021\013\055\014\040\015\004\016\016\017\050" +
    "\020\054\021\022\022\051\023\025\024\035\025\033\026" +
    "\053\027\047\030\045\031\007\032\020\040\032\041\026" +
    "\042\015\043\041\044\014\045\052\100\013\101\uffe2\106" +
    "\031\001\002\000\006\002\uffe5\101\uffe5\001\002\000\004" +
    "\074\u0224\001\002\000\050\006\uff59\025\uff59\027\uff59\030" +
    "\uff59\032\uff59\041\026\042\015\043\041\044\014\045\052" +
    "\073\uff59\074\uff59\075\uff57\106\uff59\107\uff59\110\uff59\111" +
    "\uff59\112\uff59\113\uff59\001\002\000\004\075\u0226\001\002" +
    "\000\004\103\uff18\001\002\000\004\103\u0228\001\002\000" +
    "\102\002\uffe2\003\034\004\023\006\027\007\uffd7\011\011" +
    "\012\021\013\055\014\040\015\004\016\016\017\050\020" +
    "\054\021\022\022\051\023\025\024\035\025\033\026\053" +
    "\027\047\030\045\031\007\032\020\040\032\041\026\042" +
    "\015\043\041\044\014\045\052\100\013\101\uffe2\106\031" +
    "\001\002\000\006\002\uffed\101\uffed\001\002\000\004\103" +
    "\u022b\001\002\000\102\002\uffe2\003\034\004\023\006\027" +
    "\007\uffd7\011\011\012\021\013\055\014\040\015\004\016" +
    "\016\017\050\020\054\021\022\022\051\023\025\024\035" +
    "\025\033\026\053\027\047\030\045\031\007\032\020\040" +
    "\032\041\026\042\015\043\041\044\014\045\052\100\013" +
    "\101\uffe2\106\031\001\002\000\006\002\uffeb\101\uffeb\001" +
    "\002\000\022\073\076\074\102\106\103\107\075\110\105" +
    "\111\101\112\104\113\077\001\002\000\004\102\u022f\001" +
    "\002\000\102\002\uff0f\003\uff0f\004\uff0f\006\uff0f\007\uff0f" +
    "\011\uff0f\012\uff0f\013\uff0f\014\uff0f\015\uff0f\016\uff0f\017" +
    "\uff0f\020\uff0f\021\uff0f\022\uff0f\023\uff0f\024\uff0f\025\uff0f" +
    "\026\uff0f\027\uff0f\030\uff0f\031\uff0f\032\uff0f\040\uff0f\041" +
    "\uff0f\042\uff0f\043\uff0f\044\uff0f\045\uff0f\100\uff0f\101\uff0f" +
    "\106\uff0f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u022d\000\042\002\016\003\057\006\056\013\027\025" +
    "\011\027\035\032\036\040\045\043\043\044\005\045\004" +
    "\046\041\052\007\063\042\065\055\114\023\001\001\000" +
    "\004\243\u022c\001\001\000\004\104\u0229\001\001\000\004" +
    "\103\u0226\001\001\000\004\236\u0222\001\001\000\004\107" +
    "\u021f\001\001\000\002\001\001\000\004\075\u0218\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\u01f2\001\001\000\002\001\001\000\004\201\u01ee" +
    "\001\001\000\002\001\001\000\004\223\u01e9\001\001\000" +
    "\002\001\001\000\004\007\u01dc\001\001\000\004\102\u01d9" +
    "\001\001\000\002\001\001\000\006\013\u01a0\113\u019e\001" +
    "\001\000\002\001\001\000\012\171\u0183\172\u0182\173\u0181" +
    "\255\u0180\001\001\000\004\245\u017d\001\001\000\004\237" +
    "\u0176\001\001\000\042\002\u0175\003\057\006\056\013\027" +
    "\025\011\027\035\032\036\040\045\043\043\044\005\045" +
    "\004\046\041\052\007\063\042\065\055\114\023\001\001" +
    "\000\004\242\u0173\001\001\000\004\076\u016e\001\001\000" +
    "\004\077\u0169\001\001\000\004\206\u0165\001\001\000\002" +
    "\001\001\000\004\106\u0163\001\001\000\004\105\u0161\001" +
    "\001\000\004\101\u0155\001\001\000\004\235\u0151\001\001" +
    "\000\004\100\u014c\001\001\000\004\234\u0148\001\001\000" +
    "\004\244\u0146\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\241\256\001\001\000\004\220\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\063\001\001" +
    "\000\004\073\060\001\001\000\042\002\061\003\057\006" +
    "\056\013\027\025\011\027\035\032\036\040\045\043\043" +
    "\044\005\045\004\046\041\052\007\063\042\065\055\114" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\065\003\057\006\056\013\027\025" +
    "\011\027\035\032\036\040\045\043\043\044\005\045\004" +
    "\046\041\052\007\063\042\065\055\114\023\001\001\000" +
    "\002\001\001\000\004\210\067\001\001\000\006\033\072" +
    "\037\071\001\001\000\002\001\001\000\004\012\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\132\210" +
    "\001\001\000\004\140\206\001\001\000\004\135\204\001" +
    "\001\000\006\034\164\036\162\001\001\000\004\131\146" +
    "\001\001\000\004\136\141\001\001\000\004\125\122\001" +
    "\001\000\004\134\120\001\001\000\004\133\105\001\001" +
    "\000\006\014\112\016\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\143" +
    "\116\001\001\000\004\012\117\001\001\000\002\001\001" +
    "\000\006\014\121\016\115\001\001\000\002\001\001\000" +
    "\006\014\140\016\115\001\001\000\004\126\124\001\001" +
    "\000\004\012\125\001\001\000\004\127\126\001\001\000" +
    "\002\001\001\000\004\024\130\001\001\000\004\130\136" +
    "\001\001\000\004\141\132\001\001\000\004\012\133\001" +
    "\001\000\004\142\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\137\016\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\142\001\001\000\002" +
    "\001\001\000\004\137\144\001\001\000\006\014\145\016" +
    "\115\001\001\000\002\001\001\000\006\014\147\016\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\214\176\001\001" +
    "\000\002\001\001\000\004\211\165\001\001\000\004\037" +
    "\166\001\001\000\004\212\167\001\001\000\004\012\170" +
    "\001\001\000\004\213\171\001\001\000\006\035\172\036" +
    "\173\001\001\000\002\001\001\000\004\217\174\001\001" +
    "\000\006\033\175\037\071\001\001\000\002\001\001\000" +
    "\004\037\177\001\001\000\004\215\200\001\001\000\004" +
    "\012\201\001\001\000\004\216\202\001\001\000\006\035" +
    "\203\036\173\001\001\000\002\001\001\000\006\014\205" +
    "\016\115\001\001\000\002\001\001\000\004\012\207\001" +
    "\001\000\002\001\001\000\006\014\211\016\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\215\061" +
    "\214\001\001\000\004\042\217\001\001\000\002\001\001" +
    "\000\010\225\234\226\233\227\232\001\001\000\002\001" +
    "\001\000\004\221\221\001\001\000\006\033\222\037\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\226\001\001\000\002\001\001\000\004\222\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\236\001\001\000\002\001\001\000\004\012\240\001" +
    "\001\000\002\001\001\000\004\230\242\001\001\000\004" +
    "\012\243\001\001\000\004\231\244\001\001\000\002\001" +
    "\001\000\004\026\246\001\001\000\002\001\001\000\004" +
    "\176\250\001\001\000\004\012\251\001\001\000\004\177" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\262\030\260\205\261\001\001\000\002\001\001" +
    "\000\006\047\275\053\305\001\001\000\002\001\001\000" +
    "\004\204\264\001\001\000\004\031\266\001\001\000\010" +
    "\013\262\030\267\205\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\151\u0143\001\001\000\004\157\u0141" +
    "\001\001\000\004\154\u013f\001\001\000\004\253\u013b\001" +
    "\001\000\004\251\u0134\001\001\000\004\031\u0133\001\001" +
    "\000\004\155\u012e\001\001\000\004\150\u012c\001\001\000" +
    "\004\254\u0128\001\001\000\006\144\333\250\335\001\001" +
    "\000\004\153\331\001\001\000\004\152\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\246\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\247\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\317\034\321\036\320\051" +
    "\322\001\001\000\004\162\327\001\001\000\004\164\325" +
    "\001\001\000\004\163\323\001\001\000\002\001\001\000" +
    "\006\047\324\053\305\001\001\000\002\001\001\000\006" +
    "\047\326\053\305\001\001\000\002\001\001\000\006\047" +
    "\330\053\305\001\001\000\002\001\001\000\012\016\317" +
    "\034\321\036\320\051\332\001\001\000\002\001\001\000" +
    "\012\016\317\034\321\036\320\051\u0127\001\001\000\004" +
    "\145\u011b\001\001\000\002\001\001\000\010\013\341\054" +
    "\340\257\337\001\001\000\004\055\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\256\343\001\001\000" +
    "\004\056\345\001\001\000\010\013\341\054\346\257\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\265\u0119\001\001\000\004\273\u0117\001\001" +
    "\000\004\270\u0115\001\001\000\004\056\u0114\001\001\000" +
    "\004\271\u010f\001\001\000\004\264\u010d\001\001\000\004" +
    "\260\376\001\001\000\004\267\374\001\001\000\004\266" +
    "\361\001\001\000\012\016\362\034\364\036\363\057\365" +
    "\001\001\000\004\276\372\001\001\000\004\300\370\001" +
    "\001\000\004\277\366\001\001\000\002\001\001\000\004" +
    "\055\367\001\001\000\002\001\001\000\004\055\371\001" +
    "\001\000\002\001\001\000\004\055\373\001\001\000\002" +
    "\001\001\000\012\016\362\034\364\036\363\057\375\001" +
    "\001\000\002\001\001\000\012\016\362\034\364\036\363" +
    "\057\u010c\001\001\000\004\261\u0100\001\001\000\004\055" +
    "\u0101\001\001\000\004\262\u0102\001\001\000\002\001\001" +
    "\000\004\060\u0104\001\001\000\004\263\u010a\001\001\000" +
    "\004\274\u0106\001\001\000\004\055\u0107\001\001\000\004" +
    "\275\u0108\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\362\034\364\036\363\057\u010b\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\362\034\364\036" +
    "\363\057\u010e\001\001\000\002\001\001\000\004\055\u0110" +
    "\001\001\000\002\001\001\000\004\272\u0112\001\001\000" +
    "\012\016\362\034\364\036\363\057\u0113\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\362\034\364\036" +
    "\363\057\u0116\001\001\000\002\001\001\000\004\055\u0118" +
    "\001\001\000\002\001\001\000\012\016\362\034\364\036" +
    "\363\057\u011a\001\001\000\002\001\001\000\006\047\u011c" +
    "\053\305\001\001\000\004\146\u011d\001\001\000\002\001" +
    "\001\000\004\050\u011f\001\001\000\004\147\u0125\001\001" +
    "\000\004\160\u0121\001\001\000\006\047\u0122\053\305\001" +
    "\001\000\004\161\u0123\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\317\034\321\036\320\051\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\341\054\u012a\257\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\317\034\321\036\320" +
    "\051\u012d\001\001\000\002\001\001\000\006\047\u012f\053" +
    "\305\001\001\000\002\001\001\000\004\156\u0131\001\001" +
    "\000\012\016\317\034\321\036\320\051\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\252\u0137\001\001\000\002\001\001\000" +
    "\010\013\341\054\u0139\257\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\341\054" +
    "\u013d\257\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\317\034\321\036\320\051\u0140\001\001\000" +
    "\002\001\001\000\006\047\u0142\053\305\001\001\000\002" +
    "\001\001\000\012\016\317\034\321\036\320\051\u0144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\262\030" +
    "\u014a\205\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\002\u014e\003\057\006\056\013" +
    "\027\025\011\027\035\032\036\040\045\043\043\044\005" +
    "\045\004\046\041\052\007\063\042\065\055\114\023\001" +
    "\001\000\002\001\001\000\042\002\u0150\003\057\006\056" +
    "\013\027\025\011\027\035\032\036\040\045\043\043\044" +
    "\005\045\004\046\041\052\007\063\042\065\055\114\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\262\030\u0153\205\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\002\u0157\003\057\006" +
    "\056\013\027\025\011\027\035\032\036\040\045\043\043" +
    "\044\005\045\004\046\041\052\007\063\042\065\055\114" +
    "\023\001\001\000\002\001\001\000\004\062\u0159\001\001" +
    "\000\042\002\u0160\003\057\006\056\013\027\025\011\027" +
    "\035\032\036\040\045\043\043\044\005\045\004\046\041" +
    "\052\007\063\042\065\055\114\023\001\001\000\004\232" +
    "\u015b\001\001\000\002\001\001\000\004\233\u015d\001\001" +
    "\000\006\033\u015e\037\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\002\u0162\003\057" +
    "\006\056\013\027\025\011\027\035\032\036\040\045\043" +
    "\043\044\005\045\004\046\041\052\007\063\042\065\055" +
    "\114\023\001\001\000\002\001\001\000\042\002\u0164\003" +
    "\057\006\056\013\027\025\011\027\035\032\036\040\045" +
    "\043\043\044\005\045\004\046\041\052\007\063\042\065" +
    "\055\114\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\002\u016b\003\057\006\056" +
    "\013\027\025\011\027\035\032\036\040\045\043\043\044" +
    "\005\045\004\046\041\052\007\063\042\065\055\114\023" +
    "\001\001\000\002\001\001\000\042\002\u016d\003\057\006" +
    "\056\013\027\025\011\027\035\032\036\040\045\043\043" +
    "\044\005\045\004\046\041\052\007\063\042\065\055\114" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\002\u0170\003\057\006\056\013\027\025\011\027\035\032" +
    "\036\040\045\043\043\044\005\045\004\046\041\052\007" +
    "\063\042\065\055\114\023\001\001\000\002\001\001\000" +
    "\042\002\u0172\003\057\006\056\013\027\025\011\027\035" +
    "\032\036\040\045\043\043\044\005\045\004\046\041\052" +
    "\007\063\042\065\055\114\023\001\001\000\002\001\001" +
    "\000\006\047\u0174\053\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\240\u0179\001\001\000\002\001\001\000\010\013\262\030" +
    "\u017b\205\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\u0186\053\305\001" +
    "\001\000\002\001\001\000\006\047\u0188\053\305\001\001" +
    "\000\002\001\001\000\004\174\u018a\001\001\000\004\012" +
    "\u018b\001\001\000\004\175\u018c\001\001\000\002\001\001" +
    "\000\004\026\u018e\001\001\000\002\001\001\000\006\047" +
    "\u0190\053\305\001\001\000\002\001\001\000\010\013\262" +
    "\030\u0192\205\261\001\001\000\002\001\001\000\004\064" +
    "\u0195\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\002\u0197\003\057\006\056\013\027\025\011\027\035\032" +
    "\036\040\045\043\043\044\005\045\004\046\041\052\007" +
    "\063\042\065\055\114\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\203\u019a\001\001\000\002\001\001" +
    "\000\010\013\262\030\u019c\205\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u01aa\001\001\000\004" +
    "\202\u01a6\001\001\000\002\001\001\000\004\200\u01a2\001" +
    "\001\000\002\001\001\000\010\013\262\030\u01a4\205\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u01ab" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\115" +
    "\u01d3\001\001\000\002\001\001\000\004\116\u01af\001\001" +
    "\000\004\010\u01b1\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\117\u01b3\001\001\000\004\012\u01b4\001\001" +
    "\000\004\120\u01b5\001\001\000\002\001\001\000\004\023" +
    "\u01b7\001\001\000\004\011\u01bd\001\001\000\004\122\u01b9" +
    "\001\001\000\004\012\u01ba\001\001\000\004\123\u01bb\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\165\u01bf\001\001\000\004\017\u01c0\001\001\000" +
    "\002\001\001\000\004\166\u01c2\001\001\000\010\017\u01c3" +
    "\020\u01c4\167\u01c5\001\001\000\004\021\u01ce\001\001\000" +
    "\002\001\001\000\004\012\u01c6\001\001\000\004\022\u01c8" +
    "\001\001\000\004\170\u01c9\001\001\000\002\001\001\000" +
    "\004\012\u01ca\001\001\000\004\022\u01cb\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u01cf\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u01d1\001\001" +
    "\000\004\010\u01d2\001\001\000\002\001\001\000\004\010" +
    "\u01d4\001\001\000\004\015\u01d5\001\001\000\002\001\001" +
    "\000\004\124\u01d7\001\001\000\006\047\u01d8\053\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\002\u01db" +
    "\003\057\006\056\013\027\025\011\027\035\032\036\040" +
    "\045\043\043\044\005\045\004\046\041\052\007\063\042" +
    "\065\055\114\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\110\u01de\001\001\000\004\004\u01e0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\u01e3\001\001\000\004\005\u01e5\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\112\u01e7\001\001\000" +
    "\004\005\u01e8\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\224\u01eb\001\001\000\006\033\u01ec\037\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\002\u01f3\003\057\006\056\013\027\025\011\027\035" +
    "\032\036\040\045\043\043\044\005\045\004\046\041\052" +
    "\007\063\042\065\055\114\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\301\u01f7\001" +
    "\001\000\004\066\u01fc\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\u0202\001\001\000\004\305\u0207\001\001\000" +
    "\002\001\001\000\004\067\u0205\001\001\000\004\066\u0206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\u0209\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\302\u020c\001\001\000\004\067\u020d\001" +
    "\001\000\002\001\001\000\004\070\u0210\001\001\000\002" +
    "\001\001\000\004\303\u0212\001\001\000\002\001\001\000" +
    "\004\067\u0213\001\001\000\002\001\001\000\004\070\u0215" +
    "\001\001\000\004\304\u0216\001\001\000\004\067\u0217\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\002\u021a" +
    "\003\057\006\056\013\027\025\011\027\035\032\036\040" +
    "\045\043\043\044\005\045\004\046\041\052\007\063\042" +
    "\065\055\114\023\001\001\000\002\001\001\000\004\207" +
    "\u021c\001\001\000\006\033\u021d\037\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\002" +
    "\u0221\003\057\006\056\013\027\025\011\027\035\032\036" +
    "\040\045\043\043\044\005\045\004\046\041\052\007\063" +
    "\042\065\055\114\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\262\030\u0224\205\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\002\u0228\003\057\006\056\013\027\025\011\027\035\032" +
    "\036\040\045\043\043\044\005\045\004\046\041\052\007" +
    "\063\042\065\055\114\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\002\u022b\003\057\006\056\013\027" +
    "\025\011\027\035\032\036\040\045\043\043\044\005\045" +
    "\004\046\041\052\007\063\042\065\055\114\023\001\001" +
    "\000\002\001\001\000\004\012\u022d\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompiladorParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompiladorParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompiladorParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorSintaxis> erroresCom; 
    private List<Pista> pistas;
    private int cantidadIdentaciones;  
    Declaracion declaracionAct; 
    List<Expresion> valoresExpresion; 
    List<Expresion> valoresExpresion2;   
    boolean esDimension;
    Stack<Dimension> dimesiones;
    Stack<Expresion> expresionesArreglos;
    List<DeclDim> declaracionesDimension; 
    DeclDim declDimPadre;   
    boolean primerExpresion;
    boolean primerDeclDim;
    private Asignacion asignacionAct;
    private List<Instruccion> instruccionesFunciones;
    private Funcion funcionAct;
    private boolean dentroDeFuncion;
    private CondSi condisionSiAct;
    private Condicion condicionAct;
    private String insCond;
    private Para paraAct;
    private Mientras mientrasAct;
    private Stack<Mientras> desdesMientras;
    private SwitchC switchAct;
    private Lista listaAct;

	public CompiladorParser(CompiladorLexer lex) {
		super(lex);
        cantidadIdentaciones = 0;
        this.erroresCom = lex.getErroresCom();
        this.pistas = new ArrayList<>();
        this.esDimension = false;
        this.dimesiones = new Stack<>();
        this.desdesMientras = new Stack<>();
        this.expresionesArreglos = new Stack<>();   
        this.instruccionesFunciones = new ArrayList<>();
        this.dentroDeFuncion = false;
        this.listaAct = null;
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorSintaxis("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorSintaxis("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }         
    /*---------Getters & Setters---------*/

    public List<ErrorSintaxis> getErroresCom(){
        return this.erroresCom;
    }

    public List<Pista> getPistas(){
        return this.pistas;
    }
    
    /*---------Codigo Incrustado---------*/
    private void MasIdent(String val){
        int valor = Integer.parseInt(val);
        this.cantidadIdentaciones += valor;
    }

    private void cerrarIdent(){
        this.cantidadIdentaciones = 0;
    }

    private void crearPista(String nombre){
        Pista pistaTmp = new Pista();
        pistaTmp.setNombre(nombre);
        this.pistas.add(pistaTmp);
    }

    private void agregarExtencion(String nombreExt){
        this.pistas.get(this.pistas.size()-1).setExtension(nombreExt);
    }

    private void crearDeclaracion(boolean esKeep){
        this.declaracionAct = new Declaracion("declaracion",this.cantidadIdentaciones);
        this.declaracionAct.setEsKeep(esKeep);
        insertarInstruccion(this.declaracionAct);
    }

    private void insertarValsDeclaracion(String tipo,String var1,boolean esArreglo){
        this.declaracionAct.setTipoDecl(tipo);
        this.declaracionAct.insertarVariable(var1);
        this.declaracionAct.setEsArreglo(esArreglo);
    }

    private void insertarVarDecl(String variable){
        this.declaracionAct.insertarVariable(variable);
    }

    private void insExpr(String val,String tipo){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
    }

    private void insExpr2(String val,String tipo){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion2.add(expresion);
        }
    }

    private void crearListaExpr(){
        this.valoresExpresion = new ArrayList<>();
    }

    private void crearDimension(){
        Dimension dimension = new Dimension();   
        dimesiones.push(dimension);
        this.esDimension = true;
    }

    private void insertarListaExprDecl(){        
        this.declaracionAct.setValoresDecl(this.valoresExpresion);
    }

    private void insertarDimensionDecl(){
        this.declaracionAct.insertarDimension(this.dimesiones.peek());
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void insertarDimensionExpr(){
        this.expresionesArreglos.peek().insertarExpresion(this.dimesiones.peek());        
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void cerrarExpresionArreglo(){
        this.expresionesArreglos.pop();
    }

    private void cerrarDimension(){
        if(this.dimesiones.isEmpty()){
            this.esDimension = false;
        }else{
            this.esDimension = true;
        }
    }

    private void crearExpresionArreglo(String tipo,String val){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
        this.expresionesArreglos.push(expresion);
    }    

    private void crearExpresionArreglo2(String tipo,String val){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion2.add(expresion);
        }
        this.expresionesArreglos.push(expresion);
    }

    private void crearPrimDeclDim(){
        this.declDimPadre = new DeclDim();
        this.primerDeclDim = true;
        this.declaracionAct.setDeclaracionDimension(this.declDimPadre);
    }

    private void crearDeclDim(){
        if(this.primerDeclDim == true){
            this.primerDeclDim = false;
        }else{
            DeclDim declDim = new DeclDim();
            declDim.setDeclDimPadre(this.declDimPadre);
            this.declDimPadre.insertarHijoDeclDim(declDim);
            this.declDimPadre = declDim;    
        }            
    }

    private void cerrarDeclDim(){
        this.declDimPadre = this.declDimPadre.getDeclDimPadre();
    }

    private void crearDim(){
        Dimension dimension = new Dimension();
        this.valoresExpresion = new ArrayList<>();
        dimension.setExpresiones(valoresExpresion);
        this.declDimPadre.insertarDimension(dimension);
    }

    private void crearAsignacion(String variable, boolean esArreglo,boolean esPara,boolean esIncremento){
        this.asignacionAct = new Asignacion("asignacion",this.cantidadIdentaciones);        
        this.asignacionAct.setVariable(variable);
        this.valoresExpresion = new ArrayList<>();
        this.asignacionAct.setValoresDecl(this.valoresExpresion);
        this.asignacionAct.setEsArreglo(esArreglo);
        this.asignacionAct.setEsIncremento(esIncremento);
        if(esPara){
            this.paraAct.setAsignacion(this.asignacionAct);            
        }else{
            insertarInstruccion(this.asignacionAct);
        }        
    }

    private void insertarDimensionAsign(){
        this.asignacionAct.insertarDimension(this.dimesiones.peek());
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void crearFuncion(String nombre,boolean esKeep,String tipo){
        this.funcionAct = new Funcion("funcion",this.cantidadIdentaciones);
        this.funcionAct.setNombre(nombre);
        this.funcionAct.setTipo(tipo);
        this.funcionAct.setEsKeep(esKeep);
        insertarInstruccion(this.funcionAct);
    }

    private void insertarParametro(String tipo, String nombre){
        Parametro parametro = new Parametro();
        this.valoresExpresion = new ArrayList<>();
        parametro.setNombre(nombre);
        parametro.setTipo(tipo);
        parametro.setExpresiones(this.valoresExpresion);
        this.funcionAct.insertarParametro(parametro);
    }

    private void insertarParametro2(String tipo, String nombre){
        Parametro parametro = new Parametro();
        this.valoresExpresion2 = new ArrayList<>();
        parametro.setNombre(nombre);
        parametro.setTipo(tipo);
        parametro.setExpresiones(this.valoresExpresion2);
        this.funcionAct.insertarParametro(parametro);
    }

    private void crearSi(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("si",this.cantidadIdentaciones);   
        insertarInstruccion(this.condisionSiAct);
    }

    private void crearSinoSi(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("sinosi",this.cantidadIdentaciones);      
        insertarCondSINO(true);                
    }
    
    private void crearSino(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("sino",this.cantidadIdentaciones);              
        insertarCondSINO(false);            
    }
    
    private void insertarCondSINO(boolean esSinoSi){
        int tamano = this.instruccionesFunciones.size()-1;
        for (int i = tamano; i >= 0; i--) {
            Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
            if (instruccionFun.getTipoInstruccion().equals("si")) {
                if (instruccionFun.getIdentacion() == 0) {
                    CondSi condisionSi = (CondSi) instruccionFun;
                    if (esSinoSi) {
                        condisionSi.insertarCondicionSinoSi(this.condisionSiAct);
                    }else{
                        condisionSi.setCondsino(this.condisionSiAct);
                    }                    
                    insertarInstruccionEnFunciones(this.condisionSiAct);
                    break;
                }else{
                    this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
                }             
            }else{
                this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
            }
        }
    }

    private void crearCondicion(){
        this.condicionAct = new Condicion();
        this.valoresExpresion = new ArrayList<>();
        this.condicionAct.setExpresion1(this.valoresExpresion);
        switch(insCond)
        {
            case "condSi":
                this.condisionSiAct.insertarCondicion(this.condicionAct);
                break;
            case "para":
                this.paraAct.insertarCondicion(this.condicionAct);
                break;
            case "mientras":
                this.mientrasAct.insertarCondicion(this.condicionAct);
                break;
            default:
                
        }                
    }

    private void crearExpr2Cond(){
        this.valoresExpresion = new ArrayList<>();
        this.condicionAct.setExpresion2(this.valoresExpresion);
    }

    private void insOpNulCondicion(String op1,String op2){
        if(op1.equals("true")){
            this.condicionAct.setNuloExpr1(true);
        }else{
            this.condicionAct.setNuloExpr1(false);
        }
        if(op2.equals("true")){
            this.condicionAct.setNuloExpr2(true);
        }else{
            this.condicionAct.setNuloExpr2(false);
        }
    }

    private void insOpCondicion(String operador){
        switch(insCond)
        {
            case "condSi":
                this.condisionSiAct.insertarOperador(operador);
                break;
            case "para":
                this.paraAct.insertarOperador(operador);
                break;
            case "mientras":
                this.mientrasAct.insertarOperador(operador);
                break;
            default:
                
        }
    }

    private void crearPara(){
        this.insCond = "para";
        this.paraAct = new Para("para",this.cantidadIdentaciones);
        insertarInstruccion(this.paraAct);
    }
    
    private void insUltValsPara(String variable,String operador){
        this.paraAct.setVariable(variable);
        this.paraAct.setOperadorVar(operador);
    }

    private void insertarMientras(){
        this.insCond = "mientras";
        if(desdesMientras.empty()){
            this.mientrasAct = new Mientras("mientras",this.cantidadIdentaciones);
            insertarInstruccion(this.mientrasAct);
        }else{
            this.mientrasAct = desdesMientras.peek();
            desdesMientras.pop();
        }
    }

    private void insertarHacer(){             
        Mientras mientras = new Mientras("hacer",this.cantidadIdentaciones);
        desdesMientras.push(mientras);
        insertarInstruccion(mientras);
    }

    private void crearSwitch(){
        this.switchAct = new SwitchC("switch",this.cantidadIdentaciones);        
        this.valoresExpresion = new ArrayList<>();
        this.switchAct.setVariable(this.valoresExpresion);
        insertarInstruccion(this.switchAct);
    }

    private void crearCaso(String tipo){
        CasoC caso = new CasoC("caso",this.cantidadIdentaciones);
        this.valoresExpresion = new ArrayList<>();
        caso.setTipo(tipo);        
        caso.setExpresion(this.valoresExpresion);
        int tamano = this.instruccionesFunciones.size()-1;
        for (int i = tamano; i >= 0; i--) {
            Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
            int identacion = caso.getIdentacion() - 1;
            if (instruccionFun.getIdentacion() == identacion) {
                if(instruccionFun.getTipoInstruccion().equals("switch")){
                    SwitchC instruccionSwitch = (SwitchC) instruccionFun;
                    instruccionSwitch.insertarCaso(caso);                    
                    break;
                }
            }else{
                this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
            }
        }
        insertarInstruccionEnFunciones(caso);
    }

    private void crearIncDecr(String var, String tipo){
        IncrDecr incrementoDecr = new IncrDecr("incrDecr",this.cantidadIdentaciones);
        incrementoDecr.setTipo(tipo);
        incrementoDecr.setVariable(var);
        insertarInstruccion(incrementoDecr);
    }

    private void crearFuncExpresion(String nombre){
        this.funcionAct = new Funcion("funcion",this.cantidadIdentaciones);
        this.funcionAct.setNombre(nombre);
        this.funcionAct.setTipo("");
        this.funcionAct.setEsKeep(false);    
        Expresion expresion = new Expresion();
        expresion.setTipo("funcion");       
        expresion.setFuncion(this.funcionAct); 
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
    }
    
    
    private void insertarInstruccion(Instruccion instruccion){
        if(this.instruccionesFunciones.isEmpty()){
            this.pistas.get(this.pistas.size()-1).insertarInstruccion(instruccion);
            insertarInstruccionEnFunciones(instruccion);
            if (instruccion.getTipoInstruccion().equals("funcion")) {
                this.dentroDeFuncion = true;
            }else{
                this.dentroDeFuncion = false;
            }
        }else{
            int tamano = this.instruccionesFunciones.size()-1;
            for (int i = tamano; i >= 0; i--) {
                Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
                int identacion = instruccion.getIdentacion() - 1;
                if (instruccionFun.getIdentacion() == 0) {
                    //InsertarInstruccion en funcion
                    String tipoInstruccion = instruccionFun.getTipoInstruccion();
                    if (tipoInstruccion.equals("funcion")) {
                        Funcion funcion = (Funcion) instruccionFun;
                        funcion.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("si")||tipoInstruccion.equals("sino")||tipoInstruccion.equals("sinosi")){
                        CondSi condicionSi = (CondSi) instruccionFun;
                        condicionSi.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("para")){
                        Para paraIns = (Para) instruccionFun;
                        paraIns.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("mientras")){
                        Mientras mientrasIns = (Mientras) instruccionFun;
                        mientrasIns.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("hacer")){
                        Mientras mientrasIns = (Mientras) instruccionFun;
                        mientrasIns.insertarInstruccion(instruccion);
                    }
                    insertarInstruccionEnFunciones(instruccion);
                    break;
                }else{                    
                    if(instruccionFun.getTipoInstruccion().equals("funcion")){
                        this.dentroDeFuncion = false;
                    }
                    insertarInstruccionEnFunciones(instruccion);
                    //this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
                    /*if(i==0){
                        this.pistas.get(this.pistas.size()-1).insertarInstruccion(instruccion);
                        insertarInstruccionEnFunciones(instruccion);
                    }*/
                }
            }
        }
    }
    
    private void insertarInstruccionEnFunciones(Instruccion instruccion){
        String tipo = instruccion.getTipoInstruccion();
        String[] funciones = new String[]{"si","sino","sinosi","funcion","para","mientras","hacer","continuar","switch","caso","principal"};
        List<String> list = Arrays.asList(funciones);
        if (list.contains(tipo)) {
            if (tipo.equals("funcion")) {
                if (this.dentroDeFuncion == false) {
                    this.instruccionesFunciones.add(instruccion);
                }
            }else{
                this.instruccionesFunciones.add(instruccion);
            }            
        }
    }
    
    public Lista getLista(){
        return this.listaAct;
    }

    private void creacionLista(){
        this.listaAct = new Lista();
    }

    private void insertarDatoLista(String tipo,String val){
        boolean valIns = false;
        if(val.equals("true")){
            valIns = true;
        }
        switch(tipo){
            case "NOMBRE":
                this.listaAct.setNombre(val.replace("\"", ""));
                break;
            case "RAMDOM":
                this.listaAct.setRandom(valIns);
                break;
            case "CIRCULAR":
                this.listaAct.setCircular(valIns);
                break;
        }
    }    

    private void insertarPistaLista(String valPista){
        this.listaAct.insertarPista(valPista.replace("\"", ""));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CompiladorParser$actions {
  private final CompiladorParser parser;

  /** Constructor */
  CUP$CompiladorParser$actions(CompiladorParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CompiladorParser$do_action_part00000000(
    int                        CUP$CompiladorParser$act_num,
    java_cup.runtime.lr_parser CUP$CompiladorParser$parser,
    java.util.Stack            CUP$CompiladorParser$stack,
    int                        CUP$CompiladorParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompiladorParser$result;

      /* select the action based on the action number */
      switch (CUP$CompiladorParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		RESULT = start_val;
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompiladorParser$parser.done_parsing();
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= COMENT NT$0 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= siguiente NT$1 inicio LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= decl NT$2 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= asg NT$3 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= funcion NT$4 LLAVEIZ inicio LLAVEDER inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= condicional NT$5 LLAVEIZ inicio LLAVEDER inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$6",62, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= ciclo1 NT$6 LLAVEIZ inicio LLAVEDER inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$7",63, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= ciclo2 NT$7 LLAVEIZ inicio LLAVEDER ciclo3 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              Object RESULT =null;
crearFuncion("continuar",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$8",64, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= CONTINUAR NT$8 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$9",65, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= funciones2 NT$9 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$10 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$10",66, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio ::= funciones3 NT$10 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$11 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$11",67, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio ::= funcion5 NT$11 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$12 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$12",68, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicio ::= cambiar NT$12 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$13 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$13",69, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inicio ::= incrDecr NT$13 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicio ::= listas 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicio ::= error inicio 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicio ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$14 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearPista(nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$14",70, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // siguiente ::= PISTA ID NT$14 ext LLAVEIZ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("siguiente",1, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$15 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
agregarExtencion(nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$15",71, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ext ::= EXTIENDE ID NT$15 extp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ext",2, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ext ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ext",2, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$16 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
agregarExtencion(nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$16",72, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // extp ::= COMA ID NT$16 extp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("extp",3, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // extp ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("extp",3, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$17 ::= 
            {
              Object RESULT =null;
crearDeclaracion(true);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$17",73, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // decl ::= KEEP NT$17 declp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$18 ::= 
            {
              Object RESULT =null;
crearDeclaracion(false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$18",74, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decl ::= NT$18 declp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$19 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarValsDeclaracion(String.valueOf(tip),id1,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$19",75, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declp ::= VAR tipoD ID NT$19 declp2 asgF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("declp",5, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$20 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarValsDeclaracion(String.valueOf(tip),id1,true);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$20",76, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$21",77, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;
insertarDimensionDecl();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$22",78, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declp ::= VAR tipoD ARREGLO ID NT$20 declp2 BRACKI NT$21 expr1 NT$22 BRACKD arr arrFin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-11)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-11)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-11)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("declp",5, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-12)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoD ::= ENTEROSTR 
            {
              Object RESULT =null;
		RESULT="entero";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoD ::= DOBLESTR 
            {
              Object RESULT =null;
		RESULT="doble";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoD ::= BOOLEANSTR 
            {
              Object RESULT =null;
		RESULT="boolean";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoD ::= CARACTERSTR 
            {
              Object RESULT =null;
		RESULT="caracter";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoD ::= CADENASTR 
            {
              Object RESULT =null;
		RESULT="cadena";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$23 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarVarDecl(id1);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$23",79, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declp2 ::= COMA ID NT$23 declp2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("declp2",6, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declp2 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("declp2",6, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$24 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$24",80, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionDecl();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$25",81, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arr ::= BRACKI NT$24 expr1 NT$25 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr",17, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arr ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr",17, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$26 ::= 
            {
              Object RESULT =null;
crearListaExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$26",82, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asgF ::= IGUAL NT$26 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		insertarListaExprDecl();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asgF",11, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asgF ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asgF",11, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$27 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"identificador");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$27",83, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr1 ::= ID NT$27 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$28 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearExpresionArreglo("arreglo",val);crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$28",84, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$29",85, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
cerrarExpresionArreglo();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$30",86, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr1 ::= ID BRACKI NT$28 expr1 NT$29 BRACKD arr2 NT$30 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$31 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"numero");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$31",87, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr1 ::= NUMERO NT$31 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$32 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"cadena");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$32",88, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr1 ::= CADENA NT$32 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$33 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"caracter");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$33",89, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr1 ::= CARACTER NT$33 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$34 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$34",90, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr1 ::= VERDADERO NT$34 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$35 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$35",91, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr1 ::= FALSO NT$35 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$36 ::= 
            {
              Object RESULT =null;
insExpr("(","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$36",92, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insExpr(")","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$37",93, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr1 ::= PARI NT$36 expr1 PARD NT$37 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$38 ::= 
            {
              Object RESULT =null;
insExpr("!","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$38",94, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr1 ::= OPNOT NT$38 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$39 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$39",95, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$40 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$40",96, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arr2 ::= BRACKI NT$39 expr1 NT$40 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr2",18, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arr2 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr2",18, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$41 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$41",97, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // fin1 ::= op NT$41 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1",10, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // fin1 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1",10, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$42 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"identificador");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$42",98, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr2 ::= ID NT$42 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$43 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearExpresionArreglo("arreglo",val);crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$43",99, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$44 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$44",100, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$45 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
cerrarExpresionArreglo();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$45",101, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr2 ::= ID BRACKI NT$43 expr2 NT$44 BRACKD arr2p NT$45 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$46 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"numero");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$46",102, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr2 ::= NUMERO NT$46 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$47 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"cadena");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$47",103, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr2 ::= CADENA NT$47 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$48 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"caracter");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$48",104, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr2 ::= CARACTER NT$48 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$49 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$49",105, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr2 ::= VERDADERO NT$49 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$50 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$50",106, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr2 ::= FALSO NT$50 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$51 ::= 
            {
              Object RESULT =null;
insExpr("(","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$51",107, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$52 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insExpr(")","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$52",108, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr2 ::= PARI NT$51 expr2 PARD NT$52 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$53 ::= 
            {
              Object RESULT =null;
insExpr("!","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$53",109, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr2 ::= OPNOT NT$53 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr2 ::= funciones4 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$54 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$54",110, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$55 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$55",111, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arr2p ::= BRACKI NT$54 expr2 NT$55 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr2p",38, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arr2p ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr2p",38, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$56 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$56",112, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // fin1p ::= op NT$56 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$57 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$57",113, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // fin1p ::= op3 NT$57 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$58 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$58",114, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // fin1p ::= op4 NT$58 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // fin1p ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // op ::= SUMA 
            {
              Object RESULT =null;
		RESULT = "+";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // op ::= RESTA 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // op ::= MULT 
            {
              Object RESULT =null;
		RESULT = "*";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // op ::= DIVI 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // op ::= OPELV 
            {
              Object RESULT =null;
		RESULT = "^";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // op ::= OPMOD 
            {
              Object RESULT =null;
		RESULT = "%";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$59 ::= 
            {
              Object RESULT =null;
crearPrimDeclDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$59",115, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arrFin ::= IGUAL NT$59 arrFinP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFin",7, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // arrFin ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFin",7, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$60 ::= 
            {
              Object RESULT =null;
crearDeclDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$60",116, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arrFinP ::= LLAVEIZ NT$60 arrFinP2 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		cerrarDeclDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFinP",13, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arrFinP ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFinP",13, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arrFinP2 ::= arrFinP fin2 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFinP2",14, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$61 ::= 
            {
              Object RESULT =null;
crearDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$61",117, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arrFinP2 ::= NT$61 expr1 fin3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFinP2",14, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // fin2 ::= COMA arrFinP 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin2",15, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // fin2 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin2",15, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$62 ::= 
            {
              Object RESULT =null;
crearDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$62",118, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // fin3 ::= COMA NT$62 expr1 fin3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin3",16, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fin3 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin3",16, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$63 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,false,false,true);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$63",119, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // asg ::= ID NT$63 OPSUMSIM expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$64 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,false,false,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$64",120, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // asg ::= ID NT$64 IGUAL expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$65 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,true,false,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$65",121, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$66 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$66",122, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$67 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
insertarDimensionAsign();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$67",123, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // asg ::= ID NT$65 BRACKI NT$66 expr1 NT$67 BRACKD arr3 IGUAL expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$68 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$68",124, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$69 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionAsign();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$69",125, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // arr3 ::= BRACKI NT$68 expr1 NT$69 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr3",20, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // arr3 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr3",20, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$70 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearFuncion(nom,true,String.valueOf(tp));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$70",126, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // funcion ::= KEEP tipoD ID NT$70 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$71 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$71",127, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // funcion ::= PRINCIPAL NT$71 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$72 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",true,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$72",128, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // funcion ::= KEEP PRINCIPAL NT$72 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$73 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearFuncion(nom,false,String.valueOf(tp));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$73",129, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // funcion ::= tipoD ID NT$73 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$74 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarParametro(String.valueOf(tp),nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$74",130, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // par ::= tipoD ID NT$74 fin4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$75 ::= 
            {
              Object RESULT =null;
insertarParametro("","");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$75",131, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // par ::= NT$75 expr2 fin4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // par ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // fin4 ::= COMA par 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin4",23, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // fin4 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin4",23, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$76 ::= 
            {
              Object RESULT =null;
crearSwitch();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$76",132, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // condicional ::= SWITCH NT$76 PARI expr1 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$77 ::= 
            {
              Object RESULT =null;
crearSi();crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$77",133, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condicional ::= SI PARI NT$77 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$78 ::= 
            {
              Object RESULT =null;
crearSinoSi();crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$78",134, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // condicional ::= SINOSI PARI NT$78 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // condicional ::= SINO 
            {
              Object RESULT =null;
		crearSino();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$79 ::= 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insOpCondicion(String.valueOf(opI));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$79",135, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$80 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearExpr2Cond();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$80",136, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$81 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insOpNulCondicion(String.valueOf(op1),String.valueOf(op2));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$81",137, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // condicion ::= opNul expr1 op3 NT$79 opNul NT$80 expr1 NT$81 opLog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // condicion ::= opNul expr1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		insOpNulCondicion(String.valueOf(op1),"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$82 ::= 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insOpCondicion(String.valueOf(opI));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$82",138, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$83 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearExpr2Cond();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$83",139, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$84 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insOpNulCondicion(String.valueOf(op1),String.valueOf(op2));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$84",140, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // condicion ::= opNul expr1 op4 NT$82 opNul NT$83 expr1 NT$84 opLog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$84
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // opNul ::= OPNULO 
            {
              Object RESULT =null;
		RESULT = "true";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("opNul",29, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // opNul ::= 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("opNul",29, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // op3 ::= DOBIGUAL 
            {
              Object RESULT =null;
		RESULT = "==";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // op3 ::= DIFERENC 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // op3 ::= MAY 
            {
              Object RESULT =null;
		RESULT = ">";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // op3 ::= MEN 
            {
              Object RESULT =null;
		RESULT = "<";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // op3 ::= MAYIG 
            {
              Object RESULT =null;
		RESULT = ">=";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // op3 ::= MENIG 
            {
              Object RESULT =null;
		RESULT = "<=";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$85 ::= 
            {
              Object RESULT =null;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insOpCondicion(String.valueOf(opI));crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$85",141, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // opLog ::= op4 NT$85 condicion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$85
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("opLog",27, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // opLog ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("opLog",27, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // op4 ::= AND 
            {
              Object RESULT =null;
		RESULT = "&&";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // op4 ::= NAND 
            {
              Object RESULT =null;
		RESULT = "!&&";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // op4 ::= OR 
            {
              Object RESULT =null;
		RESULT = "||";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // op4 ::= XOR 
            {
              Object RESULT =null;
		RESULT = "&|";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // op4 ::= NOR 
            {
              Object RESULT =null;
		RESULT = "!||";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$86 ::= 
            {
              Object RESULT =null;
crearPara();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$86",142, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$87 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$87",143, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$88 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int idVleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int idVright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String idV = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int opPleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int opPright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object opP = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insUltValsPara(idV,String.valueOf(opP));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$88",144, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ciclo1 ::= PARA NT$86 PARI tipoPara asg2 PUNTCOMA NT$87 condicion PUNTCOMA ID op2 NT$88 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$88
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int idVleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int idVright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String idV = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int opPleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int opPright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object opP = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ciclo1",30, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-12)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$89 ::= 
            {
              Object RESULT =null;
insertarMientras();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$89",145, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$90 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$90",146, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // ciclo1 ::= MIENTRAS NT$89 PARI NT$90 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$90
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ciclo1",30, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // op2 ::= OPINCR 
            {
              Object RESULT =null;
		RESULT = "++";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op2",31, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // op2 ::= OPDECR 
            {
              Object RESULT =null;
		RESULT = "--";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op2",31, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$91 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,false,true,true);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$91",147, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // asg2 ::= ID NT$91 OPSUMSIM expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$91
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$92 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,false,true,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$92",148, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // asg2 ::= ID NT$92 IGUAL expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$92
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$93 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,true,true,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$93",149, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // NT$94 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$94",150, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$95 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
insertarDimensionAsign();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$95",151, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // asg2 ::= ID NT$93 BRACKI NT$94 expr1 NT$95 BRACKD arr3 IGUAL expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$95
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // tipoPara ::= tipoD 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoPara",47, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // tipoPara ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoPara",47, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ciclo2 ::= HACER 
            {
              Object RESULT =null;
		insertarHacer();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ciclo2",33, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NT$96 ::= 
            {
              Object RESULT =null;
insertarMientras();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$96",152, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$97 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$97",153, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ciclo3 ::= MIENTRAS NT$96 PARI NT$97 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$97
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ciclo3",48, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$98 ::= 
            {
              Object RESULT =null;
crearFuncion("sumarizar",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$98",154, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // funciones2 ::= SUMARIZAR NT$98 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$98
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$99 ::= 
            {
              Object RESULT =null;
crearFuncion("longitud",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$99",155, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // funciones2 ::= LONGITUD NT$99 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$99
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$100 ::= 
            {
              Object RESULT =null;
crearFuncion("mensaje",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$100",156, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // funciones2 ::= MENSAJE NT$100 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$100
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$101 ::= 
            {
              Object RESULT =null;
crearFuncion("reproducir",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$101",157, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NT$102 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarParametro("","");insExpr(nota,"nota");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$102",158, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // funciones3 ::= REPRODUCIR NT$101 PARI NOTA NT$102 COMA par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$102
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NT$103 ::= 
            {
              Object RESULT =null;
crearFuncion("esperar",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$103",159, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // funciones3 ::= ESPERAR NT$103 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$103
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$104 ::= 
            {
              Object RESULT =null;
crearFuncion("retorna",false,"");insertarParametro("","");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$104",160, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // funciones3 ::= RETORNA NT$104 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$104
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // NT$105 ::= 
            {
              Object RESULT =null;
crearCaso("normal");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$105",161, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // cambiar ::= CASO NT$105 expr1 DOSPUNT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$105
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // NT$106 ::= 
            {
              Object RESULT =null;
crearCaso("default");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$106",162, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // cambiar ::= DEFAULT NT$106 DOSPUNT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$106
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$107 ::= 
            {
              Object RESULT =null;
crearFuncion("salir",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$107",163, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // cambiar ::= SALIR NT$107 PUNTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$107
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // incrDecr ::= ID OPINCR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		crearIncDecr(val,"++");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("incrDecr",40, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // incrDecr ::= ID OPDECR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		crearIncDecr(val,"--");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("incrDecr",40, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // NT$108 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$108",164, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // funciones4 ::= PRINCIPAL NT$108 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$108
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NT$109 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",true,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$109",165, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // funciones4 ::= KEEP PRINCIPAL NT$109 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$109
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // NT$110 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearFuncExpresion(String.valueOf(nom));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$110",166, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // funciones4 ::= ID NT$110 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$110
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // NT$111 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("reproducir");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$111",167, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // NT$112 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarParametro2("","");insExpr2(nota,"nota");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$112",168, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // funciones4 ::= REPRODUCIR NT$111 PARI NOTA NT$112 COMA par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$112
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // NT$113 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("sumarizar");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$113",169, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // funciones4 ::= SUMARIZAR NT$113 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$113
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // NT$114 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("longitud");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$114",170, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // funciones4 ::= LONGITUD NT$114 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$114
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NT$115 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearFuncion(nom,false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$115",171, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // funcion5 ::= ID NT$115 PARI par PARD finfunc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$115
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion5",49, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // finfunc ::= LLAVEIZ inicio LLAVEDER 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("finfunc",50, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // finfunc ::= PUNTCOMA 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("finfunc",50, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // NT$116 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarParametro2(String.valueOf(tp),nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$116",172, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // par2 ::= tipoD ID NT$116 fin5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$116
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // NT$117 ::= 
            {
              Object RESULT =null;
insertarParametro2("","");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$117",173, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // par2 ::= NT$117 expr3 fin5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$117
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // par2 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // fin5 ::= COMA par2 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin5",44, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // fin5 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin5",44, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // NT$118 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"identificador");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$118",174, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr3 ::= ID NT$118 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$118
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // NT$119 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearExpresionArreglo2("arreglo",val);crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$119",175, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // NT$120 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$120",176, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // NT$121 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
cerrarExpresionArreglo();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$121",177, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr3 ::= ID BRACKI NT$119 expr3 NT$120 BRACKD arr3p NT$121 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$121
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // NT$122 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"numero");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$122",178, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr3 ::= NUMERO NT$122 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$122
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // NT$123 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"cadena");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$123",179, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr3 ::= CADENA NT$123 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$123
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // NT$124 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"caracter");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$124",180, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr3 ::= CARACTER NT$124 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$124
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // NT$125 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$125",181, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr3 ::= VERDADERO NT$125 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$125
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NT$126 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$126",182, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr3 ::= FALSO NT$126 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$126
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NT$127 ::= 
            {
              Object RESULT =null;
insExpr2("(","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$127",183, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NT$128 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insExpr2(")","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$128",184, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expr3 ::= PARI NT$127 expr3 PARD NT$128 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$128
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // NT$129 ::= 
            {
              Object RESULT =null;
insExpr2("!","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$129",185, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr3 ::= OPNOT NT$129 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$129
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // NT$130 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$130",186, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // NT$131 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$131",187, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // arr3p ::= BRACKI NT$130 expr3 NT$131 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$131
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr3p",46, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // arr3p ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr3p",46, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // NT$132 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$132",188, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // fin6 ::= op NT$132 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$132
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompiladorParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CompiladorParser$do_action_part00000001(
    int                        CUP$CompiladorParser$act_num,
    java_cup.runtime.lr_parser CUP$CompiladorParser$parser,
    java.util.Stack            CUP$CompiladorParser$stack,
    int                        CUP$CompiladorParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompiladorParser$result;

      /* select the action based on the action number */
      switch (CUP$CompiladorParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // NT$133 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$133",189, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // fin6 ::= op3 NT$133 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$133
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // NT$134 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$134",190, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // fin6 ::= op4 NT$134 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$134
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // fin6 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // NT$135 ::= 
            {
              Object RESULT =null;
creacionLista();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$135",191, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // listas ::= LLAVEIZ LISTA DOSPUNT LLAVEIZ NT$135 datosLista LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$135
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("listas",51, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // NT$136 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarDatoLista("NOMBRE",val);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$136",192, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // datosLista ::= NOMBRE DOSPUNT CADENA NT$136 finlista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$136
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("datosLista",52, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // NT$137 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarDatoLista("RAMDOM",String.valueOf(val));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$137",193, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // datosLista ::= RANDOM DOSPUNT valoresLista NT$137 finlista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$137
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("datosLista",52, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // NT$138 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarDatoLista("CIRCULAR",String.valueOf(val));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$138",194, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // datosLista ::= CIRCULAR DOSPUNT valoresLista NT$138 finlista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$138
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("datosLista",52, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // datosLista ::= PISTAS DOSPUNT BRACKI pistasLista BRACKD finlista 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("datosLista",52, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // finlista ::= COMA datosLista 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("finlista",53, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // finlista ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("finlista",53, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // valoresLista ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
		RESULT = "true";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("valoresLista",54, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // valoresLista ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
		RESULT = "false";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("valoresLista",54, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // NT$139 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarPistaLista(val);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$139",195, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // pistasLista ::= ID NT$139 COMA pistasLista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$139
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("pistasLista",55, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // pistasLista ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
		insertarPistaLista(val);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("pistasLista",55, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompiladorParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CompiladorParser$do_action(
    int                        CUP$CompiladorParser$act_num,
    java_cup.runtime.lr_parser CUP$CompiladorParser$parser,
    java.util.Stack            CUP$CompiladorParser$stack,
    int                        CUP$CompiladorParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CompiladorParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CompiladorParser$do_action_part00000000(
                               CUP$CompiladorParser$act_num,
                               CUP$CompiladorParser$parser,
                               CUP$CompiladorParser$stack,
                               CUP$CompiladorParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CompiladorParser$do_action_part00000001(
                               CUP$CompiladorParser$act_num,
                               CUP$CompiladorParser$parser,
                               CUP$CompiladorParser$stack,
                               CUP$CompiladorParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
