
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.adolfosc.analizadores.compilador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.adolfosc.analizadores.ErrorSintaxis;
import com.adolfosc.modelo.music.Pista;
import com.adolfosc.modelo.music.Expresion;
import com.adolfosc.modelo.music.Instruccion;
import com.adolfosc.modelo.music.Parametro;
import com.adolfosc.modelo.music.Condicion;
import com.adolfosc.modelo.music.Lista;
import com.adolfosc.modelo.instrucciones.Asignacion;
import com.adolfosc.modelo.instrucciones.Dimension;
import com.adolfosc.modelo.instrucciones.Declaracion;
import com.adolfosc.modelo.instrucciones.Funcion;
import com.adolfosc.modelo.instrucciones.DeclDim;
import com.adolfosc.modelo.instrucciones.CondSi;
import com.adolfosc.modelo.instrucciones.Para;
import com.adolfosc.modelo.instrucciones.Mientras;
import com.adolfosc.modelo.instrucciones.CasoC;
import com.adolfosc.modelo.instrucciones.SwitchC;
import com.adolfosc.modelo.instrucciones.IncrDecr;
import java.util.Stack;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CompiladorParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CompiladorParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CompiladorParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompiladorParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\002\002\004\000\002\072\002\000\002\002" +
    "\005\000\002\073\002\000\002\002\005\000\002\074\002" +
    "\000\002\002\006\000\002\075\002\000\002\002\006\000" +
    "\002\076\002\000\002\002\006\000\002\077\002\000\002" +
    "\002\010\000\002\100\002\000\002\002\010\000\002\101" +
    "\002\000\002\002\010\000\002\102\002\000\002\002\011" +
    "\000\002\103\002\000\002\002\006\000\002\104\002\000" +
    "\002\002\006\000\002\105\002\000\002\002\006\000\002" +
    "\106\002\000\002\002\005\000\002\107\002\000\002\002" +
    "\005\000\002\110\002\000\002\002\006\000\002\002\003" +
    "\000\002\002\004\000\002\002\002\000\002\111\002\000" +
    "\002\003\007\000\002\112\002\000\002\004\006\000\002" +
    "\004\002\000\002\113\002\000\002\005\006\000\002\005" +
    "\002\000\002\114\002\000\002\006\005\000\002\115\002" +
    "\000\002\006\004\000\002\116\002\000\002\007\010\000" +
    "\002\117\002\000\002\120\002\000\002\121\002\000\002" +
    "\007\017\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\122\002" +
    "\000\002\010\006\000\002\010\002\000\002\123\002\000" +
    "\002\124\002\000\002\023\007\000\002\023\002\000\002" +
    "\125\002\000\002\015\005\000\002\015\002\000\002\126" +
    "\002\000\002\012\005\000\002\127\002\000\002\130\002" +
    "\000\002\131\002\000\002\012\013\000\002\132\002\000" +
    "\002\012\005\000\002\133\002\000\002\012\005\000\002" +
    "\134\002\000\002\012\005\000\002\135\002\000\002\012" +
    "\005\000\002\136\002\000\002\012\005\000\002\137\002" +
    "\000\002\140\002\000\002\012\010\000\002\141\002\000" +
    "\002\012\005\000\002\142\002\000\002\143\002\000\002" +
    "\024\007\000\002\024\002\000\002\144\002\000\002\014" +
    "\005\000\002\014\002\000\002\145\002\000\002\047\005" +
    "\000\002\146\002\000\002\147\002\000\002\150\002\000" +
    "\002\047\013\000\002\151\002\000\002\047\005\000\002" +
    "\152\002\000\002\047\005\000\002\153\002\000\002\047" +
    "\005\000\002\154\002\000\002\047\005\000\002\155\002" +
    "\000\002\047\005\000\002\156\002\000\002\157\002\000" +
    "\002\047\010\000\002\160\002\000\002\047\005\000\002" +
    "\047\003\000\002\161\002\000\002\162\002\000\002\050" +
    "\007\000\002\050\002\000\002\163\002\000\002\051\005" +
    "\000\002\164\002\000\002\051\005\000\002\165\002\000" +
    "\002\051\005\000\002\051\002\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\166\002\000\002\011\005" +
    "\000\002\011\002\000\002\167\002\000\002\017\006\000" +
    "\002\017\002\000\002\020\004\000\002\170\002\000\002" +
    "\020\005\000\002\021\004\000\002\021\002\000\002\171" +
    "\002\000\002\022\006\000\002\022\002\000\002\172\002" +
    "\000\002\025\006\000\002\173\002\000\002\025\006\000" +
    "\002\174\002\000\002\175\002\000\002\176\002\000\002" +
    "\025\014\000\002\177\002\000\002\200\002\000\002\026" +
    "\007\000\002\026\002\000\002\201\002\000\002\027\011" +
    "\000\002\202\002\000\002\027\006\000\002\203\002\000" +
    "\002\027\007\000\002\204\002\000\002\027\010\000\002" +
    "\205\002\000\002\030\006\000\002\206\002\000\002\030" +
    "\005\000\002\030\002\000\002\031\004\000\002\031\002" +
    "\000\002\207\002\000\002\032\007\000\002\210\002\000" +
    "\002\032\007\000\002\211\002\000\002\032\007\000\002" +
    "\032\003\000\002\212\002\000\002\213\002\000\002\214" +
    "\002\000\002\033\013\000\002\033\004\000\002\215\002" +
    "\000\002\216\002\000\002\217\002\000\002\033\013\000" +
    "\002\037\003\000\002\037\002\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\220\002\000\002\035\005" +
    "\000\002\035\002\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\221\002\000\002\222\002\000\002\223\002\000\002\040" +
    "\017\000\002\224\002\000\002\225\002\000\002\040\010" +
    "\000\002\041\003\000\002\041\003\000\002\226\002\000" +
    "\002\042\006\000\002\227\002\000\002\042\006\000\002" +
    "\230\002\000\002\231\002\000\002\232\002\000\002\042" +
    "\014\000\002\061\003\000\002\061\002\000\002\043\003" +
    "\000\002\233\002\000\002\234\002\000\002\062\010\000" +
    "\002\235\002\000\002\044\007\000\002\236\002\000\002" +
    "\044\007\000\002\237\002\000\002\044\007\000\002\240" +
    "\002\000\002\241\002\000\002\045\012\000\002\242\002" +
    "\000\002\045\007\000\002\243\002\000\002\045\005\000" +
    "\002\244\002\000\002\046\006\000\002\245\002\000\002" +
    "\046\005\000\002\246\002\000\002\046\005\000\002\052" +
    "\004\000\002\052\004\000\002\247\002\000\002\053\006" +
    "\000\002\250\002\000\002\053\007\000\002\251\002\000" +
    "\002\053\007\000\002\252\002\000\002\253\002\000\002" +
    "\053\012\000\002\254\002\000\002\053\007\000\002\255" +
    "\002\000\002\053\007\000\002\256\002\000\002\063\010" +
    "\000\002\064\005\000\002\064\003\000\002\257\002\000" +
    "\002\054\006\000\002\260\002\000\002\054\005\000\002" +
    "\054\002\000\002\056\004\000\002\056\002\000\002\261" +
    "\002\000\002\055\005\000\002\262\002\000\002\263\002" +
    "\000\002\264\002\000\002\055\013\000\002\265\002\000" +
    "\002\055\005\000\002\266\002\000\002\055\005\000\002" +
    "\267\002\000\002\055\005\000\002\270\002\000\002\055" +
    "\005\000\002\271\002\000\002\055\005\000\002\272\002" +
    "\000\002\273\002\000\002\055\010\000\002\274\002\000" +
    "\002\055\005\000\002\275\002\000\002\276\002\000\002" +
    "\060\007\000\002\060\002\000\002\277\002\000\002\057" +
    "\005\000\002\300\002\000\002\057\005\000\002\301\002" +
    "\000\002\057\005\000\002\057\002\000\002\302\002\000" +
    "\002\065\012\000\002\303\002\000\002\066\007\000\002" +
    "\304\002\000\002\066\007\000\002\305\002\000\002\066" +
    "\007\000\002\066\010\000\002\066\004\000\002\067\004" +
    "\000\002\067\002\000\002\070\003\000\002\070\003\000" +
    "\002\306\002\000\002\071\006\000\002\071\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0232\000\102\002\uffe0\003\034\004\023\006\027\007" +
    "\uffd5\011\011\012\021\013\056\014\041\015\004\016\016" +
    "\017\051\020\055\021\022\022\052\023\025\024\035\025" +
    "\033\026\053\027\050\030\046\031\007\032\020\040\032" +
    "\041\026\042\015\043\042\044\014\045\054\100\013\106" +
    "\036\107\031\001\002\000\022\073\uff0e\074\uff0e\107\uff0e" +
    "\110\uff0e\111\uff0e\112\uff0e\113\uff0e\114\uff0e\001\002\000" +
    "\004\103\uffea\001\002\000\004\103\uffec\001\002\000\004" +
    "\074\uff17\001\002\000\004\103\uffe4\001\002\000\004\074" +
    "\u0221\001\002\000\004\103\ufff8\001\002\000\004\033\u01f8" +
    "\001\002\000\006\010\uffca\107\uffca\001\002\000\006\010" +
    "\uffcc\107\uffcc\001\002\000\104\002\ufffe\003\ufffe\004\ufffe" +
    "\006\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\100\ufffe\101\ufffe\106\ufffe\107\ufffe\001\002\000\004\002" +
    "\u01f5\001\002\000\004\074\uff5f\001\002\000\004\100\uff4c" +
    "\001\002\000\004\074\uff2e\001\002\000\004\107\u01e1\001" +
    "\002\000\004\007\u01ad\001\002\000\004\103\uffee\001\002" +
    "\000\006\010\uffcd\107\uffcd\001\002\000\020\007\uffd7\032" +
    "\u01a3\041\026\042\015\043\042\044\014\045\054\001\002" +
    "\000\004\107\u019d\001\002\000\016\046\u0183\047\u0188\050" +
    "\uff6d\074\ufef9\076\uff69\105\uff6b\001\002\000\004\103\uff0a" +
    "\001\002\000\004\074\uff15\001\002\000\104\002\uffe0\003" +
    "\034\004\023\006\027\007\uffd5\011\011\012\021\013\056" +
    "\014\041\015\004\016\016\017\051\020\055\021\022\022" +
    "\052\023\025\024\035\025\033\026\053\027\050\030\046" +
    "\031\007\032\020\040\032\041\026\042\015\043\042\044" +
    "\014\045\054\100\013\101\uffe0\106\036\107\031\001\002" +
    "\000\034\006\uff10\025\uff10\027\uff10\030\uff10\032\uff10\073" +
    "\uff10\074\uff10\107\uff10\110\uff10\111\uff10\112\uff10\113\uff10" +
    "\114\uff10\001\002\000\104\002\000\003\000\004\000\006" +
    "\000\007\000\011\000\012\000\013\000\014\000\015\000" +
    "\016\000\017\000\020\000\021\000\022\000\023\000\024" +
    "\000\025\000\026\000\027\000\030\000\031\000\032\000" +
    "\040\000\041\000\042\000\043\000\044\000\045\000\100" +
    "\000\101\000\106\000\107\000\001\002\000\004\100\ufff6" +
    "\001\002\000\004\100\ufff4\001\002\000\004\074\uff52\001" +
    "\002\000\006\010\uffcb\107\uffcb\001\002\000\104\002\uffe6" +
    "\003\uffe6\004\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\100\uffe6\101\uffe6\106\uffe6\107\uffe6\001" +
    "\002\000\004\100\ufff0\001\002\000\104\002\uffe8\003\uffe8" +
    "\004\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\100\uffe8\101\uffe8\106\uffe8\107\uffe8\001\002\000" +
    "\004\074\uff19\001\002\000\004\100\ufff2\001\002\000\004" +
    "\074\uff1b\001\002\000\004\102\uff0c\001\002\000\004\100" +
    "\uff1f\001\002\000\004\074\uff12\001\002\000\006\010\uffc9" +
    "\107\uffc9\001\002\000\004\074\uff32\001\002\000\004\074" +
    "\070\001\002\000\006\002\uffe2\101\uffe2\001\002\000\004" +
    "\103\ufffa\001\002\000\102\003\ufffc\004\ufffc\006\ufffc\007" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\100\ufffc\101" +
    "\ufffc\106\ufffc\107\ufffc\001\002\000\102\003\034\004\023" +
    "\006\027\007\uffd5\011\011\012\021\013\056\014\041\015" +
    "\004\016\016\017\051\020\055\021\022\022\052\023\025" +
    "\024\035\025\033\026\053\027\050\030\046\031\007\032" +
    "\020\040\032\041\026\042\015\043\042\044\014\045\054" +
    "\100\013\101\uffe0\106\036\107\031\001\002\000\004\101" +
    "\064\001\002\000\006\002\ufffb\101\ufffb\001\002\000\004" +
    "\103\066\001\002\000\104\002\uffe0\003\034\004\023\006" +
    "\027\007\uffd5\011\011\012\021\013\056\014\041\015\004" +
    "\016\016\017\051\020\055\021\022\022\052\023\025\024" +
    "\035\025\033\026\053\027\050\030\046\031\007\032\020" +
    "\040\032\041\026\042\015\043\042\044\014\045\054\100" +
    "\013\101\uffe0\106\036\107\031\001\002\000\006\002\ufff9" +
    "\101\ufff9\001\002\000\024\063\uff4e\073\uff4e\074\uff4e\107" +
    "\uff4e\110\uff4e\111\uff4e\112\uff4e\113\uff4e\114\uff4e\001\002" +
    "\000\024\063\072\073\uff41\074\uff41\107\uff41\110\uff41\111" +
    "\uff41\112\uff41\113\uff41\114\uff41\001\002\000\022\073\uff42" +
    "\074\uff42\107\uff42\110\uff42\111\uff42\112\uff42\113\uff42\114" +
    "\uff42\001\002\000\022\073\077\074\102\107\104\110\076" +
    "\111\106\112\103\113\105\114\100\001\002\000\004\075" +
    "\075\001\002\000\004\100\uff4d\001\002\000\060\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\075\uffb6\077\uffb6\101\uffb6\102" +
    "\uffb6\103\uffb6\104\uffb6\001\002\000\022\073\uffab\074\uffab" +
    "\107\uffab\110\uffab\111\uffab\112\uffab\113\uffab\114\uffab\001" +
    "\002\000\060\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0\065" +
    "\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\075\uffb0" +
    "\077\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\001\002\000" +
    "\034\057\160\060\157\061\154\062\162\064\155\065\156" +
    "\066\161\067\164\070\153\071\152\072\165\075\uff47\103" +
    "\uff47\001\002\000\022\073\uffae\074\uffae\107\uffae\110\uffae" +
    "\111\uffae\112\uffae\113\uffae\114\uffae\001\002\000\060\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\070\uffb8\071\uffb8\072\uffb8\075\uffb8\077\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\104\uffb8\001\002\000\062\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\075\uffbe\076\125\077\uffbe\101\uffbe" +
    "\102\uffbe\103\uffbe\104\uffbe\001\002\000\060\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070" +
    "\uffb2\071\uffb2\072\uffb2\075\uffb2\077\uffb2\101\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\001\002\000\060\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\072\uffb4\075\uffb4\077\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\104\uffb4\001\002\000\060\051\115\052\110\053\112\054" +
    "\116\055\113\056\111\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072" +
    "\uffa3\075\uffa3\077\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\001\002\000\034\006\uff80\025\uff80\027\uff80\030\uff80\032" +
    "\uff80\073\uff80\074\uff80\107\uff80\110\uff80\111\uff80\112\uff80" +
    "\113\uff80\114\uff80\001\002\000\034\006\uff7d\025\uff7d\027" +
    "\uff7d\030\uff7d\032\uff7d\073\uff7d\074\uff7d\107\uff7d\110\uff7d" +
    "\111\uff7d\112\uff7d\113\uff7d\114\uff7d\001\002\000\034\006" +
    "\uff7f\025\uff7f\027\uff7f\030\uff7f\032\uff7f\073\uff7f\074\uff7f" +
    "\107\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f\114\uff7f\001" +
    "\002\000\034\006\uff7c\025\uff7c\027\uff7c\030\uff7c\032\uff7c" +
    "\073\uff7c\074\uff7c\107\uff7c\110\uff7c\111\uff7c\112\uff7c\113" +
    "\uff7c\114\uff7c\001\002\000\044\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\075\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3" +
    "\104\uffb3\001\002\000\034\006\uff81\025\uff81\027\uff81\030" +
    "\uff81\032\uff81\073\uff81\074\uff81\107\uff81\110\uff81\111\uff81" +
    "\112\uff81\113\uff81\114\uff81\001\002\000\034\006\uff7e\025" +
    "\uff7e\027\uff7e\030\uff7e\032\uff7e\073\uff7e\074\uff7e\107\uff7e" +
    "\110\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e\001\002\000" +
    "\022\073\uffa5\074\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5" +
    "\113\uffa5\114\uffa5\001\002\000\022\073\077\074\102\107" +
    "\104\110\076\111\106\112\103\113\105\114\100\001\002" +
    "\000\044\057\uffa4\060\uffa4\061\uffa4\062\uffa4\064\uffa4\065" +
    "\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\075\uffa4" +
    "\077\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\001\002\000" +
    "\060\051\115\052\110\053\112\054\116\055\113\056\111" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\075\uffa3\077\uffa3" +
    "\101\uffa3\102\uffa3\103\uffa3\104\uffa3\001\002\000\044\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\072\uffb1\075\uffb1\077\uffb1\101" +
    "\uffb1\102\uffb1\103\uffb1\104\uffb1\001\002\000\060\051\115" +
    "\052\110\053\112\054\116\055\113\056\111\057\uffa3\060" +
    "\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\075\uffa3\077\uffa3\101\uffa3\102" +
    "\uffa3\103\uffa3\104\uffa3\001\002\000\022\073\uffbc\074\uffbc" +
    "\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc\001" +
    "\002\000\022\073\077\074\102\107\104\110\076\111\106" +
    "\112\103\113\105\114\100\001\002\000\004\077\uffbb\001" +
    "\002\000\004\077\131\001\002\000\062\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6" +
    "\071\uffa6\072\uffa6\075\uffa6\076\133\077\uffa6\101\uffa6\102" +
    "\uffa6\103\uffa6\104\uffa6\001\002\000\060\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba" +
    "\071\uffba\072\uffba\075\uffba\077\uffba\101\uffba\102\uffba\103" +
    "\uffba\104\uffba\001\002\000\022\073\uffa9\074\uffa9\107\uffa9" +
    "\110\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\001\002\000" +
    "\022\073\077\074\102\107\104\110\076\111\106\112\103" +
    "\113\105\114\100\001\002\000\004\077\uffa8\001\002\000" +
    "\004\077\137\001\002\000\060\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7" +
    "\072\uffa7\075\uffa7\077\uffa7\101\uffa7\102\uffa7\103\uffa7\104" +
    "\uffa7\001\002\000\060\051\115\052\110\053\112\054\116" +
    "\055\113\056\111\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\075\uffa3\077\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\001" +
    "\002\000\044\057\uffb9\060\uffb9\061\uffb9\062\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\075" +
    "\uffb9\077\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\001\002" +
    "\000\044\057\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\065" +
    "\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\075\uffbd" +
    "\077\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\001\002\000" +
    "\060\051\115\052\110\053\112\054\116\055\113\056\111" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\075\uffa3\077\uffa3" +
    "\101\uffa3\102\uffa3\103\uffa3\104\uffa3\001\002\000\044\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\072\uffb7\075\uffb7\077\uffb7\101" +
    "\uffb7\102\uffb7\103\uffb7\104\uffb7\001\002\000\022\073\077" +
    "\074\102\107\104\110\076\111\106\112\103\113\105\114" +
    "\100\001\002\000\004\075\147\001\002\000\060\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\061\uffad\062\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\071\uffad\072\uffad\075\uffad\077\uffad\101\uffad\102" +
    "\uffad\103\uffad\104\uffad\001\002\000\060\051\115\052\110" +
    "\053\112\054\116\055\113\056\111\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3" +
    "\071\uffa3\072\uffa3\075\uffa3\077\uffa3\101\uffa3\102\uffa3\103" +
    "\uffa3\104\uffa3\001\002\000\044\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071" +
    "\uffac\072\uffac\075\uffac\077\uffac\101\uffac\102\uffac\103\uffac" +
    "\104\uffac\001\002\000\036\006\uff37\025\uff37\027\uff37\030" +
    "\uff37\032\uff37\063\uff37\073\uff37\074\uff37\107\uff37\110\uff37" +
    "\111\uff37\112\uff37\113\uff37\114\uff37\001\002\000\036\006" +
    "\uff34\025\uff34\027\uff34\030\uff34\032\uff34\063\uff34\073\uff34" +
    "\074\uff34\107\uff34\110\uff34\111\uff34\112\uff34\113\uff34\114" +
    "\uff34\001\002\000\036\006\uff3c\025\uff3c\027\uff3c\030\uff3c" +
    "\032\uff3c\063\uff3c\073\uff3c\074\uff3c\107\uff3c\110\uff3c\111" +
    "\uff3c\112\uff3c\113\uff3c\114\uff3c\001\002\000\036\006\uff3e" +
    "\025\uff3e\027\uff3e\030\uff3e\032\uff3e\063\uff3e\073\uff3e\074" +
    "\uff3e\107\uff3e\110\uff3e\111\uff3e\112\uff3e\113\uff3e\114\uff3e" +
    "\001\002\000\036\006\uff3d\025\uff3d\027\uff3d\030\uff3d\032" +
    "\uff3d\063\uff3d\073\uff3d\074\uff3d\107\uff3d\110\uff3d\111\uff3d" +
    "\112\uff3d\113\uff3d\114\uff3d\001\002\000\036\006\uff3f\025" +
    "\uff3f\027\uff3f\030\uff3f\032\uff3f\063\uff3f\073\uff3f\074\uff3f" +
    "\107\uff3f\110\uff3f\111\uff3f\112\uff3f\113\uff3f\114\uff3f\001" +
    "\002\000\036\006\uff40\025\uff40\027\uff40\030\uff40\032\uff40" +
    "\063\uff40\073\uff40\074\uff40\107\uff40\110\uff40\111\uff40\112" +
    "\uff40\113\uff40\114\uff40\001\002\000\036\006\uff36\025\uff36" +
    "\027\uff36\030\uff36\032\uff36\063\uff36\073\uff36\074\uff36\107" +
    "\uff36\110\uff36\111\uff36\112\uff36\113\uff36\114\uff36\001\002" +
    "\000\036\006\uff3b\025\uff3b\027\uff3b\030\uff3b\032\uff3b\063" +
    "\uff3b\073\uff3b\074\uff3b\107\uff3b\110\uff3b\111\uff3b\112\uff3b" +
    "\113\uff3b\114\uff3b\001\002\000\024\063\uff46\073\uff46\074" +
    "\uff46\107\uff46\110\uff46\111\uff46\112\uff46\113\uff46\114\uff46" +
    "\001\002\000\036\006\uff33\025\uff33\027\uff33\030\uff33\032" +
    "\uff33\063\uff33\073\uff33\074\uff33\107\uff33\110\uff33\111\uff33" +
    "\112\uff33\113\uff33\114\uff33\001\002\000\036\006\uff35\025" +
    "\uff35\027\uff35\030\uff35\032\uff35\063\uff35\073\uff35\074\uff35" +
    "\107\uff35\110\uff35\111\uff35\112\uff35\113\uff35\114\uff35\001" +
    "\002\000\024\063\uff4b\073\uff4b\074\uff4b\107\uff4b\110\uff4b" +
    "\111\uff4b\112\uff4b\113\uff4b\114\uff4b\001\002\000\024\063" +
    "\072\073\uff41\074\uff41\107\uff41\110\uff41\111\uff41\112\uff41" +
    "\113\uff41\114\uff41\001\002\000\022\073\uff4a\074\uff4a\107" +
    "\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a\114\uff4a\001\002" +
    "\000\022\073\077\074\102\107\104\110\076\111\106\112" +
    "\103\113\105\114\100\001\002\000\020\066\uff49\067\uff49" +
    "\070\uff49\071\uff49\072\uff49\075\uff49\103\uff49\001\002\000" +
    "\020\066\161\067\164\070\153\071\152\072\165\075\uff38" +
    "\103\uff38\001\002\000\006\075\uff48\103\uff48\001\002\000" +
    "\024\063\uff3a\073\uff3a\074\uff3a\107\uff3a\110\uff3a\111\uff3a" +
    "\112\uff3a\113\uff3a\114\uff3a\001\002\000\024\063\072\073" +
    "\uff41\074\uff41\107\uff41\110\uff41\111\uff41\112\uff41\113\uff41" +
    "\114\uff41\001\002\000\006\075\uff39\103\uff39\001\002\000" +
    "\024\063\072\073\uff41\074\uff41\107\uff41\110\uff41\111\uff41" +
    "\112\uff41\113\uff41\114\uff41\001\002\000\022\073\uff45\074" +
    "\uff45\107\uff45\110\uff45\111\uff45\112\uff45\113\uff45\114\uff45" +
    "\001\002\000\022\073\077\074\102\107\104\110\076\111" +
    "\106\112\103\113\105\114\100\001\002\000\020\066\uff44" +
    "\067\uff44\070\uff44\071\uff44\072\uff44\075\uff44\103\uff44\001" +
    "\002\000\020\066\161\067\164\070\153\071\152\072\165" +
    "\075\uff38\103\uff38\001\002\000\006\075\uff43\103\uff43\001" +
    "\002\000\060\051\115\052\110\053\112\054\116\055\113" +
    "\056\111\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\075\uffa3" +
    "\077\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\001\002\000" +
    "\044\057\uffaf\060\uffaf\061\uffaf\062\uffaf\064\uffaf\065\uffaf" +
    "\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\075\uffaf\077" +
    "\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\001\002\000\022" +
    "\073\077\074\102\107\104\110\076\111\106\112\103\113" +
    "\105\114\100\001\002\000\044\057\uffaa\060\uffaa\061\uffaa" +
    "\062\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071" +
    "\uffaa\072\uffaa\075\uffaa\077\uffaa\101\uffaa\102\uffaa\103\uffaa" +
    "\104\uffaa\001\002\000\060\051\115\052\110\053\112\054" +
    "\116\055\113\056\111\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072" +
    "\uffa3\075\uffa3\077\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\001\002\000\044\057\uffb5\060\uffb5\061\uffb5\062\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5" +
    "\075\uffb5\077\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\001" +
    "\002\000\004\074\215\001\002\000\016\041\026\042\015" +
    "\043\042\044\014\045\054\107\uff20\001\002\000\004\107" +
    "\220\001\002\000\004\107\uff21\001\002\000\010\050\uff29" +
    "\076\uff25\105\uff27\001\002\000\004\103\222\001\002\000" +
    "\024\063\uff31\073\uff31\074\uff31\107\uff31\110\uff31\111\uff31" +
    "\112\uff31\113\uff31\114\uff31\001\002\000\024\063\072\073" +
    "\uff41\074\uff41\107\uff41\110\uff41\111\uff41\112\uff41\113\uff41" +
    "\114\uff41\001\002\000\004\103\225\001\002\000\004\107" +
    "\226\001\002\000\006\046\227\047\231\001\002\000\004" +
    "\075\uff2b\001\002\000\004\075\uff30\001\002\000\004\075" +
    "\uff2a\001\002\000\004\075\233\001\002\000\004\100\uff2f" +
    "\001\002\000\004\076\243\001\002\000\004\105\241\001" +
    "\002\000\004\050\237\001\002\000\022\073\077\074\102" +
    "\107\104\110\076\111\106\112\103\113\105\114\100\001" +
    "\002\000\004\103\uff28\001\002\000\022\073\077\074\102" +
    "\107\104\110\076\111\106\112\103\113\105\114\100\001" +
    "\002\000\004\103\uff26\001\002\000\022\073\uff24\074\uff24" +
    "\107\uff24\110\uff24\111\uff24\112\uff24\113\uff24\114\uff24\001" +
    "\002\000\022\073\077\074\102\107\104\110\076\111\106" +
    "\112\103\113\105\114\100\001\002\000\004\077\uff23\001" +
    "\002\000\004\077\247\001\002\000\006\076\251\105\uff62" +
    "\001\002\000\004\105\256\001\002\000\022\073\uff65\074" +
    "\uff65\107\uff65\110\uff65\111\uff65\112\uff65\113\uff65\114\uff65" +
    "\001\002\000\022\073\077\074\102\107\104\110\076\111" +
    "\106\112\103\113\105\114\100\001\002\000\004\077\uff64" +
    "\001\002\000\004\077\255\001\002\000\004\105\uff63\001" +
    "\002\000\022\073\077\074\102\107\104\110\076\111\106" +
    "\112\103\113\105\114\100\001\002\000\004\103\uff22\001" +
    "\002\000\004\074\261\001\002\000\050\006\uff57\025\uff57" +
    "\027\uff57\030\uff57\032\uff57\041\026\042\015\043\042\044" +
    "\014\045\054\073\uff57\074\uff57\075\uff55\107\uff57\110\uff57" +
    "\111\uff57\112\uff57\113\uff57\114\uff57\001\002\000\004\075" +
    "\u0147\001\002\000\034\006\306\025\275\027\277\030\302" +
    "\032\310\073\273\074\300\107\303\110\272\111\307\112" +
    "\301\113\304\114\274\001\002\000\004\107\265\001\002" +
    "\000\006\075\uff59\104\uff59\001\002\000\006\075\uff53\104" +
    "\267\001\002\000\050\006\uff57\025\uff57\027\uff57\030\uff57" +
    "\032\uff57\041\026\042\015\043\042\044\014\045\054\073" +
    "\uff57\074\uff57\075\uff55\107\uff57\110\uff57\111\uff57\112\uff57" +
    "\113\uff57\114\uff57\001\002\000\004\075\uff58\001\002\000" +
    "\004\075\uff54\001\002\000\054\051\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a" +
    "\072\uff9a\075\uff9a\077\uff9a\103\uff9a\104\uff9a\001\002\000" +
    "\034\006\uff8f\025\uff8f\027\uff8f\030\uff8f\032\uff8f\073\uff8f" +
    "\074\uff8f\107\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\114" +
    "\uff8f\001\002\000\054\051\uff94\052\uff94\053\uff94\054\uff94" +
    "\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\064" +
    "\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94" +
    "\075\uff94\077\uff94\103\uff94\104\uff94\001\002\000\004\074" +
    "\uff00\001\002\000\006\075\uff53\104\267\001\002\000\004" +
    "\074\ufefd\001\002\000\034\006\uff92\025\uff92\027\uff92\030" +
    "\uff92\032\uff92\073\uff92\074\uff92\107\uff92\110\uff92\111\uff92" +
    "\112\uff92\113\uff92\114\uff92\001\002\000\054\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070" +
    "\uff9c\071\uff9c\072\uff9c\075\uff9c\077\uff9c\103\uff9c\104\uff9c" +
    "\001\002\000\004\074\ufefb\001\002\000\060\051\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\072\uffa2\074\uff02\075\uffa2\076\336\077\uffa2" +
    "\103\uffa2\104\uffa2\001\002\000\054\051\uff96\052\uff96\053" +
    "\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96" +
    "\062\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071" +
    "\uff96\072\uff96\075\uff96\077\uff96\103\uff96\104\uff96\001\002" +
    "\000\012\075\uff8d\077\uff8d\103\uff8d\104\uff8d\001\002\000" +
    "\004\032\327\001\002\000\054\051\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98" +
    "\072\uff98\075\uff98\077\uff98\103\uff98\104\uff98\001\002\000" +
    "\004\074\uff06\001\002\000\004\074\312\001\002\000\004" +
    "\075\313\001\002\000\012\075\uff05\077\uff05\103\uff05\104" +
    "\uff05\001\002\000\054\051\115\052\110\053\112\054\116" +
    "\055\113\056\111\057\160\060\157\061\154\062\162\064" +
    "\155\065\156\066\161\067\164\070\153\071\152\072\165" +
    "\075\uff82\077\uff82\103\uff82\104\uff82\001\002\000\034\006" +
    "\uff88\025\uff88\027\uff88\030\uff88\032\uff88\073\uff88\074\uff88" +
    "\107\uff88\110\uff88\111\uff88\112\uff88\113\uff88\114\uff88\001" +
    "\002\000\034\006\uff84\025\uff84\027\uff84\030\uff84\032\uff84" +
    "\073\uff84\074\uff84\107\uff84\110\uff84\111\uff84\112\uff84\113" +
    "\uff84\114\uff84\001\002\000\034\006\uff86\025\uff86\027\uff86" +
    "\030\uff86\032\uff86\073\uff86\074\uff86\107\uff86\110\uff86\111" +
    "\uff86\112\uff86\113\uff86\114\uff86\001\002\000\012\075\uff97" +
    "\077\uff97\103\uff97\104\uff97\001\002\000\034\006\306\025" +
    "\275\027\277\030\302\032\310\073\273\074\300\107\303" +
    "\110\272\111\307\112\301\113\304\114\274\001\002\000" +
    "\012\075\uff85\077\uff85\103\uff85\104\uff85\001\002\000\034" +
    "\006\306\025\275\027\277\030\302\032\310\073\273\074" +
    "\300\107\303\110\272\111\307\112\301\113\304\114\274" +
    "\001\002\000\012\075\uff83\077\uff83\103\uff83\104\uff83\001" +
    "\002\000\034\006\306\025\275\027\277\030\302\032\310" +
    "\073\273\074\300\107\303\110\272\111\307\112\301\113" +
    "\304\114\274\001\002\000\012\075\uff87\077\uff87\103\uff87" +
    "\104\uff87\001\002\000\004\074\uff04\001\002\000\004\074" +
    "\331\001\002\000\004\075\332\001\002\000\012\075\uff03" +
    "\077\uff03\103\uff03\104\uff03\001\002\000\054\051\115\052" +
    "\110\053\112\054\116\055\113\056\111\057\160\060\157" +
    "\061\154\062\162\064\155\065\156\066\161\067\164\070" +
    "\153\071\152\072\165\075\uff82\077\uff82\103\uff82\104\uff82" +
    "\001\002\000\012\075\uff95\077\uff95\103\uff95\104\uff95\001" +
    "\002\000\054\051\115\052\110\053\112\054\116\055\113" +
    "\056\111\057\160\060\157\061\154\062\162\064\155\065" +
    "\156\066\161\067\164\070\153\071\152\072\165\075\uff82" +
    "\077\uff82\103\uff82\104\uff82\001\002\000\034\006\uffa0\025" +
    "\uffa0\027\uffa0\030\uffa0\032\uffa0\073\uffa0\074\uffa0\107\uffa0" +
    "\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\001\002\000" +
    "\004\074\340\001\002\000\036\041\026\042\015\043\042" +
    "\044\014\045\054\073\ufef3\074\ufef3\075\ufef1\107\ufef3\110" +
    "\ufef3\111\ufef3\112\ufef3\113\ufef3\114\ufef3\001\002\000\022" +
    "\073\353\074\357\107\360\110\352\111\362\112\356\113" +
    "\361\114\354\001\002\000\004\075\351\001\002\000\004" +
    "\107\344\001\002\000\006\075\ufef5\104\ufef5\001\002\000" +
    "\006\075\ufeef\104\346\001\002\000\036\041\026\042\015" +
    "\043\042\044\014\045\054\073\ufef3\074\ufef3\075\ufef1\107" +
    "\ufef3\110\ufef3\111\ufef3\112\ufef3\113\ufef3\114\ufef3\001\002" +
    "\000\004\075\ufef4\001\002\000\004\075\ufef0\001\002\000" +
    "\012\075\uff01\077\uff01\103\uff01\104\uff01\001\002\000\052" +
    "\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6\056\ufee6\057" +
    "\ufee6\060\ufee6\061\ufee6\062\ufee6\064\ufee6\065\ufee6\066\ufee6" +
    "\067\ufee6\070\ufee6\071\ufee6\072\ufee6\075\ufee6\077\ufee6\104" +
    "\ufee6\001\002\000\022\073\ufedb\074\ufedb\107\ufedb\110\ufedb" +
    "\111\ufedb\112\ufedb\113\ufedb\114\ufedb\001\002\000\052\051" +
    "\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0" +
    "\060\ufee0\061\ufee0\062\ufee0\064\ufee0\065\ufee0\066\ufee0\067" +
    "\ufee0\070\ufee0\071\ufee0\072\ufee0\075\ufee0\077\ufee0\104\ufee0" +
    "\001\002\000\006\075\ufeef\104\346\001\002\000\052\051" +
    "\ufee8\052\ufee8\053\ufee8\054\ufee8\055\ufee8\056\ufee8\057\ufee8" +
    "\060\ufee8\061\ufee8\062\ufee8\064\ufee8\065\ufee8\066\ufee8\067" +
    "\ufee8\070\ufee8\071\ufee8\072\ufee8\075\ufee8\077\ufee8\104\ufee8" +
    "\001\002\000\022\073\ufede\074\ufede\107\ufede\110\ufede\111" +
    "\ufede\112\ufede\113\ufede\114\ufede\001\002\000\054\051\ufeee" +
    "\052\ufeee\053\ufeee\054\ufeee\055\ufeee\056\ufeee\057\ufeee\060" +
    "\ufeee\061\ufeee\062\ufeee\064\ufeee\065\ufeee\066\ufeee\067\ufeee" +
    "\070\ufeee\071\ufeee\072\ufeee\075\ufeee\076\u0100\077\ufeee\104" +
    "\ufeee\001\002\000\052\051\ufee2\052\ufee2\053\ufee2\054\ufee2" +
    "\055\ufee2\056\ufee2\057\ufee2\060\ufee2\061\ufee2\062\ufee2\064" +
    "\ufee2\065\ufee2\066\ufee2\067\ufee2\070\ufee2\071\ufee2\072\ufee2" +
    "\075\ufee2\077\ufee2\104\ufee2\001\002\000\052\051\ufee4\052" +
    "\ufee4\053\ufee4\054\ufee4\055\ufee4\056\ufee4\057\ufee4\060\ufee4" +
    "\061\ufee4\062\ufee4\064\ufee4\065\ufee4\066\ufee4\067\ufee4\070" +
    "\ufee4\071\ufee4\072\ufee4\075\ufee4\077\ufee4\104\ufee4\001\002" +
    "\000\052\051\115\052\110\053\112\054\116\055\113\056" +
    "\111\057\160\060\157\061\154\062\162\064\155\065\156" +
    "\066\161\067\164\070\153\071\152\072\165\075\ufecf\077" +
    "\ufecf\104\ufecf\001\002\000\022\073\ufed5\074\ufed5\107\ufed5" +
    "\110\ufed5\111\ufed5\112\ufed5\113\ufed5\114\ufed5\001\002\000" +
    "\022\073\ufed1\074\ufed1\107\ufed1\110\ufed1\111\ufed1\112\ufed1" +
    "\113\ufed1\114\ufed1\001\002\000\022\073\ufed3\074\ufed3\107" +
    "\ufed3\110\ufed3\111\ufed3\112\ufed3\113\ufed3\114\ufed3\001\002" +
    "\000\010\075\ufee3\077\ufee3\104\ufee3\001\002\000\022\073" +
    "\353\074\357\107\360\110\352\111\362\112\356\113\361" +
    "\114\354\001\002\000\010\075\ufed2\077\ufed2\104\ufed2\001" +
    "\002\000\022\073\353\074\357\107\360\110\352\111\362" +
    "\112\356\113\361\114\354\001\002\000\010\075\ufed0\077" +
    "\ufed0\104\ufed0\001\002\000\022\073\353\074\357\107\360" +
    "\110\352\111\362\112\356\113\361\114\354\001\002\000" +
    "\010\075\ufed4\077\ufed4\104\ufed4\001\002\000\052\051\115" +
    "\052\110\053\112\054\116\055\113\056\111\057\160\060" +
    "\157\061\154\062\162\064\155\065\156\066\161\067\164" +
    "\070\153\071\152\072\165\075\ufecf\077\ufecf\104\ufecf\001" +
    "\002\000\010\075\ufee1\077\ufee1\104\ufee1\001\002\000\022" +
    "\073\ufeec\074\ufeec\107\ufeec\110\ufeec\111\ufeec\112\ufeec\113" +
    "\ufeec\114\ufeec\001\002\000\052\051\115\052\110\053\112" +
    "\054\116\055\113\056\111\057\160\060\157\061\154\062" +
    "\162\064\155\065\156\066\161\067\164\070\153\071\152" +
    "\072\165\075\ufecf\077\ufecf\104\ufecf\001\002\000\010\075" +
    "\ufeed\077\ufeed\104\ufeed\001\002\000\022\073\353\074\357" +
    "\107\360\110\352\111\362\112\356\113\361\114\354\001" +
    "\002\000\004\077\ufeeb\001\002\000\004\077\u0106\001\002" +
    "\000\054\051\ufed6\052\ufed6\053\ufed6\054\ufed6\055\ufed6\056" +
    "\ufed6\057\ufed6\060\ufed6\061\ufed6\062\ufed6\064\ufed6\065\ufed6" +
    "\066\ufed6\067\ufed6\070\ufed6\071\ufed6\072\ufed6\075\ufed6\076" +
    "\u0108\077\ufed6\104\ufed6\001\002\000\052\051\ufeea\052\ufeea" +
    "\053\ufeea\054\ufeea\055\ufeea\056\ufeea\057\ufeea\060\ufeea\061" +
    "\ufeea\062\ufeea\064\ufeea\065\ufeea\066\ufeea\067\ufeea\070\ufeea" +
    "\071\ufeea\072\ufeea\075\ufeea\077\ufeea\104\ufeea\001\002\000" +
    "\022\073\ufed9\074\ufed9\107\ufed9\110\ufed9\111\ufed9\112\ufed9" +
    "\113\ufed9\114\ufed9\001\002\000\022\073\353\074\357\107" +
    "\360\110\352\111\362\112\356\113\361\114\354\001\002" +
    "\000\004\077\ufed8\001\002\000\004\077\u010c\001\002\000" +
    "\052\051\ufed7\052\ufed7\053\ufed7\054\ufed7\055\ufed7\056\ufed7" +
    "\057\ufed7\060\ufed7\061\ufed7\062\ufed7\064\ufed7\065\ufed7\066" +
    "\ufed7\067\ufed7\070\ufed7\071\ufed7\072\ufed7\075\ufed7\077\ufed7" +
    "\104\ufed7\001\002\000\052\051\115\052\110\053\112\054" +
    "\116\055\113\056\111\057\160\060\157\061\154\062\162" +
    "\064\155\065\156\066\161\067\164\070\153\071\152\072" +
    "\165\075\ufecf\077\ufecf\104\ufecf\001\002\000\010\075\ufee9" +
    "\077\ufee9\104\ufee9\001\002\000\022\073\353\074\357\107" +
    "\360\110\352\111\362\112\356\113\361\114\354\001\002" +
    "\000\004\075\u0111\001\002\000\052\051\ufedd\052\ufedd\053" +
    "\ufedd\054\ufedd\055\ufedd\056\ufedd\057\ufedd\060\ufedd\061\ufedd" +
    "\062\ufedd\064\ufedd\065\ufedd\066\ufedd\067\ufedd\070\ufedd\071" +
    "\ufedd\072\ufedd\075\ufedd\077\ufedd\104\ufedd\001\002\000\052" +
    "\051\115\052\110\053\112\054\116\055\113\056\111\057" +
    "\160\060\157\061\154\062\162\064\155\065\156\066\161" +
    "\067\164\070\153\071\152\072\165\075\ufecf\077\ufecf\104" +
    "\ufecf\001\002\000\010\075\ufedc\077\ufedc\104\ufedc\001\002" +
    "\000\052\051\115\052\110\053\112\054\116\055\113\056" +
    "\111\057\160\060\157\061\154\062\162\064\155\065\156" +
    "\066\161\067\164\070\153\071\152\072\165\075\ufecf\077" +
    "\ufecf\104\ufecf\001\002\000\010\075\ufee7\077\ufee7\104\ufee7" +
    "\001\002\000\004\075\ufef2\001\002\000\052\051\115\052" +
    "\110\053\112\054\116\055\113\056\111\057\160\060\157" +
    "\061\154\062\162\064\155\065\156\066\161\067\164\070" +
    "\153\071\152\072\165\075\ufecf\077\ufecf\104\ufecf\001\002" +
    "\000\010\075\ufedf\077\ufedf\104\ufedf\001\002\000\022\073" +
    "\353\074\357\107\360\110\352\111\362\112\356\113\361" +
    "\114\354\001\002\000\010\075\ufeda\077\ufeda\104\ufeda\001" +
    "\002\000\052\051\115\052\110\053\112\054\116\055\113" +
    "\056\111\057\160\060\157\061\154\062\162\064\155\065" +
    "\156\066\161\067\164\070\153\071\152\072\165\075\ufecf" +
    "\077\ufecf\104\ufecf\001\002\000\010\075\ufee5\077\ufee5\104" +
    "\ufee5\001\002\000\034\006\306\025\275\027\277\030\302" +
    "\032\310\073\273\074\300\107\303\110\272\111\307\112" +
    "\301\113\304\114\274\001\002\000\004\077\uff9f\001\002" +
    "\000\004\077\u0120\001\002\000\056\051\uff89\052\uff89\053" +
    "\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89" +
    "\062\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071" +
    "\uff89\072\uff89\075\uff89\076\u0122\077\uff89\103\uff89\104\uff89" +
    "\001\002\000\054\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\075" +
    "\uff9e\077\uff9e\103\uff9e\104\uff9e\001\002\000\034\006\uff8c" +
    "\025\uff8c\027\uff8c\030\uff8c\032\uff8c\073\uff8c\074\uff8c\107" +
    "\uff8c\110\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c\001\002" +
    "\000\034\006\306\025\275\027\277\030\302\032\310\073" +
    "\273\074\300\107\303\110\272\111\307\112\301\113\304" +
    "\114\274\001\002\000\004\077\uff8b\001\002\000\004\077" +
    "\u0126\001\002\000\054\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\064" +
    "\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a" +
    "\075\uff8a\077\uff8a\103\uff8a\104\uff8a\001\002\000\054\051" +
    "\115\052\110\053\112\054\116\055\113\056\111\057\160" +
    "\060\157\061\154\062\162\064\155\065\156\066\161\067" +
    "\164\070\153\071\152\072\165\075\uff82\077\uff82\103\uff82" +
    "\104\uff82\001\002\000\012\075\uff9d\077\uff9d\103\uff9d\104" +
    "\uff9d\001\002\000\012\075\uffa1\077\uffa1\103\uffa1\104\uffa1" +
    "\001\002\000\004\074\u012b\001\002\000\036\041\026\042" +
    "\015\043\042\044\014\045\054\073\ufef3\074\ufef3\075\ufef1" +
    "\107\ufef3\110\ufef3\111\ufef3\112\ufef3\113\ufef3\114\ufef3\001" +
    "\002\000\004\075\u012d\001\002\000\012\075\ufefa\077\ufefa" +
    "\103\ufefa\104\ufefa\001\002\000\054\051\115\052\110\053" +
    "\112\054\116\055\113\056\111\057\160\060\157\061\154" +
    "\062\162\064\155\065\156\066\161\067\164\070\153\071" +
    "\152\072\165\075\uff82\077\uff82\103\uff82\104\uff82\001\002" +
    "\000\012\075\uff9b\077\uff9b\103\uff9b\104\uff9b\001\002\000" +
    "\034\006\306\025\275\027\277\030\302\032\310\073\273" +
    "\074\300\107\303\110\272\111\307\112\301\113\304\114" +
    "\274\001\002\000\004\075\u0132\001\002\000\054\051\uff91" +
    "\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060" +
    "\uff91\061\uff91\062\uff91\064\uff91\065\uff91\066\uff91\067\uff91" +
    "\070\uff91\071\uff91\072\uff91\075\uff91\077\uff91\103\uff91\104" +
    "\uff91\001\002\000\054\051\115\052\110\053\112\054\116" +
    "\055\113\056\111\057\160\060\157\061\154\062\162\064" +
    "\155\065\156\066\161\067\164\070\153\071\152\072\165" +
    "\075\uff82\077\uff82\103\uff82\104\uff82\001\002\000\012\075" +
    "\uff90\077\uff90\103\uff90\104\uff90\001\002\000\004\074\u0136" +
    "\001\002\000\036\041\026\042\015\043\042\044\014\045" +
    "\054\073\ufef3\074\ufef3\075\ufef1\107\ufef3\110\ufef3\111\ufef3" +
    "\112\ufef3\113\ufef3\114\ufef3\001\002\000\004\075\u0138\001" +
    "\002\000\012\075\ufefc\077\ufefc\103\ufefc\104\ufefc\001\002" +
    "\000\004\075\uff56\001\002\000\004\074\u013b\001\002\000" +
    "\004\115\u013c\001\002\000\004\104\ufeff\001\002\000\004" +
    "\104\u013e\001\002\000\036\041\026\042\015\043\042\044" +
    "\014\045\054\073\ufef3\074\ufef3\075\ufef1\107\ufef3\110\ufef3" +
    "\111\ufef3\112\ufef3\113\ufef3\114\ufef3\001\002\000\004\075" +
    "\u0140\001\002\000\012\075\ufefe\077\ufefe\103\ufefe\104\ufefe" +
    "\001\002\000\054\051\115\052\110\053\112\054\116\055" +
    "\113\056\111\057\160\060\157\061\154\062\162\064\155" +
    "\065\156\066\161\067\164\070\153\071\152\072\165\075" +
    "\uff82\077\uff82\103\uff82\104\uff82\001\002\000\012\075\uff93" +
    "\077\uff93\103\uff93\104\uff93\001\002\000\034\006\306\025" +
    "\275\027\277\030\302\032\310\073\273\074\300\107\303" +
    "\110\272\111\307\112\301\113\304\114\274\001\002\000" +
    "\012\075\uff8e\077\uff8e\103\uff8e\104\uff8e\001\002\000\054" +
    "\051\115\052\110\053\112\054\116\055\113\056\111\057" +
    "\160\060\157\061\154\062\162\064\155\065\156\066\161" +
    "\067\164\070\153\071\152\072\165\075\uff82\077\uff82\103" +
    "\uff82\104\uff82\001\002\000\012\075\uff99\077\uff99\103\uff99" +
    "\104\uff99\001\002\000\004\103\uff11\001\002\000\004\102" +
    "\u0149\001\002\000\104\002\uff0b\003\uff0b\004\uff0b\006\uff0b" +
    "\007\uff0b\011\uff0b\012\uff0b\013\uff0b\014\uff0b\015\uff0b\016" +
    "\uff0b\017\uff0b\020\uff0b\021\uff0b\022\uff0b\023\uff0b\024\uff0b" +
    "\025\uff0b\026\uff0b\027\uff0b\030\uff0b\031\uff0b\032\uff0b\040" +
    "\uff0b\041\uff0b\042\uff0b\043\uff0b\044\uff0b\045\uff0b\100\uff0b" +
    "\101\uff0b\106\uff0b\107\uff0b\001\002\000\004\074\u014b\001" +
    "\002\000\050\006\uff57\025\uff57\027\uff57\030\uff57\032\uff57" +
    "\041\026\042\015\043\042\044\014\045\054\073\uff57\074" +
    "\uff57\075\uff55\107\uff57\110\uff57\111\uff57\112\uff57\113\uff57" +
    "\114\uff57\001\002\000\004\075\u014d\001\002\000\004\103" +
    "\uff1a\001\002\000\004\100\u014f\001\002\000\102\003\034" +
    "\004\023\006\027\007\uffd5\011\011\012\021\013\056\014" +
    "\041\015\004\016\016\017\051\020\055\021\022\022\052" +
    "\023\025\024\035\025\033\026\053\027\050\030\046\031" +
    "\007\032\020\040\032\041\026\042\015\043\042\044\014" +
    "\045\054\100\013\101\uffe0\106\036\107\031\001\002\000" +
    "\004\101\u0151\001\002\000\104\002\uffe0\003\034\004\023" +
    "\006\027\007\uffd5\011\011\012\021\013\056\014\041\015" +
    "\004\016\016\017\051\020\055\021\022\022\052\023\025" +
    "\024\035\025\033\026\053\027\050\030\046\031\007\032" +
    "\020\040\032\041\026\042\015\043\042\044\014\045\054" +
    "\100\013\101\uffe0\106\036\107\031\001\002\000\006\002" +
    "\ufff1\101\ufff1\001\002\000\004\074\u0154\001\002\000\050" +
    "\006\uff57\025\uff57\027\uff57\030\uff57\032\uff57\041\026\042" +
    "\015\043\042\044\014\045\054\073\uff57\074\uff57\075\uff55" +
    "\107\uff57\110\uff57\111\uff57\112\uff57\113\uff57\114\uff57\001" +
    "\002\000\004\075\u0156\001\002\000\004\103\uff18\001\002" +
    "\000\104\002\uffe0\003\034\004\023\006\027\007\uffd5\011" +
    "\011\012\021\013\056\014\041\015\004\016\016\017\051" +
    "\020\055\021\022\022\052\023\025\024\035\025\033\026" +
    "\053\027\050\030\046\031\007\032\020\040\032\041\026" +
    "\042\015\043\042\044\014\045\054\100\013\101\uffe0\106" +
    "\036\107\031\001\002\000\006\002\uffe7\101\uffe7\001\002" +
    "\000\004\100\u015a\001\002\000\102\003\034\004\023\006" +
    "\027\007\uffd5\011\011\012\021\013\056\014\041\015\004" +
    "\016\016\017\051\020\055\021\022\022\052\023\025\024" +
    "\035\025\033\026\053\027\050\030\046\031\007\032\020" +
    "\040\032\041\026\042\015\043\042\044\014\045\054\100" +
    "\013\101\uffe0\106\036\107\031\001\002\000\004\101\u015c" +
    "\001\002\000\004\021\u015e\001\002\000\104\002\uffe0\003" +
    "\034\004\023\006\027\007\uffd5\011\011\012\021\013\056" +
    "\014\041\015\004\016\016\017\051\020\055\021\022\022" +
    "\052\023\025\024\035\025\033\026\053\027\050\030\046" +
    "\031\007\032\020\040\032\041\026\042\015\043\042\044" +
    "\014\045\054\100\013\101\uffe0\106\036\107\031\001\002" +
    "\000\004\074\uff1e\001\002\000\004\074\u0160\001\002\000" +
    "\024\063\uff1d\073\uff1d\074\uff1d\107\uff1d\110\uff1d\111\uff1d" +
    "\112\uff1d\113\uff1d\114\uff1d\001\002\000\024\063\072\073" +
    "\uff41\074\uff41\107\uff41\110\uff41\111\uff41\112\uff41\113\uff41" +
    "\114\uff41\001\002\000\004\075\u0163\001\002\000\104\002" +
    "\uff1c\003\uff1c\004\uff1c\006\uff1c\007\uff1c\011\uff1c\012\uff1c" +
    "\013\uff1c\014\uff1c\015\uff1c\016\uff1c\017\uff1c\020\uff1c\021" +
    "\uff1c\022\uff1c\023\uff1c\024\uff1c\025\uff1c\026\uff1c\027\uff1c" +
    "\030\uff1c\031\uff1c\032\uff1c\040\uff1c\041\uff1c\042\uff1c\043" +
    "\uff1c\044\uff1c\045\uff1c\100\uff1c\101\uff1c\106\uff1c\107\uff1c" +
    "\001\002\000\006\002\uffef\101\uffef\001\002\000\104\002" +
    "\uffe0\003\034\004\023\006\027\007\uffd5\011\011\012\021" +
    "\013\056\014\041\015\004\016\016\017\051\020\055\021" +
    "\022\022\052\023\025\024\035\025\033\026\053\027\050" +
    "\030\046\031\007\032\020\040\032\041\026\042\015\043" +
    "\042\044\014\045\054\100\013\101\uffe0\106\036\107\031" +
    "\001\002\000\006\002\uffe5\101\uffe5\001\002\000\004\074" +
    "\u0168\001\002\000\022\073\077\074\102\107\104\110\076" +
    "\111\106\112\103\113\105\114\100\001\002\000\004\075" +
    "\u016a\001\002\000\004\100\uff51\001\002\000\004\100\u016c" +
    "\001\002\000\102\003\034\004\023\006\027\007\uffd5\011" +
    "\011\012\021\013\056\014\041\015\004\016\016\017\051" +
    "\020\055\021\022\022\052\023\025\024\035\025\033\026" +
    "\053\027\050\030\046\031\007\032\020\040\032\041\026" +
    "\042\015\043\042\044\014\045\054\100\013\101\uffe0\106" +
    "\036\107\031\001\002\000\004\101\u016e\001\002\000\104" +
    "\002\uffe0\003\034\004\023\006\027\007\uffd5\011\011\012" +
    "\021\013\056\014\041\015\004\016\016\017\051\020\055" +
    "\021\022\022\052\023\025\024\035\025\033\026\053\027" +
    "\050\030\046\031\007\032\020\040\032\041\026\042\015" +
    "\043\042\044\014\045\054\100\013\101\uffe0\106\036\107" +
    "\031\001\002\000\006\002\ufff3\101\ufff3\001\002\000\004" +
    "\100\u0171\001\002\000\102\003\034\004\023\006\027\007" +
    "\uffd5\011\011\012\021\013\056\014\041\015\004\016\016" +
    "\017\051\020\055\021\022\022\052\023\025\024\035\025" +
    "\033\026\053\027\050\030\046\031\007\032\020\040\032" +
    "\041\026\042\015\043\042\044\014\045\054\100\013\101" +
    "\uffe0\106\036\107\031\001\002\000\004\101\u0173\001\002" +
    "\000\104\002\uffe0\003\034\004\023\006\027\007\uffd5\011" +
    "\011\012\021\013\056\014\041\015\004\016\016\017\051" +
    "\020\055\021\022\022\052\023\025\024\035\025\033\026" +
    "\053\027\050\030\046\031\007\032\020\040\032\041\026" +
    "\042\015\043\042\044\014\045\054\100\013\101\uffe0\106" +
    "\036\107\031\001\002\000\006\002\ufff5\101\ufff5\001\002" +
    "\000\104\002\uffe0\003\034\004\023\006\027\007\uffd5\011" +
    "\011\012\021\013\056\014\041\015\004\016\016\017\051" +
    "\020\055\021\022\022\052\023\025\024\035\025\033\026" +
    "\053\027\050\030\046\031\007\032\020\040\032\041\026" +
    "\042\015\043\042\044\014\045\054\100\013\101\uffe0\106" +
    "\036\107\031\001\002\000\006\002\uffff\101\uffff\001\002" +
    "\000\034\006\306\025\275\027\277\030\302\032\310\073" +
    "\273\074\300\107\303\110\272\111\307\112\301\113\304" +
    "\114\274\001\002\000\004\103\uff0f\001\002\000\006\002" +
    "\uffe1\101\uffe1\001\002\000\004\074\u017b\001\002\000\004" +
    "\115\u017c\001\002\000\004\104\uff14\001\002\000\004\104" +
    "\u017e\001\002\000\050\006\uff57\025\uff57\027\uff57\030\uff57" +
    "\032\uff57\041\026\042\015\043\042\044\014\045\054\073" +
    "\uff57\074\uff57\075\uff55\107\uff57\110\uff57\111\uff57\112\uff57" +
    "\113\uff57\114\uff57\001\002\000\004\075\u0180\001\002\000" +
    "\004\103\uff13\001\002\000\004\103\u0182\001\002\000\104" +
    "\002\uff09\003\uff09\004\uff09\006\uff09\007\uff09\011\uff09\012" +
    "\uff09\013\uff09\014\uff09\015\uff09\016\uff09\017\uff09\020\uff09" +
    "\021\uff09\022\uff09\023\uff09\024\uff09\025\uff09\026\uff09\027" +
    "\uff09\030\uff09\031\uff09\032\uff09\040\uff09\041\uff09\042\uff09" +
    "\043\uff09\044\uff09\045\uff09\100\uff09\101\uff09\106\uff09\107" +
    "\uff09\001\002\000\004\103\uff08\001\002\000\004\074\u0195" +
    "\001\002\000\004\076\u018d\001\002\000\004\105\u018b\001" +
    "\002\000\004\050\u0189\001\002\000\004\103\uff07\001\002" +
    "\000\034\006\306\025\275\027\277\030\302\032\310\073" +
    "\273\074\300\107\303\110\272\111\307\112\301\113\304" +
    "\114\274\001\002\000\004\103\uff6c\001\002\000\034\006" +
    "\306\025\275\027\277\030\302\032\310\073\273\074\300" +
    "\107\303\110\272\111\307\112\301\113\304\114\274\001" +
    "\002\000\004\103\uff6a\001\002\000\022\073\uff68\074\uff68" +
    "\107\uff68\110\uff68\111\uff68\112\uff68\113\uff68\114\uff68\001" +
    "\002\000\022\073\077\074\102\107\104\110\076\111\106" +
    "\112\103\113\105\114\100\001\002\000\004\077\uff67\001" +
    "\002\000\004\077\u0191\001\002\000\006\076\251\105\uff62" +
    "\001\002\000\004\105\u0193\001\002\000\034\006\306\025" +
    "\275\027\277\030\302\032\310\073\273\074\300\107\303" +
    "\110\272\111\307\112\301\113\304\114\274\001\002\000" +
    "\004\103\uff66\001\002\000\050\006\uff57\025\uff57\027\uff57" +
    "\030\uff57\032\uff57\041\026\042\015\043\042\044\014\045" +
    "\054\073\uff57\074\uff57\075\uff55\107\uff57\110\uff57\111\uff57" +
    "\112\uff57\113\uff57\114\uff57\001\002\000\004\075\u0197\001" +
    "\002\000\006\100\u019a\103\u0198\001\002\000\104\002\ufef6" +
    "\003\ufef6\004\ufef6\006\ufef6\007\ufef6\011\ufef6\012\ufef6\013" +
    "\ufef6\014\ufef6\015\ufef6\016\ufef6\017\ufef6\020\ufef6\021\ufef6" +
    "\022\ufef6\023\ufef6\024\ufef6\025\ufef6\026\ufef6\027\ufef6\030" +
    "\ufef6\031\ufef6\032\ufef6\040\ufef6\041\ufef6\042\ufef6\043\ufef6" +
    "\044\ufef6\045\ufef6\100\ufef6\101\ufef6\106\ufef6\107\ufef6\001" +
    "\002\000\104\002\ufef8\003\ufef8\004\ufef8\006\ufef8\007\ufef8" +
    "\011\ufef8\012\ufef8\013\ufef8\014\ufef8\015\ufef8\016\ufef8\017" +
    "\ufef8\020\ufef8\021\ufef8\022\ufef8\023\ufef8\024\ufef8\025\ufef8" +
    "\026\ufef8\027\ufef8\030\ufef8\031\ufef8\032\ufef8\040\ufef8\041" +
    "\ufef8\042\ufef8\043\ufef8\044\ufef8\045\ufef8\100\ufef8\101\ufef8" +
    "\106\ufef8\107\ufef8\001\002\000\102\003\034\004\023\006" +
    "\027\007\uffd5\011\011\012\021\013\056\014\041\015\004" +
    "\016\016\017\051\020\055\021\022\022\052\023\025\024" +
    "\035\025\033\026\053\027\050\030\046\031\007\032\020" +
    "\040\032\041\026\042\015\043\042\044\014\045\054\100" +
    "\013\101\uffe0\106\036\107\031\001\002\000\004\101\u019c" +
    "\001\002\000\104\002\ufef7\003\ufef7\004\ufef7\006\ufef7\007" +
    "\ufef7\011\ufef7\012\ufef7\013\ufef7\014\ufef7\015\ufef7\016\ufef7" +
    "\017\ufef7\020\ufef7\021\ufef7\022\ufef7\023\ufef7\024\ufef7\025" +
    "\ufef7\026\ufef7\027\ufef7\030\ufef7\031\ufef7\032\ufef7\040\ufef7" +
    "\041\ufef7\042\ufef7\043\ufef7\044\ufef7\045\ufef7\100\ufef7\101" +
    "\ufef7\106\ufef7\107\ufef7\001\002\000\004\074\uff5b\001\002" +
    "\000\004\074\u019f\001\002\000\050\006\uff57\025\uff57\027" +
    "\uff57\030\uff57\032\uff57\041\026\042\015\043\042\044\014" +
    "\045\054\073\uff57\074\uff57\075\uff55\107\uff57\110\uff57\111" +
    "\uff57\112\uff57\113\uff57\114\uff57\001\002\000\004\075\u01a1" +
    "\001\002\000\004\100\uff5a\001\002\000\004\007\u01ad\001" +
    "\002\000\004\074\uff5d\001\002\000\004\107\u01a5\001\002" +
    "\000\004\074\uff61\001\002\000\004\074\u01a7\001\002\000" +
    "\050\006\uff57\025\uff57\027\uff57\030\uff57\032\uff57\041\026" +
    "\042\015\043\042\044\014\045\054\073\uff57\074\uff57\075" +
    "\uff55\107\uff57\110\uff57\111\uff57\112\uff57\113\uff57\114\uff57" +
    "\001\002\000\004\075\u01a9\001\002\000\004\100\uff60\001" +
    "\002\000\004\074\u01ab\001\002\000\004\075\u01ac\001\002" +
    "\000\004\100\uff5c\001\002\000\014\041\026\042\015\043" +
    "\042\044\014\045\054\001\002\000\004\103\uffd6\001\002" +
    "\000\006\010\u01b1\107\u01b0\001\002\000\010\103\uffd3\104" +
    "\uffd3\105\uffd3\001\002\000\004\107\u01b2\001\002\000\006" +
    "\076\uffd1\104\uffd1\001\002\000\006\076\uffc6\104\u01b4\001" +
    "\002\000\004\107\u01d4\001\002\000\004\076\u01b6\001\002" +
    "\000\022\073\uffd0\074\uffd0\107\uffd0\110\uffd0\111\uffd0\112" +
    "\uffd0\113\uffd0\114\uffd0\001\002\000\022\073\077\074\102" +
    "\107\104\110\076\111\106\112\103\113\105\114\100\001" +
    "\002\000\004\077\uffcf\001\002\000\004\077\u01ba\001\002" +
    "\000\010\076\u01bc\103\uffc2\105\uffc2\001\002\000\006\103" +
    "\uff79\105\u01c2\001\002\000\022\073\uffc5\074\uffc5\107\uffc5" +
    "\110\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\001\002\000" +
    "\022\073\077\074\102\107\104\110\076\111\106\112\103" +
    "\113\105\114\100\001\002\000\004\077\uffc4\001\002\000" +
    "\004\077\u01c0\001\002\000\006\103\uffc3\105\uffc3\001\002" +
    "\000\004\103\uffce\001\002\000\006\100\uff7b\103\uff7b\001" +
    "\002\000\006\100\u01c5\103\uff76\001\002\000\004\103\uff7a" +
    "\001\002\000\030\073\uff78\074\uff78\100\uff78\101\uff78\104" +
    "\uff78\107\uff78\110\uff78\111\uff78\112\uff78\113\uff78\114\uff78" +
    "\001\002\000\030\073\uff74\074\uff74\100\u01c5\101\uff76\104" +
    "\uff76\107\uff74\110\uff74\111\uff74\112\uff74\113\uff74\114\uff74" +
    "\001\002\000\004\101\u01d3\001\002\000\006\101\uff71\104" +
    "\u01d0\001\002\000\022\073\077\074\102\107\104\110\076" +
    "\111\106\112\103\113\105\114\100\001\002\000\006\101" +
    "\uff6e\104\u01cb\001\002\000\022\073\uff70\074\uff70\107\uff70" +
    "\110\uff70\111\uff70\112\uff70\113\uff70\114\uff70\001\002\000" +
    "\004\101\uff73\001\002\000\022\073\077\074\102\107\104" +
    "\110\076\111\106\112\103\113\105\114\100\001\002\000" +
    "\006\101\uff6e\104\u01cb\001\002\000\004\101\uff6f\001\002" +
    "\000\006\100\u01c5\101\uff76\001\002\000\004\101\uff75\001" +
    "\002\000\004\101\uff72\001\002\000\010\101\uff77\103\uff77" +
    "\104\uff77\001\002\000\012\076\uffc8\103\uffc8\104\uffc8\105" +
    "\uffc8\001\002\000\012\076\uffc6\103\uffc6\104\u01b4\105\uffc6" +
    "\001\002\000\010\076\uffc7\103\uffc7\105\uffc7\001\002\000" +
    "\010\103\uffc6\104\u01b4\105\uffc6\001\002\000\006\103\uffbf" +
    "\105\u01da\001\002\000\004\103\uffd2\001\002\000\034\006" +
    "\uffc1\025\uffc1\027\uffc1\030\uffc1\032\uffc1\073\uffc1\074\uffc1" +
    "\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\114\uffc1\001" +
    "\002\000\034\006\306\025\275\027\277\030\302\032\310" +
    "\073\273\074\300\107\303\110\272\111\307\112\301\113" +
    "\304\114\274\001\002\000\004\103\uffc0\001\002\000\004" +
    "\103\u01de\001\002\000\104\002\uffe0\003\034\004\023\006" +
    "\027\007\uffd5\011\011\012\021\013\056\014\041\015\004" +
    "\016\016\017\051\020\055\021\022\022\052\023\025\024" +
    "\035\025\033\026\053\027\050\030\046\031\007\032\020" +
    "\040\032\041\026\042\015\043\042\044\014\045\054\100" +
    "\013\101\uffe0\106\036\107\031\001\002\000\006\002\uffed" +
    "\101\uffed\001\002\000\004\103\uffd4\001\002\000\006\005" +
    "\uffdf\100\uffdf\001\002\000\006\005\u01e3\100\uffdb\001\002" +
    "\000\004\107\u01e6\001\002\000\004\100\u01e5\001\002\000" +
    "\102\003\uffde\004\uffde\006\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\100\uffde\101\uffde\106\uffde\107\uffde" +
    "\001\002\000\006\100\uffdd\104\uffdd\001\002\000\006\100" +
    "\uffd8\104\u01e8\001\002\000\004\107\u01ea\001\002\000\004" +
    "\100\uffdc\001\002\000\006\100\uffda\104\uffda\001\002\000" +
    "\006\100\uffd8\104\u01e8\001\002\000\004\100\uffd9\001\002" +
    "\000\004\074\u01ee\001\002\000\024\063\uff2d\073\uff2d\074" +
    "\uff2d\107\uff2d\110\uff2d\111\uff2d\112\uff2d\113\uff2d\114\uff2d" +
    "\001\002\000\024\063\072\073\uff41\074\uff41\107\uff41\110" +
    "\uff41\111\uff41\112\uff41\113\uff41\114\uff41\001\002\000\004" +
    "\075\u01f1\001\002\000\004\100\uff2c\001\002\000\004\074" +
    "\u01f3\001\002\000\004\075\u01f4\001\002\000\004\100\uff5e" +
    "\001\002\000\004\002\001\001\002\000\104\002\uffe0\003" +
    "\034\004\023\006\027\007\uffd5\011\011\012\021\013\056" +
    "\014\041\015\004\016\016\017\051\020\055\021\022\022" +
    "\052\023\025\024\035\025\033\026\053\027\050\030\046" +
    "\031\007\032\020\040\032\041\026\042\015\043\042\044" +
    "\014\045\054\100\013\101\uffe0\106\036\107\031\001\002" +
    "\000\006\002\ufffd\101\ufffd\001\002\000\004\102\u01f9\001" +
    "\002\000\004\100\u01fa\001\002\000\014\034\ufece\035\ufece" +
    "\036\ufece\037\ufece\106\ufece\001\002\000\014\034\u0200\035" +
    "\u01fd\036\u01fc\037\u01ff\106\u01fe\001\002\000\004\102\u021a" +
    "\001\002\000\004\102\u0214\001\002\000\014\034\u0200\035" +
    "\u01fd\036\u01fc\037\u01ff\106\u01fe\001\002\000\004\102\u020a" +
    "\001\002\000\004\102\u0204\001\002\000\004\101\u0202\001" +
    "\002\000\004\101\u0203\001\002\000\006\002\ufecd\101\ufecd" +
    "\001\002\000\004\110\u0205\001\002\000\006\101\ufecc\104" +
    "\ufecc\001\002\000\006\101\ufec3\104\u0207\001\002\000\014" +
    "\034\u0200\035\u01fd\036\u01fc\037\u01ff\106\u01fe\001\002\000" +
    "\004\101\ufecb\001\002\000\004\101\ufec4\001\002\000\004" +
    "\076\u020b\001\002\000\004\107\u020c\001\002\000\006\077" +
    "\ufebe\104\ufec0\001\002\000\004\077\u020e\001\002\000\006" +
    "\101\ufec3\104\u0207\001\002\000\004\101\ufec6\001\002\000" +
    "\004\104\u0211\001\002\000\004\107\u020c\001\002\000\004" +
    "\077\ufebf\001\002\000\004\101\ufec5\001\002\000\006\113" +
    "\u0217\114\u0215\001\002\000\006\101\ufec1\104\ufec1\001\002" +
    "\000\006\101\ufeca\104\ufeca\001\002\000\006\101\ufec2\104" +
    "\ufec2\001\002\000\006\101\ufec3\104\u0207\001\002\000\004" +
    "\101\ufec9\001\002\000\006\113\u0217\114\u0215\001\002\000" +
    "\006\101\ufec8\104\ufec8\001\002\000\006\101\ufec3\104\u0207" +
    "\001\002\000\004\101\ufec7\001\002\000\004\103\u021f\001" +
    "\002\000\104\002\uffe0\003\034\004\023\006\027\007\uffd5" +
    "\011\011\012\021\013\056\014\041\015\004\016\016\017" +
    "\051\020\055\021\022\022\052\023\025\024\035\025\033" +
    "\026\053\027\050\030\046\031\007\032\020\040\032\041" +
    "\026\042\015\043\042\044\014\045\054\100\013\101\uffe0" +
    "\106\036\107\031\001\002\000\006\002\ufff7\101\ufff7\001" +
    "\002\000\024\063\uff50\073\uff50\074\uff50\107\uff50\110\uff50" +
    "\111\uff50\112\uff50\113\uff50\114\uff50\001\002\000\024\063" +
    "\072\073\uff41\074\uff41\107\uff41\110\uff41\111\uff41\112\uff41" +
    "\113\uff41\114\uff41\001\002\000\004\075\u0224\001\002\000" +
    "\004\100\uff4f\001\002\000\004\103\u0226\001\002\000\104" +
    "\002\uffe0\003\034\004\023\006\027\007\uffd5\011\011\012" +
    "\021\013\056\014\041\015\004\016\016\017\051\020\055" +
    "\021\022\022\052\023\025\024\035\025\033\026\053\027" +
    "\050\030\046\031\007\032\020\040\032\041\026\042\015" +
    "\043\042\044\014\045\054\100\013\101\uffe0\106\036\107" +
    "\031\001\002\000\006\002\uffe3\101\uffe3\001\002\000\004" +
    "\074\u0229\001\002\000\050\006\uff57\025\uff57\027\uff57\030" +
    "\uff57\032\uff57\041\026\042\015\043\042\044\014\045\054" +
    "\073\uff57\074\uff57\075\uff55\107\uff57\110\uff57\111\uff57\112" +
    "\uff57\113\uff57\114\uff57\001\002\000\004\075\u022b\001\002" +
    "\000\004\103\uff16\001\002\000\004\103\u022d\001\002\000" +
    "\104\002\uffe0\003\034\004\023\006\027\007\uffd5\011\011" +
    "\012\021\013\056\014\041\015\004\016\016\017\051\020" +
    "\055\021\022\022\052\023\025\024\035\025\033\026\053" +
    "\027\050\030\046\031\007\032\020\040\032\041\026\042" +
    "\015\043\042\044\014\045\054\100\013\101\uffe0\106\036" +
    "\107\031\001\002\000\006\002\uffeb\101\uffeb\001\002\000" +
    "\004\103\u0230\001\002\000\104\002\uffe0\003\034\004\023" +
    "\006\027\007\uffd5\011\011\012\021\013\056\014\041\015" +
    "\004\016\016\017\051\020\055\021\022\022\052\023\025" +
    "\024\035\025\033\026\053\027\050\030\046\031\007\032" +
    "\020\040\032\041\026\042\015\043\042\044\014\045\054" +
    "\100\013\101\uffe0\106\036\107\031\001\002\000\006\002" +
    "\uffe9\101\uffe9\001\002\000\022\073\077\074\102\107\104" +
    "\110\076\111\106\112\103\113\105\114\100\001\002\000" +
    "\004\102\u0234\001\002\000\104\002\uff0d\003\uff0d\004\uff0d" +
    "\006\uff0d\007\uff0d\011\uff0d\012\uff0d\013\uff0d\014\uff0d\015" +
    "\uff0d\016\uff0d\017\uff0d\020\uff0d\021\uff0d\022\uff0d\023\uff0d" +
    "\024\uff0d\025\uff0d\026\uff0d\027\uff0d\030\uff0d\031\uff0d\032" +
    "\uff0d\040\uff0d\041\uff0d\042\uff0d\043\uff0d\044\uff0d\045\uff0d" +
    "\100\uff0d\101\uff0d\106\uff0d\107\uff0d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0232\000\042\002\016\003\060\006\057\013\027\025" +
    "\011\027\036\032\037\040\046\043\043\044\005\045\004" +
    "\046\042\052\007\063\044\065\056\115\023\001\001\000" +
    "\004\244\u0231\001\001\000\004\105\u022e\001\001\000\004" +
    "\104\u022b\001\001\000\004\237\u0227\001\001\000\004\110" +
    "\u0224\001\001\000\002\001\001\000\004\076\u021d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\073\u01f5\001\001\000\002\001\001\000\004\202\u01f1" +
    "\001\001\000\002\001\001\000\004\224\u01ec\001\001\000" +
    "\002\001\001\000\004\007\u01df\001\001\000\004\103\u01dc" +
    "\001\001\000\002\001\001\000\006\013\u01a3\114\u01a1\001" +
    "\001\000\002\001\001\000\012\172\u0186\173\u0185\174\u0184" +
    "\256\u0183\001\001\000\004\246\u0180\001\001\000\004\240" +
    "\u0179\001\001\000\042\002\u0178\003\060\006\057\013\027" +
    "\025\011\027\036\032\037\040\046\043\043\044\005\045" +
    "\004\046\042\052\007\063\044\065\056\115\023\001\001" +
    "\000\004\243\u0176\001\001\000\004\072\u0174\001\001\000" +
    "\004\077\u016f\001\001\000\004\100\u016a\001\001\000\004" +
    "\207\u0166\001\001\000\002\001\001\000\004\107\u0164\001" +
    "\001\000\004\102\u0158\001\001\000\004\106\u0156\001\001" +
    "\000\004\236\u0152\001\001\000\004\101\u014d\001\001\000" +
    "\004\235\u0149\001\001\000\004\245\u0147\001\001\000\002" +
    "\001\001\000\004\242\257\001\001\000\002\001\001\000" +
    "\004\221\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\064\001\001\000\004\074\061\001\001\000" +
    "\042\002\062\003\060\006\057\013\027\025\011\027\036" +
    "\032\037\040\046\043\043\044\005\045\004\046\042\052" +
    "\007\063\044\065\056\115\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\002\066\003" +
    "\060\006\057\013\027\025\011\027\036\032\037\040\046" +
    "\043\043\044\005\045\004\046\042\052\007\063\044\065" +
    "\056\115\023\001\001\000\002\001\001\000\004\211\070" +
    "\001\001\000\006\033\073\037\072\001\001\000\002\001" +
    "\001\000\004\012\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\211\001\001\000\004\141\207\001" +
    "\001\000\004\136\205\001\001\000\006\034\165\036\162" +
    "\001\001\000\004\137\144\001\001\000\004\132\142\001" +
    "\001\000\004\126\123\001\001\000\004\135\121\001\001" +
    "\000\004\134\106\001\001\000\006\014\113\016\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\144\117\001\001\000\004\012\120" +
    "\001\001\000\002\001\001\000\006\014\122\016\116\001" +
    "\001\000\002\001\001\000\006\014\141\016\116\001\001" +
    "\000\004\127\125\001\001\000\004\012\126\001\001\000" +
    "\004\130\127\001\001\000\002\001\001\000\004\024\131" +
    "\001\001\000\004\131\137\001\001\000\004\142\133\001" +
    "\001\000\004\012\134\001\001\000\004\143\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\140\016" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\143\016\116\001\001\000\002\001\001\000\004\012" +
    "\145\001\001\000\002\001\001\000\004\140\147\001\001" +
    "\000\006\014\150\016\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\215\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\212" +
    "\166\001\001\000\004\037\167\001\001\000\004\213\170" +
    "\001\001\000\004\012\171\001\001\000\004\214\172\001" +
    "\001\000\006\035\173\036\174\001\001\000\002\001\001" +
    "\000\004\220\175\001\001\000\006\033\176\037\072\001" +
    "\001\000\002\001\001\000\004\037\200\001\001\000\004" +
    "\216\201\001\001\000\004\012\202\001\001\000\004\217" +
    "\203\001\001\000\006\035\204\036\174\001\001\000\002" +
    "\001\001\000\006\014\206\016\116\001\001\000\002\001" +
    "\001\000\004\012\210\001\001\000\002\001\001\000\006" +
    "\014\212\016\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\216\061\215\001\001\000\004\042\220" +
    "\001\001\000\002\001\001\000\010\226\235\227\234\230" +
    "\233\001\001\000\002\001\001\000\004\222\222\001\001" +
    "\000\006\033\223\037\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\227\001\001\000\002\001\001" +
    "\000\004\223\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\237\001\001\000\002\001" +
    "\001\000\004\012\241\001\001\000\002\001\001\000\004" +
    "\231\243\001\001\000\004\012\244\001\001\000\004\232" +
    "\245\001\001\000\002\001\001\000\004\026\247\001\001" +
    "\000\002\001\001\000\004\177\251\001\001\000\004\012" +
    "\252\001\001\000\004\200\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\263\030\261\206\262" +
    "\001\001\000\002\001\001\000\006\047\275\053\304\001" +
    "\001\000\002\001\001\000\004\205\265\001\001\000\004" +
    "\031\267\001\001\000\010\013\263\030\270\206\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\152\u0144" +
    "\001\001\000\004\160\u0142\001\001\000\004\155\u0140\001" +
    "\001\000\004\252\u0139\001\001\000\004\031\u0138\001\001" +
    "\000\004\254\u0134\001\001\000\004\156\u012f\001\001\000" +
    "\004\151\u012d\001\001\000\004\255\u0129\001\001\000\006" +
    "\145\334\251\336\001\001\000\004\154\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\153\313\001\001" +
    "\000\004\247\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\314\034\316\036\315" +
    "\051\317\001\001\000\004\163\324\001\001\000\004\165" +
    "\322\001\001\000\004\164\320\001\001\000\002\001\001" +
    "\000\006\047\321\053\304\001\001\000\002\001\001\000" +
    "\006\047\323\053\304\001\001\000\002\001\001\000\006" +
    "\047\325\053\304\001\001\000\002\001\001\000\004\250" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\314\034\316\036\315\051\333\001" +
    "\001\000\002\001\001\000\012\016\314\034\316\036\315" +
    "\051\u0128\001\001\000\004\146\u011c\001\001\000\002\001" +
    "\001\000\010\013\342\054\341\260\340\001\001\000\004" +
    "\055\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\257\344\001\001\000\004\056\346\001\001\000\010" +
    "\013\342\054\347\260\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\266\u011a\001\001" +
    "\000\004\274\u0118\001\001\000\004\271\u0116\001\001\000" +
    "\004\056\u0115\001\001\000\004\265\u0113\001\001\000\004" +
    "\272\u010e\001\001\000\004\261\u0100\001\001\000\004\270" +
    "\375\001\001\000\004\267\362\001\001\000\012\016\363" +
    "\034\365\036\364\057\366\001\001\000\004\277\373\001" +
    "\001\000\004\301\371\001\001\000\004\300\367\001\001" +
    "\000\002\001\001\000\004\055\370\001\001\000\002\001" +
    "\001\000\004\055\372\001\001\000\002\001\001\000\004" +
    "\055\374\001\001\000\002\001\001\000\012\016\363\034" +
    "\365\036\364\057\376\001\001\000\002\001\001\000\004" +
    "\262\u0102\001\001\000\012\016\363\034\365\036\364\057" +
    "\u0101\001\001\000\002\001\001\000\004\055\u0103\001\001" +
    "\000\004\263\u0104\001\001\000\002\001\001\000\004\060" +
    "\u0106\001\001\000\004\264\u010c\001\001\000\004\275\u0108" +
    "\001\001\000\004\055\u0109\001\001\000\004\276\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\363" +
    "\034\365\036\364\057\u010d\001\001\000\002\001\001\000" +
    "\004\055\u010f\001\001\000\002\001\001\000\004\273\u0111" +
    "\001\001\000\012\016\363\034\365\036\364\057\u0112\001" +
    "\001\000\002\001\001\000\012\016\363\034\365\036\364" +
    "\057\u0114\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\363\034\365\036\364\057\u0117\001\001\000\002" +
    "\001\001\000\004\055\u0119\001\001\000\002\001\001\000" +
    "\012\016\363\034\365\036\364\057\u011b\001\001\000\002" +
    "\001\001\000\006\047\u011d\053\304\001\001\000\004\147" +
    "\u011e\001\001\000\002\001\001\000\004\050\u0120\001\001" +
    "\000\004\150\u0126\001\001\000\004\161\u0122\001\001\000" +
    "\006\047\u0123\053\304\001\001\000\004\162\u0124\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\314\034" +
    "\316\036\315\051\u0127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\342\054\u012b\260" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\314\034\316\036\315\051\u012e\001\001\000\002\001" +
    "\001\000\006\047\u0130\053\304\001\001\000\002\001\001" +
    "\000\004\157\u0132\001\001\000\012\016\314\034\316\036" +
    "\315\051\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\342\054\u0136\260\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\253\u013c\001\001\000\002\001" +
    "\001\000\010\013\342\054\u013e\260\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\314\034\316\036" +
    "\315\051\u0141\001\001\000\002\001\001\000\006\047\u0143" +
    "\053\304\001\001\000\002\001\001\000\012\016\314\034" +
    "\316\036\315\051\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\263\030\u014b\206\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\002" +
    "\u014f\003\060\006\057\013\027\025\011\027\036\032\037" +
    "\040\046\043\043\044\005\045\004\046\042\052\007\063" +
    "\044\065\056\115\023\001\001\000\002\001\001\000\042" +
    "\002\u0151\003\060\006\057\013\027\025\011\027\036\032" +
    "\037\040\046\043\043\044\005\045\004\046\042\052\007" +
    "\063\044\065\056\115\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\263\030\u0154\206\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\002\u0157\003" +
    "\060\006\057\013\027\025\011\027\036\032\037\040\046" +
    "\043\043\044\005\045\004\046\042\052\007\063\044\065" +
    "\056\115\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\002\u015a\003\060\006\057\013\027\025\011\027" +
    "\036\032\037\040\046\043\043\044\005\045\004\046\042" +
    "\052\007\063\044\065\056\115\023\001\001\000\002\001" +
    "\001\000\004\062\u015c\001\001\000\042\002\u0163\003\060" +
    "\006\057\013\027\025\011\027\036\032\037\040\046\043" +
    "\043\044\005\045\004\046\042\052\007\063\044\065\056" +
    "\115\023\001\001\000\004\233\u015e\001\001\000\002\001" +
    "\001\000\004\234\u0160\001\001\000\006\033\u0161\037\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\u0165\003\060\006\057\013\027\025\011" +
    "\027\036\032\037\040\046\043\043\044\005\045\004\046" +
    "\042\052\007\063\044\065\056\115\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0168\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\002\u016c\003\060\006\057\013\027\025\011\027\036\032" +
    "\037\040\046\043\043\044\005\045\004\046\042\052\007" +
    "\063\044\065\056\115\023\001\001\000\002\001\001\000" +
    "\042\002\u016e\003\060\006\057\013\027\025\011\027\036" +
    "\032\037\040\046\043\043\044\005\045\004\046\042\052" +
    "\007\063\044\065\056\115\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\002\u0171\003\060\006\057\013" +
    "\027\025\011\027\036\032\037\040\046\043\043\044\005" +
    "\045\004\046\042\052\007\063\044\065\056\115\023\001" +
    "\001\000\002\001\001\000\042\002\u0173\003\060\006\057" +
    "\013\027\025\011\027\036\032\037\040\046\043\043\044" +
    "\005\045\004\046\042\052\007\063\044\065\056\115\023" +
    "\001\001\000\002\001\001\000\042\002\u0175\003\060\006" +
    "\057\013\027\025\011\027\036\032\037\040\046\043\043" +
    "\044\005\045\004\046\042\052\007\063\044\065\056\115" +
    "\023\001\001\000\002\001\001\000\006\047\u0177\053\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\241\u017c\001\001\000\002" +
    "\001\001\000\010\013\263\030\u017e\206\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\u0189\053\304\001\001\000\002\001\001\000" +
    "\006\047\u018b\053\304\001\001\000\002\001\001\000\004" +
    "\175\u018d\001\001\000\004\012\u018e\001\001\000\004\176" +
    "\u018f\001\001\000\002\001\001\000\004\026\u0191\001\001" +
    "\000\002\001\001\000\006\047\u0193\053\304\001\001\000" +
    "\002\001\001\000\010\013\263\030\u0195\206\262\001\001" +
    "\000\002\001\001\000\004\064\u0198\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\002\u019a\003\060\006\057" +
    "\013\027\025\011\027\036\032\037\040\046\043\043\044" +
    "\005\045\004\046\042\052\007\063\044\065\056\115\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\204" +
    "\u019d\001\001\000\002\001\001\000\010\013\263\030\u019f" +
    "\206\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u01ad\001\001\000\004\203\u01a9\001\001\000\002" +
    "\001\001\000\004\201\u01a5\001\001\000\002\001\001\000" +
    "\010\013\263\030\u01a7\206\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u01ae\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\116\u01d6\001\001\000\002\001" +
    "\001\000\004\117\u01b2\001\001\000\004\010\u01b4\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\120\u01b6\001" +
    "\001\000\004\012\u01b7\001\001\000\004\121\u01b8\001\001" +
    "\000\002\001\001\000\004\023\u01ba\001\001\000\004\011" +
    "\u01c0\001\001\000\004\123\u01bc\001\001\000\004\012\u01bd" +
    "\001\001\000\004\124\u01be\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\166\u01c2\001\001" +
    "\000\004\017\u01c3\001\001\000\002\001\001\000\004\167" +
    "\u01c5\001\001\000\010\017\u01c7\020\u01c6\170\u01c8\001\001" +
    "\000\002\001\001\000\004\021\u01d0\001\001\000\004\012" +
    "\u01c9\001\001\000\004\022\u01cb\001\001\000\004\171\u01cc" +
    "\001\001\000\002\001\001\000\004\012\u01cd\001\001\000" +
    "\004\022\u01ce\001\001\000\002\001\001\000\004\017\u01d1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u01d4\001\001\000\004\010\u01d5\001\001" +
    "\000\002\001\001\000\004\010\u01d7\001\001\000\004\015" +
    "\u01d8\001\001\000\002\001\001\000\004\125\u01da\001\001" +
    "\000\006\047\u01db\053\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\002\u01de\003\060\006\057\013\027" +
    "\025\011\027\036\032\037\040\046\043\043\044\005\045" +
    "\004\046\042\052\007\063\044\065\056\115\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\111\u01e1\001" +
    "\001\000\004\004\u01e3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\112\u01e6\001\001\000" +
    "\004\005\u01e8\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u01ea\001\001\000\004\005\u01eb\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\225\u01ee\001\001" +
    "\000\006\033\u01ef\037\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\002\u01f6\003\060\006" +
    "\057\013\027\025\011\027\036\032\037\040\046\043\043" +
    "\044\005\045\004\046\042\052\007\063\044\065\056\115" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\302\u01fa\001\001\000\004\066\u0200\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\u0212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\303\u0205\001\001\000\004\067\u0207\001\001\000" +
    "\004\066\u0208\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\u020c\001\001\000\004\306" +
    "\u020f\001\001\000\002\001\001\000\004\067\u020e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\u0211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\u0215" +
    "\001\001\000\002\001\001\000\004\304\u0217\001\001\000" +
    "\002\001\001\000\004\067\u0218\001\001\000\002\001\001" +
    "\000\004\070\u021a\001\001\000\004\305\u021b\001\001\000" +
    "\004\067\u021c\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\002\u021f\003\060\006\057\013\027\025\011\027" +
    "\036\032\037\040\046\043\043\044\005\045\004\046\042" +
    "\052\007\063\044\065\056\115\023\001\001\000\002\001" +
    "\001\000\004\210\u0221\001\001\000\006\033\u0222\037\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\u0226\003\060\006\057\013\027\025\011" +
    "\027\036\032\037\040\046\043\043\044\005\045\004\046" +
    "\042\052\007\063\044\065\056\115\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\263\030\u0229\206" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\u022d\003\060\006\057\013\027\025" +
    "\011\027\036\032\037\040\046\043\043\044\005\045\004" +
    "\046\042\052\007\063\044\065\056\115\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\002\u0230\003\060" +
    "\006\057\013\027\025\011\027\036\032\037\040\046\043" +
    "\043\044\005\045\004\046\042\052\007\063\044\065\056" +
    "\115\023\001\001\000\002\001\001\000\004\012\u0232\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompiladorParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompiladorParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompiladorParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorSintaxis> erroresCom; 
    private List<Pista> pistas;
    private int cantidadIdentaciones;  
    Declaracion declaracionAct; 
    List<Expresion> valoresExpresion; 
    List<Expresion> valoresExpresion2;   
    boolean esDimension;
    Stack<Dimension> dimesiones;
    Stack<Expresion> expresionesArreglos;
    List<DeclDim> declaracionesDimension; 
    DeclDim declDimPadre;   
    boolean primerExpresion;
    boolean primerDeclDim;
    private Asignacion asignacionAct;
    private List<Instruccion> instruccionesFunciones;
    private Funcion funcionAct;
    private boolean dentroDeFuncion;
    private CondSi condisionSiAct;
    private Condicion condicionAct;
    private String insCond;
    private Para paraAct;
    private Mientras mientrasAct;
    private Stack<Mientras> desdesMientras;
    private SwitchC switchAct;
    private Lista listaAct;

	public CompiladorParser(CompiladorLexer lex) {
		super(lex);
        cantidadIdentaciones = 0;
        this.erroresCom = lex.getErroresCom();
        this.pistas = new ArrayList<>();
        this.esDimension = false;
        this.dimesiones = new Stack<>();
        this.desdesMientras = new Stack<>();
        this.expresionesArreglos = new Stack<>();   
        this.instruccionesFunciones = new ArrayList<>();
        this.dentroDeFuncion = false;
        this.listaAct = null;
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorSintaxis("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorSintaxis("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }         
    /*---------Getters & Setters---------*/

    public List<ErrorSintaxis> getErroresCom(){
        return this.erroresCom;
    }

    public List<Pista> getPistas(){
        return this.pistas;
    }
    
    /*---------Codigo Incrustado---------*/
    private void MasIdent(String val){
        int valor = Integer.parseInt(val);
        this.cantidadIdentaciones += valor;
    }

    private void cerrarIdent(){
        this.cantidadIdentaciones = 0;
    }

    private void crearPista(String nombre){
        Pista pistaTmp = new Pista();
        pistaTmp.setNombre(nombre);
        this.pistas.add(pistaTmp);
    }

    private void agregarExtencion(String nombreExt){
        this.pistas.get(this.pistas.size()-1).setExtension(nombreExt);
    }

    private void crearDeclaracion(boolean esKeep){
        this.declaracionAct = new Declaracion("declaracion",this.cantidadIdentaciones);
        this.declaracionAct.setEsKeep(esKeep);
        insertarInstruccion(this.declaracionAct);
    }

    private void insertarValsDeclaracion(String tipo,String var1,boolean esArreglo){
        this.declaracionAct.setTipoDecl(tipo);
        this.declaracionAct.insertarVariable(var1);
        this.declaracionAct.setEsArreglo(esArreglo);
    }

    private void insertarVarDecl(String variable){
        this.declaracionAct.insertarVariable(variable);
    }

    private void insExpr(String val,String tipo){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
    }

    private void insExpr2(String val,String tipo){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion2.add(expresion);
        }
    }

    private void crearListaExpr(){
        this.valoresExpresion = new ArrayList<>();
    }

    private void crearDimension(){
        Dimension dimension = new Dimension();   
        dimesiones.push(dimension);
        this.esDimension = true;
    }

    private void insertarListaExprDecl(){        
        this.declaracionAct.setValoresDecl(this.valoresExpresion);
    }

    private void insertarDimensionDecl(){
        this.declaracionAct.insertarDimension(this.dimesiones.peek());
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void insertarDimensionExpr(){
        this.expresionesArreglos.peek().insertarExpresion(this.dimesiones.peek());        
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void cerrarExpresionArreglo(){
        this.expresionesArreglos.pop();
    }

    private void cerrarDimension(){
        if(this.dimesiones.isEmpty()){
            this.esDimension = false;
        }else{
            this.esDimension = true;
        }
    }

    private void crearExpresionArreglo(String tipo,String val){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
        this.expresionesArreglos.push(expresion);
    }    

    private void crearExpresionArreglo2(String tipo,String val){
        Expresion expresion = new Expresion();
        expresion.setTipo(tipo);
        expresion.setValor(val);
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion2.add(expresion);
        }
        this.expresionesArreglos.push(expresion);
    }

    private void crearPrimDeclDim(){
        this.declDimPadre = new DeclDim();
        this.primerDeclDim = true;
        this.declaracionAct.setDeclaracionDimension(this.declDimPadre);
    }

    private void crearDeclDim(){
        if(this.primerDeclDim == true){
            this.primerDeclDim = false;
        }else{
            DeclDim declDim = new DeclDim();
            declDim.setDeclDimPadre(this.declDimPadre);
            this.declDimPadre.insertarHijoDeclDim(declDim);
            this.declDimPadre = declDim;    
        }            
    }

    private void cerrarDeclDim(){
        this.declDimPadre = this.declDimPadre.getDeclDimPadre();
    }

    private void crearDim(){
        Dimension dimension = new Dimension();
        this.valoresExpresion = new ArrayList<>();
        dimension.setExpresiones(valoresExpresion);
        this.declDimPadre.insertarDimension(dimension);
    }

    private void crearAsignacion(String variable, boolean esArreglo,boolean esPara,boolean esIncremento){
        this.asignacionAct = new Asignacion("asignacion",this.cantidadIdentaciones);        
        this.asignacionAct.setVariable(variable);
        this.valoresExpresion = new ArrayList<>();
        this.asignacionAct.setValoresDecl(this.valoresExpresion);
        this.asignacionAct.setEsArreglo(esArreglo);
        this.asignacionAct.setEsIncremento(esIncremento);
        if(esPara){
            this.paraAct.setAsignacion(this.asignacionAct);            
        }else{
            insertarInstruccion(this.asignacionAct);
        }        
    }

    private void insertarDimensionAsign(){
        this.asignacionAct.insertarDimension(this.dimesiones.peek());
        this.dimesiones.pop();
        cerrarDimension();
    }

    private void crearFuncion(String nombre,boolean esKeep,String tipo){
        this.funcionAct = new Funcion("funcion",this.cantidadIdentaciones);
        this.funcionAct.setNombre(nombre);
        this.funcionAct.setTipo(tipo);
        this.funcionAct.setEsKeep(esKeep);
        insertarInstruccion(this.funcionAct);
    }

    private void insertarParametro(String tipo, String nombre){
        Parametro parametro = new Parametro();
        this.valoresExpresion = new ArrayList<>();
        parametro.setNombre(nombre);
        parametro.setTipo(tipo);
        parametro.setExpresiones(this.valoresExpresion);
        this.funcionAct.insertarParametro(parametro);
    }

    private void insertarParametro2(String tipo, String nombre){
        Parametro parametro = new Parametro();
        this.valoresExpresion2 = new ArrayList<>();
        parametro.setNombre(nombre);
        parametro.setTipo(tipo);
        parametro.setExpresiones(this.valoresExpresion2);
        this.funcionAct.insertarParametro(parametro);
    }

    private void crearSi(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("si",this.cantidadIdentaciones);   
        insertarInstruccion(this.condisionSiAct);
    }

    private void crearSinoSi(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("sinosi",this.cantidadIdentaciones);      
        insertarCondSINO(true);                
    }
    
    private void crearSino(){
        this.insCond = "condSi";
        this.condisionSiAct = new CondSi("sino",this.cantidadIdentaciones);              
        insertarCondSINO(false);            
    }
    
    private void insertarCondSINO(boolean esSinoSi){
        int tamano = this.instruccionesFunciones.size()-1;
        for (int i = tamano; i >= 0; i--) {
            Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
            if (instruccionFun.getTipoInstruccion().equals("si")) {
                if (instruccionFun.getIdentacion() == this.condisionSiAct.getIdentacion()) {
                    CondSi condisionSi = (CondSi) instruccionFun;
                    if (esSinoSi) {
                        condisionSi.insertarCondicionSinoSi(this.condisionSiAct);
                    }else{
                        condisionSi.setCondsino(this.condisionSiAct);
                    }                    
                    insertarInstruccionEnFunciones(this.condisionSiAct);
                    break;
                }else{
                    this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
                }             
            }else{
                this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
            }
        }
    }

    private void crearCondicion(){
        this.condicionAct = new Condicion();
        this.valoresExpresion = new ArrayList<>();
        this.condicionAct.setExpresion1(this.valoresExpresion);
        switch(insCond)
        {
            case "condSi":
                this.condisionSiAct.insertarCondicion(this.condicionAct);
                break;
            case "para":
                this.paraAct.insertarCondicion(this.condicionAct);
                break;
            case "mientras":
                this.mientrasAct.insertarCondicion(this.condicionAct);
                break;
            default:
                
        }                
    }

    private void crearExpr2Cond(){
        this.valoresExpresion = new ArrayList<>();
        this.condicionAct.setExpresion2(this.valoresExpresion);
    }

    private void insOpNulCondicion(String op1,String op2){
        if(op1.equals("true")){
            this.condicionAct.setNuloExpr1(true);
        }else{
            this.condicionAct.setNuloExpr1(false);
        }
        if(op2.equals("true")){
            this.condicionAct.setNuloExpr2(true);
        }else{
            this.condicionAct.setNuloExpr2(false);
        }
    }

    private void insOpCondicion(String operador){
        switch(insCond)
        {
            case "condSi":
                this.condisionSiAct.insertarOperador(operador);
                break;
            case "para":
                this.paraAct.insertarOperador(operador);
                break;
            case "mientras":
                this.mientrasAct.insertarOperador(operador);
                break;
            default:
                
        }
    }

    private void crearPara(){
        this.insCond = "para";
        this.paraAct = new Para("para",this.cantidadIdentaciones);
        insertarInstruccion(this.paraAct);
    }
    
    private void insUltValsPara(String variable,String operador){
        this.paraAct.setVariable(variable);
        this.paraAct.setOperadorVar(operador);
    }

    private void insertarMientras(){
        this.insCond = "mientras";
        if(desdesMientras.empty()){
            this.mientrasAct = new Mientras("mientras",this.cantidadIdentaciones);
            insertarInstruccion(this.mientrasAct);
        }else{
            this.mientrasAct = desdesMientras.peek();
            desdesMientras.pop();
        }
    }

    private void insertarHacer(){             
        Mientras mientras = new Mientras("hacer",this.cantidadIdentaciones);
        desdesMientras.push(mientras);
        insertarInstruccion(mientras);
    }

    private void crearSwitch(){
        this.switchAct = new SwitchC("switch",this.cantidadIdentaciones);        
        this.valoresExpresion = new ArrayList<>();
        this.switchAct.setVariable(this.valoresExpresion);
        insertarInstruccion(this.switchAct);
    }

    private void crearCaso(String tipo){
        CasoC caso = new CasoC("caso",this.cantidadIdentaciones);
        this.valoresExpresion = new ArrayList<>();
        caso.setTipo(tipo);        
        caso.setExpresion(this.valoresExpresion);
        int tamano = this.instruccionesFunciones.size()-1;
        for (int i = tamano; i >= 0; i--) {
            Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
            int identacion = caso.getIdentacion() - 1;
            if (instruccionFun.getIdentacion() == identacion) {
                if(instruccionFun.getTipoInstruccion().equals("switch")){
                    SwitchC instruccionSwitch = (SwitchC) instruccionFun;
                    instruccionSwitch.insertarCaso(caso);                    
                    break;
                }
            }else{
                this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
            }
        }
        insertarInstruccionEnFunciones(caso);
    }

    private void crearIncDecr(String var, String tipo){
        IncrDecr incrementoDecr = new IncrDecr("incrDecr",this.cantidadIdentaciones);
        incrementoDecr.setTipo(tipo);
        incrementoDecr.setVariable(var);
        insertarInstruccion(incrementoDecr);
    }

    private void crearFuncExpresion(String nombre){
        this.funcionAct = new Funcion("funcion",this.cantidadIdentaciones);
        this.funcionAct.setNombre(nombre);
        this.funcionAct.setTipo("");
        this.funcionAct.setEsKeep(false);    
        Expresion expresion = new Expresion();
        expresion.setTipo("funcion");       
        expresion.setFuncion(this.funcionAct); 
        if(this.esDimension){
            dimesiones.peek().insertarExpresion(expresion);
        }else{
            this.valoresExpresion.add(expresion);
        }
    }
    
    
    private void insertarInstruccion(Instruccion instruccion){
        if(this.instruccionesFunciones.isEmpty()){
            this.pistas.get(this.pistas.size()-1).insertarInstruccion(instruccion);
            insertarInstruccionEnFunciones(instruccion);
            if (instruccion.getTipoInstruccion().equals("funcion")) {
                this.dentroDeFuncion = true;
            }else{
                this.dentroDeFuncion = false;
            }
        }else{
            int tamano = this.instruccionesFunciones.size()-1;
            for (int i = tamano; i >= 0; i--) {
                Instruccion instruccionFun = this.instruccionesFunciones.get(this.instruccionesFunciones.size()-1);
                int identacion = instruccion.getIdentacion() - 1;
                if (instruccionFun.getIdentacion() == identacion) {
                    //InsertarInstruccion en funcion
                    String tipoInstruccion = instruccionFun.getTipoInstruccion();
                    if (tipoInstruccion.equals("funcion")) {
                        Funcion funcion = (Funcion) instruccionFun;
                        funcion.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("si")||tipoInstruccion.equals("sino")||tipoInstruccion.equals("sinosi")){
                        CondSi condicionSi = (CondSi) instruccionFun;
                        condicionSi.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("para")){
                        Para paraIns = (Para) instruccionFun;
                        paraIns.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("mientras")){
                        Mientras mientrasIns = (Mientras) instruccionFun;
                        mientrasIns.insertarInstruccion(instruccion);
                    }else if(tipoInstruccion.equals("hacer")){
                        Mientras mientrasIns = (Mientras) instruccionFun;
                        mientrasIns.insertarInstruccion(instruccion);
                    }
                    insertarInstruccionEnFunciones(instruccion);
                    break;
                }else{                    
                    if(instruccionFun.getTipoInstruccion().equals("funcion")){
                        this.dentroDeFuncion = false;
                    }
                    this.instruccionesFunciones.remove(this.instruccionesFunciones.size()-1);
                    if(i==0){
                        this.pistas.get(this.pistas.size()-1).insertarInstruccion(instruccion);
                        insertarInstruccionEnFunciones(instruccion);
                    }
                }
            }
        }
    }
    
    private void insertarInstruccionEnFunciones(Instruccion instruccion){
        String tipo = instruccion.getTipoInstruccion();
        String[] funciones = new String[]{"si","sino","sinosi","funcion","para","mientras","hacer","continuar","switch","caso","principal"};
        List<String> list = Arrays.asList(funciones);
        if (list.contains(tipo)) {
            if (tipo.equals("funcion")) {
                if (this.dentroDeFuncion == false) {
                    this.instruccionesFunciones.add(instruccion);
                }
            }else{
                this.instruccionesFunciones.add(instruccion);
            }            
        }
    }
    
    public Lista getLista(){
        return this.listaAct;
    }

    private void creacionLista(){
        this.listaAct = new Lista();
    }

    private void insertarDatoLista(String tipo,String val){
        boolean valIns = false;
        if(val.equals("true")){
            valIns = true;
        }
        switch(tipo){
            case "NOMBRE":
                this.listaAct.setNombre(val.replace("\"", ""));
                break;
            case "RAMDOM":
                this.listaAct.setRandom(valIns);
                break;
            case "CIRCULAR":
                this.listaAct.setCircular(valIns);
                break;
        }
    }    

    private void insertarPistaLista(String valPista){
        this.listaAct.insertarPista(valPista.replace("\"", ""));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CompiladorParser$actions {
  private final CompiladorParser parser;

  /** Constructor */
  CUP$CompiladorParser$actions(CompiladorParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CompiladorParser$do_action_part00000000(
    int                        CUP$CompiladorParser$act_num,
    java_cup.runtime.lr_parser CUP$CompiladorParser$parser,
    java.util.Stack            CUP$CompiladorParser$stack,
    int                        CUP$CompiladorParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompiladorParser$result;

      /* select the action based on the action number */
      switch (CUP$CompiladorParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		RESULT = start_val;
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompiladorParser$parser.done_parsing();
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
MasIdent(val);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= IDENT NT$0 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= COMENT NT$1 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= siguiente NT$2 inicio LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= decl NT$3 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= asg NT$4 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= funcion NT$5 LLAVEIZ inicio LLAVEDER inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$6",62, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= condicional NT$6 LLAVEIZ inicio LLAVEDER inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$7",63, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= ciclo1 NT$7 LLAVEIZ inicio LLAVEDER inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$8",64, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= ciclo2 NT$8 LLAVEIZ inicio LLAVEDER ciclo3 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              Object RESULT =null;
crearFuncion("continuar",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$9",65, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= CONTINUAR NT$9 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$10 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$10",66, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio ::= funciones2 NT$10 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$11 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$11",67, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio ::= funciones3 NT$11 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$12 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$12",68, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicio ::= funcion5 NT$12 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$13 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$13",69, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inicio ::= cambiar NT$13 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$14 ::= 
            {
              Object RESULT =null;
cerrarIdent();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$14",70, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicio ::= incrDecr NT$14 PUNTCOMA inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicio ::= listas 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicio ::= error inicio 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inicio ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$15 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearPista(nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$15",71, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // siguiente ::= PISTA ID NT$15 ext LLAVEIZ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("siguiente",1, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$16 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
agregarExtencion(nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$16",72, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ext ::= EXTIENDE ID NT$16 extp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ext",2, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ext ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ext",2, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$17 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
agregarExtencion(nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$17",73, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // extp ::= COMA ID NT$17 extp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("extp",3, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // extp ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("extp",3, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$18 ::= 
            {
              Object RESULT =null;
crearDeclaracion(true);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$18",74, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decl ::= KEEP NT$18 declp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$19 ::= 
            {
              Object RESULT =null;
crearDeclaracion(false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$19",75, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decl ::= NT$19 declp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$20 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarValsDeclaracion(String.valueOf(tip),id1,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$20",76, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declp ::= VAR tipoD ID NT$20 declp2 asgF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("declp",5, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$21 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarValsDeclaracion(String.valueOf(tip),id1,true);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$21",77, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$22",78, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;
insertarDimensionDecl();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$23",79, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declp ::= VAR tipoD ARREGLO ID NT$21 declp2 BRACKI NT$22 expr1 NT$23 BRACKD arr arrFin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-11)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-11)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-11)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("declp",5, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-12)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoD ::= ENTEROSTR 
            {
              Object RESULT =null;
		RESULT="entero";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoD ::= DOBLESTR 
            {
              Object RESULT =null;
		RESULT="doble";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoD ::= BOOLEANSTR 
            {
              Object RESULT =null;
		RESULT="boolean";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipoD ::= CARACTERSTR 
            {
              Object RESULT =null;
		RESULT="caracter";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoD ::= CADENASTR 
            {
              Object RESULT =null;
		RESULT="cadena";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoD",9, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$24 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarVarDecl(id1);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$24",80, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declp2 ::= COMA ID NT$24 declp2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("declp2",6, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declp2 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("declp2",6, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$25 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$25",81, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionDecl();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$26",82, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arr ::= BRACKI NT$25 expr1 NT$26 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr",17, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arr ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr",17, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$27 ::= 
            {
              Object RESULT =null;
crearListaExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$27",83, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asgF ::= IGUAL NT$27 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		insertarListaExprDecl();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asgF",11, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asgF ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asgF",11, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$28 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"identificador");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$28",84, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr1 ::= ID NT$28 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$29 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearExpresionArreglo("arreglo",val);crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$29",85, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$30",86, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
cerrarExpresionArreglo();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$31",87, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr1 ::= ID BRACKI NT$29 expr1 NT$30 BRACKD arr2 NT$31 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$32 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"numero");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$32",88, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr1 ::= NUMERO NT$32 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$33 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"cadena");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$33",89, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr1 ::= CADENA NT$33 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$34 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"caracter");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$34",90, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr1 ::= CARACTER NT$34 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$35 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$35",91, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr1 ::= VERDADERO NT$35 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$36 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$36",92, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr1 ::= FALSO NT$36 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$37 ::= 
            {
              Object RESULT =null;
insExpr("(","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$37",93, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$38 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insExpr(")","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$38",94, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr1 ::= PARI NT$37 expr1 PARD NT$38 fin1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$39 ::= 
            {
              Object RESULT =null;
insExpr("!","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$39",95, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr1 ::= OPNOT NT$39 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr1",8, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$40 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$40",96, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$41",97, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arr2 ::= BRACKI NT$40 expr1 NT$41 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr2",18, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arr2 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr2",18, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$42 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$42",98, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // fin1 ::= op NT$42 expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1",10, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fin1 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1",10, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$43 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"identificador");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$43",99, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr2 ::= ID NT$43 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$44 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearExpresionArreglo("arreglo",val);crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$44",100, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$45 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$45",101, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$46 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
cerrarExpresionArreglo();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$46",102, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr2 ::= ID BRACKI NT$44 expr2 NT$45 BRACKD arr2p NT$46 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$47 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"numero");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$47",103, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr2 ::= NUMERO NT$47 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$48 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"cadena");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$48",104, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr2 ::= CADENA NT$48 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$49 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"caracter");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$49",105, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr2 ::= CARACTER NT$49 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$50 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$50",106, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr2 ::= VERDADERO NT$50 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$51 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$51",107, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr2 ::= FALSO NT$51 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$52 ::= 
            {
              Object RESULT =null;
insExpr("(","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$52",108, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$53 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insExpr(")","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$53",109, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr2 ::= PARI NT$52 expr2 PARD NT$53 fin1p 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$54 ::= 
            {
              Object RESULT =null;
insExpr("!","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$54",110, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr2 ::= OPNOT NT$54 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr2 ::= funciones4 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr2",37, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$55 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$55",111, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$56 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$56",112, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arr2p ::= BRACKI NT$55 expr2 NT$56 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr2p",38, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arr2p ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr2p",38, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$57 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$57",113, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // fin1p ::= op NT$57 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$58 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$58",114, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // fin1p ::= op3 NT$58 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$59 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$59",115, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // fin1p ::= op4 NT$59 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // fin1p ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin1p",39, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // op ::= SUMA 
            {
              Object RESULT =null;
		RESULT = "+";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // op ::= RESTA 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // op ::= MULT 
            {
              Object RESULT =null;
		RESULT = "*";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // op ::= DIVI 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // op ::= OPELV 
            {
              Object RESULT =null;
		RESULT = "^";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // op ::= OPMOD 
            {
              Object RESULT =null;
		RESULT = "%";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$60 ::= 
            {
              Object RESULT =null;
crearPrimDeclDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$60",116, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arrFin ::= IGUAL NT$60 arrFinP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFin",7, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arrFin ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFin",7, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$61 ::= 
            {
              Object RESULT =null;
crearDeclDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$61",117, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arrFinP ::= LLAVEIZ NT$61 arrFinP2 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		cerrarDeclDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFinP",13, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arrFinP ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFinP",13, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arrFinP2 ::= arrFinP fin2 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFinP2",14, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$62 ::= 
            {
              Object RESULT =null;
crearDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$62",118, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arrFinP2 ::= NT$62 expr1 fin3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arrFinP2",14, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // fin2 ::= COMA arrFinP 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin2",15, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // fin2 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin2",15, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$63 ::= 
            {
              Object RESULT =null;
crearDim();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$63",119, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // fin3 ::= COMA NT$63 expr1 fin3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin3",16, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // fin3 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin3",16, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$64 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,false,false,true);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$64",120, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // asg ::= ID NT$64 OPSUMSIM expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$65 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,false,false,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$65",121, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // asg ::= ID NT$65 IGUAL expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$66 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,true,false,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$66",122, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$67 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$67",123, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$68 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
insertarDimensionAsign();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$68",124, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // asg ::= ID NT$66 BRACKI NT$67 expr1 NT$68 BRACKD arr3 IGUAL expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg",19, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$69 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$69",125, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$70 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionAsign();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$70",126, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // arr3 ::= BRACKI NT$69 expr1 NT$70 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr3",20, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // arr3 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr3",20, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$71 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearFuncion(nom,true,String.valueOf(tp));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$71",127, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // funcion ::= KEEP tipoD ID NT$71 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$72 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$72",128, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // funcion ::= PRINCIPAL NT$72 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$73 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",true,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$73",129, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // funcion ::= KEEP PRINCIPAL NT$73 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$74 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearFuncion(nom,false,String.valueOf(tp));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$74",130, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // funcion ::= tipoD ID NT$74 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$75 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarParametro(String.valueOf(tp),nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$75",131, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // par ::= tipoD ID NT$75 fin4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$76 ::= 
            {
              Object RESULT =null;
insertarParametro("","");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$76",132, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // par ::= NT$76 expr2 fin4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // par ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par",22, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // fin4 ::= COMA par 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin4",23, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // fin4 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin4",23, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$77 ::= 
            {
              Object RESULT =null;
crearSwitch();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$77",133, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condicional ::= SWITCH NT$77 PARI expr1 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$78 ::= 
            {
              Object RESULT =null;
crearSi();crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$78",134, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // condicional ::= SI PARI NT$78 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$79 ::= 
            {
              Object RESULT =null;
crearSinoSi();crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$79",135, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // condicional ::= SINOSI PARI NT$79 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$79
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // condicional ::= SINO 
            {
              Object RESULT =null;
		crearSino();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicional",24, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$80 ::= 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insOpCondicion(String.valueOf(opI));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$80",136, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$81 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearExpr2Cond();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$81",137, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$82 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insOpNulCondicion(String.valueOf(op1),String.valueOf(op2));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$82",138, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // condicion ::= opNul expr1 op3 NT$80 opNul NT$81 expr1 NT$82 opLog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // condicion ::= opNul expr1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		insOpNulCondicion(String.valueOf(op1),"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$83 ::= 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insOpCondicion(String.valueOf(opI));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$83",139, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$84 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearExpr2Cond();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$84",140, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$85 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insOpNulCondicion(String.valueOf(op1),String.valueOf(op2));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$85",141, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // condicion ::= opNul expr1 op4 NT$83 opNul NT$84 expr1 NT$85 opLog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$85
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // opNul ::= OPNULO 
            {
              Object RESULT =null;
		RESULT = "true";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("opNul",29, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // opNul ::= 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("opNul",29, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // op3 ::= DOBIGUAL 
            {
              Object RESULT =null;
		RESULT = "==";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // op3 ::= DIFERENC 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // op3 ::= MAY 
            {
              Object RESULT =null;
		RESULT = ">";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // op3 ::= MEN 
            {
              Object RESULT =null;
		RESULT = "<";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // op3 ::= MAYIG 
            {
              Object RESULT =null;
		RESULT = ">=";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // op3 ::= MENIG 
            {
              Object RESULT =null;
		RESULT = "<=";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op3",26, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$86 ::= 
            {
              Object RESULT =null;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insOpCondicion(String.valueOf(opI));crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$86",142, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // opLog ::= op4 NT$86 condicion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$86
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int opIleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int opIright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object opI = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("opLog",27, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // opLog ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("opLog",27, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // op4 ::= AND 
            {
              Object RESULT =null;
		RESULT = "&&";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // op4 ::= NAND 
            {
              Object RESULT =null;
		RESULT = "!&&";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // op4 ::= OR 
            {
              Object RESULT =null;
		RESULT = "||";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // op4 ::= XOR 
            {
              Object RESULT =null;
		RESULT = "&|";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // op4 ::= NOR 
            {
              Object RESULT =null;
		RESULT = "!||";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op4",28, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$87 ::= 
            {
              Object RESULT =null;
crearPara();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$87",143, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$88 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$88",144, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$89 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int idVleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int idVright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String idV = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int opPleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int opPright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object opP = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insUltValsPara(idV,String.valueOf(opP));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$89",145, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ciclo1 ::= PARA NT$87 PARI tipoPara asg2 PUNTCOMA NT$88 condicion PUNTCOMA ID op2 NT$89 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$89
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int idVleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int idVright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String idV = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int opPleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int opPright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object opP = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ciclo1",30, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-12)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // NT$90 ::= 
            {
              Object RESULT =null;
insertarMientras();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$90",146, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$91 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$91",147, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ciclo1 ::= MIENTRAS NT$90 PARI NT$91 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$91
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ciclo1",30, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // op2 ::= OPINCR 
            {
              Object RESULT =null;
		RESULT = "++";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op2",31, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // op2 ::= OPDECR 
            {
              Object RESULT =null;
		RESULT = "--";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("op2",31, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$92 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,false,true,true);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$92",148, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // asg2 ::= ID NT$92 OPSUMSIM expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$92
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$93 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,false,true,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$93",149, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // asg2 ::= ID NT$93 IGUAL expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$93
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$94 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearAsignacion(val,true,true,false);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$94",150, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$95 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$95",151, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$96 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
insertarDimensionAsign();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$96",152, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // asg2 ::= ID NT$94 BRACKI NT$95 expr1 NT$96 BRACKD arr3 IGUAL expr1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$96
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("asg2",32, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // tipoPara ::= tipoD 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoPara",47, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // tipoPara ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("tipoPara",47, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ciclo2 ::= HACER 
            {
              Object RESULT =null;
		insertarHacer();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ciclo2",33, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$97 ::= 
            {
              Object RESULT =null;
insertarMientras();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$97",153, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$98 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearCondicion();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$98",154, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // ciclo3 ::= MIENTRAS NT$97 PARI NT$98 condicion PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$98
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("ciclo3",48, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$99 ::= 
            {
              Object RESULT =null;
crearFuncion("sumarizar",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$99",155, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // funciones2 ::= SUMARIZAR NT$99 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$99
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$100 ::= 
            {
              Object RESULT =null;
crearFuncion("longitud",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$100",156, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // funciones2 ::= LONGITUD NT$100 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$100
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$101 ::= 
            {
              Object RESULT =null;
crearFuncion("mensaje",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$101",157, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // funciones2 ::= MENSAJE NT$101 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$101
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones2",34, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NT$102 ::= 
            {
              Object RESULT =null;
crearFuncion("reproducir",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$102",158, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NT$103 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarParametro("","");insExpr(nota,"nota");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$103",159, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // funciones3 ::= REPRODUCIR NT$102 PARI NOTA NT$103 COMA par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$103
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$104 ::= 
            {
              Object RESULT =null;
crearFuncion("esperar",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$104",160, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // funciones3 ::= ESPERAR NT$104 PARI par PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$104
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // NT$105 ::= 
            {
              Object RESULT =null;
crearFuncion("retorna",false,"");insertarParametro("","");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$105",161, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // funciones3 ::= RETORNA NT$105 expr2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$105
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones3",35, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // NT$106 ::= 
            {
              Object RESULT =null;
crearCaso("normal");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$106",162, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // cambiar ::= CASO NT$106 expr1 DOSPUNT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$106
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$107 ::= 
            {
              Object RESULT =null;
crearCaso("default");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$107",163, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // cambiar ::= DEFAULT NT$107 DOSPUNT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$107
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // NT$108 ::= 
            {
              Object RESULT =null;
crearFuncion("salir",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$108",164, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // cambiar ::= SALIR NT$108 PUNTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$108
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("cambiar",36, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // incrDecr ::= ID OPINCR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		crearIncDecr(val,"++");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("incrDecr",40, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // incrDecr ::= ID OPDECR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		crearIncDecr(val,"--");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("incrDecr",40, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NT$109 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$109",165, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // funciones4 ::= PRINCIPAL NT$109 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$109
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // NT$110 ::= 
            {
              Object RESULT =null;
crearFuncion("principal",true,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$110",166, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // funciones4 ::= KEEP PRINCIPAL NT$110 PARI PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$110
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // NT$111 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearFuncExpresion(String.valueOf(nom));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$111",167, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // funciones4 ::= ID NT$111 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$111
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // NT$112 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("reproducir");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$112",168, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // NT$113 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarParametro2("","");insExpr2(nota,"nota");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$113",169, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // funciones4 ::= REPRODUCIR NT$112 PARI NOTA NT$113 COMA par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$113
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int notaleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).right;
		String nota = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // NT$114 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("sumarizar");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$114",170, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // funciones4 ::= SUMARIZAR NT$114 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$114
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NT$115 ::= 
            {
              Object RESULT =null;
crearFuncExpresion("longitud");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$115",171, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // funciones4 ::= LONGITUD NT$115 PARI par2 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$115
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funciones4",41, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // NT$116 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
crearFuncion(nom,false,"");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$116",172, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // funcion5 ::= ID NT$116 PARI par PARD finfunc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$116
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("funcion5",49, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // finfunc ::= LLAVEIZ inicio LLAVEDER 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("finfunc",50, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // finfunc ::= PUNTCOMA 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("finfunc",50, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // NT$117 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarParametro2(String.valueOf(tp),nom);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$117",173, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // par2 ::= tipoD ID NT$117 fin5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$117
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // NT$118 ::= 
            {
              Object RESULT =null;
insertarParametro2("","");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$118",174, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // par2 ::= NT$118 expr3 fin5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$118
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // par2 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("par2",42, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // fin5 ::= COMA par2 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin5",44, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // fin5 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin5",44, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // NT$119 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"identificador");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$119",175, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr3 ::= ID NT$119 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$119
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // NT$120 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
crearExpresionArreglo2("arreglo",val);crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$120",176, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // NT$121 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$121",177, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // NT$122 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-6)).value;
cerrarExpresionArreglo();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$122",178, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr3 ::= ID BRACKI NT$120 expr3 NT$121 BRACKD arr3p NT$122 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$122
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // NT$123 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"numero");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$123",179, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr3 ::= NUMERO NT$123 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$123
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // NT$124 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"cadena");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$124",180, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr3 ::= CADENA NT$124 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$124
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // NT$125 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"caracter");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$125",181, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr3 ::= CARACTER NT$125 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$125
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NT$126 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$126",182, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr3 ::= VERDADERO NT$126 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$126
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NT$127 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(val,"boolean");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$127",183, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expr3 ::= FALSO NT$127 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$127
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NT$128 ::= 
            {
              Object RESULT =null;
insExpr2("(","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$128",184, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // NT$129 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
insExpr2(")","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$129",185, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr3 ::= PARI NT$128 expr3 PARD NT$129 fin6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$129
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // NT$130 ::= 
            {
              Object RESULT =null;
insExpr2("!","op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$130",186, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // expr3 ::= OPNOT NT$130 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$130
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("expr3",43, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // NT$131 ::= 
            {
              Object RESULT =null;
crearDimension();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$131",187, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // NT$132 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
insertarDimensionExpr();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$132",188, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // arr3p ::= BRACKI NT$131 expr3 NT$132 BRACKD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$132
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr3p",46, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // arr3p ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("arr3p",46, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompiladorParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CompiladorParser$do_action_part00000001(
    int                        CUP$CompiladorParser$act_num,
    java_cup.runtime.lr_parser CUP$CompiladorParser$parser,
    java.util.Stack            CUP$CompiladorParser$stack,
    int                        CUP$CompiladorParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompiladorParser$result;

      /* select the action based on the action number */
      switch (CUP$CompiladorParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // NT$133 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$133",189, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // fin6 ::= op NT$133 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$133
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // NT$134 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$134",190, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // fin6 ::= op3 NT$134 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$134
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // NT$135 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insExpr2(String.valueOf(o),"op");
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$135",191, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // fin6 ::= op4 NT$135 expr3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$135
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // fin6 ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("fin6",45, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // NT$136 ::= 
            {
              Object RESULT =null;
creacionLista();
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$136",192, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // listas ::= LLAVEIZ LISTA DOSPUNT LLAVEIZ NT$136 datosLista LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$136
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("listas",51, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // NT$137 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarDatoLista("NOMBRE",val);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$137",193, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // datosLista ::= NOMBRE DOSPUNT CADENA NT$137 finlista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$137
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("datosLista",52, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // NT$138 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarDatoLista("RAMDOM",String.valueOf(val));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$138",194, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // datosLista ::= RANDOM DOSPUNT valoresLista NT$138 finlista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$138
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("datosLista",52, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // NT$139 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarDatoLista("CIRCULAR",String.valueOf(val));
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$139",195, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // datosLista ::= CIRCULAR DOSPUNT valoresLista NT$139 finlista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$139
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("datosLista",52, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // datosLista ::= PISTAS DOSPUNT BRACKI pistasLista BRACKD finlista 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("datosLista",52, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // datosLista ::= IDENT datosLista 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("datosLista",52, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // finlista ::= COMA datosLista 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("finlista",53, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // finlista ::= 
            {
              Object RESULT =null;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("finlista",53, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // valoresLista ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
		RESULT = "true";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("valoresLista",54, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // valoresLista ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
		RESULT = "false";
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("valoresLista",54, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // NT$140 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
insertarPistaLista(val);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("NT$140",196, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // pistasLista ::= ID NT$140 COMA pistasLista 
            {
              Object RESULT =null;
              // propagate RESULT from NT$140
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)).value;

              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("pistasLista",55, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.elementAt(CUP$CompiladorParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // pistasLista ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$CompiladorParser$stack.peek()).value;
		insertarPistaLista(val);
              CUP$CompiladorParser$result = parser.getSymbolFactory().newSymbol("pistasLista",55, ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompiladorParser$stack.peek()), RESULT);
            }
          return CUP$CompiladorParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompiladorParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CompiladorParser$do_action(
    int                        CUP$CompiladorParser$act_num,
    java_cup.runtime.lr_parser CUP$CompiladorParser$parser,
    java.util.Stack            CUP$CompiladorParser$stack,
    int                        CUP$CompiladorParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CompiladorParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CompiladorParser$do_action_part00000000(
                               CUP$CompiladorParser$act_num,
                               CUP$CompiladorParser$parser,
                               CUP$CompiladorParser$stack,
                               CUP$CompiladorParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CompiladorParser$do_action_part00000001(
                               CUP$CompiladorParser$act_num,
                               CUP$CompiladorParser$parser,
                               CUP$CompiladorParser$stack,
                               CUP$CompiladorParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
